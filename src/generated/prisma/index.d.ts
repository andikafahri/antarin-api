
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Status
 * 
 */
export type Status = $Result.DefaultSelection<Prisma.$StatusPayload>
/**
 * Model Status_order
 * 
 */
export type Status_order = $Result.DefaultSelection<Prisma.$Status_orderPayload>
/**
 * Model Brand
 * 
 */
export type Brand = $Result.DefaultSelection<Prisma.$BrandPayload>
/**
 * Model Subdistrict
 * 
 */
export type Subdistrict = $Result.DefaultSelection<Prisma.$SubdistrictPayload>
/**
 * Model City
 * 
 */
export type City = $Result.DefaultSelection<Prisma.$CityPayload>
/**
 * Model Province
 * 
 */
export type Province = $Result.DefaultSelection<Prisma.$ProvincePayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Courier
 * 
 */
export type Courier = $Result.DefaultSelection<Prisma.$CourierPayload>
/**
 * Model Merchant
 * 
 */
export type Merchant = $Result.DefaultSelection<Prisma.$MerchantPayload>
/**
 * Model Menu
 * 
 */
export type Menu = $Result.DefaultSelection<Prisma.$MenuPayload>
/**
 * Model Variant
 * 
 */
export type Variant = $Result.DefaultSelection<Prisma.$VariantPayload>
/**
 * Model Variant_item
 * 
 */
export type Variant_item = $Result.DefaultSelection<Prisma.$Variant_itemPayload>
/**
 * Model Order
 * 
 */
export type Order = $Result.DefaultSelection<Prisma.$OrderPayload>
/**
 * Model Order_item
 * 
 */
export type Order_item = $Result.DefaultSelection<Prisma.$Order_itemPayload>
/**
 * Model Log_order
 * 
 */
export type Log_order = $Result.DefaultSelection<Prisma.$Log_orderPayload>
/**
 * Model History_order
 * 
 */
export type History_order = $Result.DefaultSelection<Prisma.$History_orderPayload>
/**
 * Model History_order_item
 * 
 */
export type History_order_item = $Result.DefaultSelection<Prisma.$History_order_itemPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Statuses
 * const statuses = await prisma.status.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Statuses
   * const statuses = await prisma.status.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.status`: Exposes CRUD operations for the **Status** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Statuses
    * const statuses = await prisma.status.findMany()
    * ```
    */
  get status(): Prisma.StatusDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.status_order`: Exposes CRUD operations for the **Status_order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Status_orders
    * const status_orders = await prisma.status_order.findMany()
    * ```
    */
  get status_order(): Prisma.Status_orderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.brand`: Exposes CRUD operations for the **Brand** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Brands
    * const brands = await prisma.brand.findMany()
    * ```
    */
  get brand(): Prisma.BrandDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.subdistrict`: Exposes CRUD operations for the **Subdistrict** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subdistricts
    * const subdistricts = await prisma.subdistrict.findMany()
    * ```
    */
  get subdistrict(): Prisma.SubdistrictDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.city`: Exposes CRUD operations for the **City** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cities
    * const cities = await prisma.city.findMany()
    * ```
    */
  get city(): Prisma.CityDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.province`: Exposes CRUD operations for the **Province** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Provinces
    * const provinces = await prisma.province.findMany()
    * ```
    */
  get province(): Prisma.ProvinceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.courier`: Exposes CRUD operations for the **Courier** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Couriers
    * const couriers = await prisma.courier.findMany()
    * ```
    */
  get courier(): Prisma.CourierDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.merchant`: Exposes CRUD operations for the **Merchant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Merchants
    * const merchants = await prisma.merchant.findMany()
    * ```
    */
  get merchant(): Prisma.MerchantDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.menu`: Exposes CRUD operations for the **Menu** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Menus
    * const menus = await prisma.menu.findMany()
    * ```
    */
  get menu(): Prisma.MenuDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.variant`: Exposes CRUD operations for the **Variant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Variants
    * const variants = await prisma.variant.findMany()
    * ```
    */
  get variant(): Prisma.VariantDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.variant_item`: Exposes CRUD operations for the **Variant_item** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Variant_items
    * const variant_items = await prisma.variant_item.findMany()
    * ```
    */
  get variant_item(): Prisma.Variant_itemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.order`: Exposes CRUD operations for the **Order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.order.findMany()
    * ```
    */
  get order(): Prisma.OrderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.order_item`: Exposes CRUD operations for the **Order_item** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Order_items
    * const order_items = await prisma.order_item.findMany()
    * ```
    */
  get order_item(): Prisma.Order_itemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.log_order`: Exposes CRUD operations for the **Log_order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Log_orders
    * const log_orders = await prisma.log_order.findMany()
    * ```
    */
  get log_order(): Prisma.Log_orderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.history_order`: Exposes CRUD operations for the **History_order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more History_orders
    * const history_orders = await prisma.history_order.findMany()
    * ```
    */
  get history_order(): Prisma.History_orderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.history_order_item`: Exposes CRUD operations for the **History_order_item** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more History_order_items
    * const history_order_items = await prisma.history_order_item.findMany()
    * ```
    */
  get history_order_item(): Prisma.History_order_itemDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Status: 'Status',
    Status_order: 'Status_order',
    Brand: 'Brand',
    Subdistrict: 'Subdistrict',
    City: 'City',
    Province: 'Province',
    Category: 'Category',
    User: 'User',
    Courier: 'Courier',
    Merchant: 'Merchant',
    Menu: 'Menu',
    Variant: 'Variant',
    Variant_item: 'Variant_item',
    Order: 'Order',
    Order_item: 'Order_item',
    Log_order: 'Log_order',
    History_order: 'History_order',
    History_order_item: 'History_order_item'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "status" | "status_order" | "brand" | "subdistrict" | "city" | "province" | "category" | "user" | "courier" | "merchant" | "menu" | "variant" | "variant_item" | "order" | "order_item" | "log_order" | "history_order" | "history_order_item"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Status: {
        payload: Prisma.$StatusPayload<ExtArgs>
        fields: Prisma.StatusFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StatusFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StatusFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          findFirst: {
            args: Prisma.StatusFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StatusFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          findMany: {
            args: Prisma.StatusFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>[]
          }
          create: {
            args: Prisma.StatusCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          createMany: {
            args: Prisma.StatusCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.StatusDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          update: {
            args: Prisma.StatusUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          deleteMany: {
            args: Prisma.StatusDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StatusUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StatusUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          aggregate: {
            args: Prisma.StatusAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStatus>
          }
          groupBy: {
            args: Prisma.StatusGroupByArgs<ExtArgs>
            result: $Utils.Optional<StatusGroupByOutputType>[]
          }
          count: {
            args: Prisma.StatusCountArgs<ExtArgs>
            result: $Utils.Optional<StatusCountAggregateOutputType> | number
          }
        }
      }
      Status_order: {
        payload: Prisma.$Status_orderPayload<ExtArgs>
        fields: Prisma.Status_orderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Status_orderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Status_orderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Status_orderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Status_orderPayload>
          }
          findFirst: {
            args: Prisma.Status_orderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Status_orderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Status_orderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Status_orderPayload>
          }
          findMany: {
            args: Prisma.Status_orderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Status_orderPayload>[]
          }
          create: {
            args: Prisma.Status_orderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Status_orderPayload>
          }
          createMany: {
            args: Prisma.Status_orderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.Status_orderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Status_orderPayload>
          }
          update: {
            args: Prisma.Status_orderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Status_orderPayload>
          }
          deleteMany: {
            args: Prisma.Status_orderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.Status_orderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.Status_orderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Status_orderPayload>
          }
          aggregate: {
            args: Prisma.Status_orderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStatus_order>
          }
          groupBy: {
            args: Prisma.Status_orderGroupByArgs<ExtArgs>
            result: $Utils.Optional<Status_orderGroupByOutputType>[]
          }
          count: {
            args: Prisma.Status_orderCountArgs<ExtArgs>
            result: $Utils.Optional<Status_orderCountAggregateOutputType> | number
          }
        }
      }
      Brand: {
        payload: Prisma.$BrandPayload<ExtArgs>
        fields: Prisma.BrandFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BrandFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BrandFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          findFirst: {
            args: Prisma.BrandFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BrandFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          findMany: {
            args: Prisma.BrandFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>[]
          }
          create: {
            args: Prisma.BrandCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          createMany: {
            args: Prisma.BrandCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BrandDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          update: {
            args: Prisma.BrandUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          deleteMany: {
            args: Prisma.BrandDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BrandUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BrandUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          aggregate: {
            args: Prisma.BrandAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBrand>
          }
          groupBy: {
            args: Prisma.BrandGroupByArgs<ExtArgs>
            result: $Utils.Optional<BrandGroupByOutputType>[]
          }
          count: {
            args: Prisma.BrandCountArgs<ExtArgs>
            result: $Utils.Optional<BrandCountAggregateOutputType> | number
          }
        }
      }
      Subdistrict: {
        payload: Prisma.$SubdistrictPayload<ExtArgs>
        fields: Prisma.SubdistrictFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubdistrictFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubdistrictPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubdistrictFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubdistrictPayload>
          }
          findFirst: {
            args: Prisma.SubdistrictFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubdistrictPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubdistrictFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubdistrictPayload>
          }
          findMany: {
            args: Prisma.SubdistrictFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubdistrictPayload>[]
          }
          create: {
            args: Prisma.SubdistrictCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubdistrictPayload>
          }
          createMany: {
            args: Prisma.SubdistrictCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SubdistrictDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubdistrictPayload>
          }
          update: {
            args: Prisma.SubdistrictUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubdistrictPayload>
          }
          deleteMany: {
            args: Prisma.SubdistrictDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubdistrictUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SubdistrictUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubdistrictPayload>
          }
          aggregate: {
            args: Prisma.SubdistrictAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubdistrict>
          }
          groupBy: {
            args: Prisma.SubdistrictGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubdistrictGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubdistrictCountArgs<ExtArgs>
            result: $Utils.Optional<SubdistrictCountAggregateOutputType> | number
          }
        }
      }
      City: {
        payload: Prisma.$CityPayload<ExtArgs>
        fields: Prisma.CityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CityPayload>
          }
          findFirst: {
            args: Prisma.CityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CityPayload>
          }
          findMany: {
            args: Prisma.CityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CityPayload>[]
          }
          create: {
            args: Prisma.CityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CityPayload>
          }
          createMany: {
            args: Prisma.CityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CityPayload>
          }
          update: {
            args: Prisma.CityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CityPayload>
          }
          deleteMany: {
            args: Prisma.CityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CityPayload>
          }
          aggregate: {
            args: Prisma.CityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCity>
          }
          groupBy: {
            args: Prisma.CityGroupByArgs<ExtArgs>
            result: $Utils.Optional<CityGroupByOutputType>[]
          }
          count: {
            args: Prisma.CityCountArgs<ExtArgs>
            result: $Utils.Optional<CityCountAggregateOutputType> | number
          }
        }
      }
      Province: {
        payload: Prisma.$ProvincePayload<ExtArgs>
        fields: Prisma.ProvinceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProvinceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProvincePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProvinceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProvincePayload>
          }
          findFirst: {
            args: Prisma.ProvinceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProvincePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProvinceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProvincePayload>
          }
          findMany: {
            args: Prisma.ProvinceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProvincePayload>[]
          }
          create: {
            args: Prisma.ProvinceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProvincePayload>
          }
          createMany: {
            args: Prisma.ProvinceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProvinceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProvincePayload>
          }
          update: {
            args: Prisma.ProvinceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProvincePayload>
          }
          deleteMany: {
            args: Prisma.ProvinceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProvinceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProvinceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProvincePayload>
          }
          aggregate: {
            args: Prisma.ProvinceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProvince>
          }
          groupBy: {
            args: Prisma.ProvinceGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProvinceGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProvinceCountArgs<ExtArgs>
            result: $Utils.Optional<ProvinceCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Courier: {
        payload: Prisma.$CourierPayload<ExtArgs>
        fields: Prisma.CourierFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CourierFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourierPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CourierFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourierPayload>
          }
          findFirst: {
            args: Prisma.CourierFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourierPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CourierFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourierPayload>
          }
          findMany: {
            args: Prisma.CourierFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourierPayload>[]
          }
          create: {
            args: Prisma.CourierCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourierPayload>
          }
          createMany: {
            args: Prisma.CourierCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CourierDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourierPayload>
          }
          update: {
            args: Prisma.CourierUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourierPayload>
          }
          deleteMany: {
            args: Prisma.CourierDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CourierUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CourierUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourierPayload>
          }
          aggregate: {
            args: Prisma.CourierAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCourier>
          }
          groupBy: {
            args: Prisma.CourierGroupByArgs<ExtArgs>
            result: $Utils.Optional<CourierGroupByOutputType>[]
          }
          count: {
            args: Prisma.CourierCountArgs<ExtArgs>
            result: $Utils.Optional<CourierCountAggregateOutputType> | number
          }
        }
      }
      Merchant: {
        payload: Prisma.$MerchantPayload<ExtArgs>
        fields: Prisma.MerchantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MerchantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MerchantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantPayload>
          }
          findFirst: {
            args: Prisma.MerchantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MerchantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantPayload>
          }
          findMany: {
            args: Prisma.MerchantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantPayload>[]
          }
          create: {
            args: Prisma.MerchantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantPayload>
          }
          createMany: {
            args: Prisma.MerchantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.MerchantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantPayload>
          }
          update: {
            args: Prisma.MerchantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantPayload>
          }
          deleteMany: {
            args: Prisma.MerchantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MerchantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MerchantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantPayload>
          }
          aggregate: {
            args: Prisma.MerchantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMerchant>
          }
          groupBy: {
            args: Prisma.MerchantGroupByArgs<ExtArgs>
            result: $Utils.Optional<MerchantGroupByOutputType>[]
          }
          count: {
            args: Prisma.MerchantCountArgs<ExtArgs>
            result: $Utils.Optional<MerchantCountAggregateOutputType> | number
          }
        }
      }
      Menu: {
        payload: Prisma.$MenuPayload<ExtArgs>
        fields: Prisma.MenuFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MenuFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MenuFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuPayload>
          }
          findFirst: {
            args: Prisma.MenuFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MenuFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuPayload>
          }
          findMany: {
            args: Prisma.MenuFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuPayload>[]
          }
          create: {
            args: Prisma.MenuCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuPayload>
          }
          createMany: {
            args: Prisma.MenuCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.MenuDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuPayload>
          }
          update: {
            args: Prisma.MenuUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuPayload>
          }
          deleteMany: {
            args: Prisma.MenuDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MenuUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MenuUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuPayload>
          }
          aggregate: {
            args: Prisma.MenuAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMenu>
          }
          groupBy: {
            args: Prisma.MenuGroupByArgs<ExtArgs>
            result: $Utils.Optional<MenuGroupByOutputType>[]
          }
          count: {
            args: Prisma.MenuCountArgs<ExtArgs>
            result: $Utils.Optional<MenuCountAggregateOutputType> | number
          }
        }
      }
      Variant: {
        payload: Prisma.$VariantPayload<ExtArgs>
        fields: Prisma.VariantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VariantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VariantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VariantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VariantPayload>
          }
          findFirst: {
            args: Prisma.VariantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VariantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VariantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VariantPayload>
          }
          findMany: {
            args: Prisma.VariantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VariantPayload>[]
          }
          create: {
            args: Prisma.VariantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VariantPayload>
          }
          createMany: {
            args: Prisma.VariantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.VariantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VariantPayload>
          }
          update: {
            args: Prisma.VariantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VariantPayload>
          }
          deleteMany: {
            args: Prisma.VariantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VariantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VariantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VariantPayload>
          }
          aggregate: {
            args: Prisma.VariantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVariant>
          }
          groupBy: {
            args: Prisma.VariantGroupByArgs<ExtArgs>
            result: $Utils.Optional<VariantGroupByOutputType>[]
          }
          count: {
            args: Prisma.VariantCountArgs<ExtArgs>
            result: $Utils.Optional<VariantCountAggregateOutputType> | number
          }
        }
      }
      Variant_item: {
        payload: Prisma.$Variant_itemPayload<ExtArgs>
        fields: Prisma.Variant_itemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Variant_itemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Variant_itemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Variant_itemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Variant_itemPayload>
          }
          findFirst: {
            args: Prisma.Variant_itemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Variant_itemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Variant_itemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Variant_itemPayload>
          }
          findMany: {
            args: Prisma.Variant_itemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Variant_itemPayload>[]
          }
          create: {
            args: Prisma.Variant_itemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Variant_itemPayload>
          }
          createMany: {
            args: Prisma.Variant_itemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.Variant_itemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Variant_itemPayload>
          }
          update: {
            args: Prisma.Variant_itemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Variant_itemPayload>
          }
          deleteMany: {
            args: Prisma.Variant_itemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.Variant_itemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.Variant_itemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Variant_itemPayload>
          }
          aggregate: {
            args: Prisma.Variant_itemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVariant_item>
          }
          groupBy: {
            args: Prisma.Variant_itemGroupByArgs<ExtArgs>
            result: $Utils.Optional<Variant_itemGroupByOutputType>[]
          }
          count: {
            args: Prisma.Variant_itemCountArgs<ExtArgs>
            result: $Utils.Optional<Variant_itemCountAggregateOutputType> | number
          }
        }
      }
      Order: {
        payload: Prisma.$OrderPayload<ExtArgs>
        fields: Prisma.OrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findFirst: {
            args: Prisma.OrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findMany: {
            args: Prisma.OrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          create: {
            args: Prisma.OrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          createMany: {
            args: Prisma.OrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.OrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          update: {
            args: Prisma.OrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          deleteMany: {
            args: Prisma.OrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          aggregate: {
            args: Prisma.OrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrder>
          }
          groupBy: {
            args: Prisma.OrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderCountArgs<ExtArgs>
            result: $Utils.Optional<OrderCountAggregateOutputType> | number
          }
        }
      }
      Order_item: {
        payload: Prisma.$Order_itemPayload<ExtArgs>
        fields: Prisma.Order_itemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Order_itemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Order_itemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Order_itemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Order_itemPayload>
          }
          findFirst: {
            args: Prisma.Order_itemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Order_itemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Order_itemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Order_itemPayload>
          }
          findMany: {
            args: Prisma.Order_itemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Order_itemPayload>[]
          }
          create: {
            args: Prisma.Order_itemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Order_itemPayload>
          }
          createMany: {
            args: Prisma.Order_itemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.Order_itemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Order_itemPayload>
          }
          update: {
            args: Prisma.Order_itemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Order_itemPayload>
          }
          deleteMany: {
            args: Prisma.Order_itemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.Order_itemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.Order_itemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Order_itemPayload>
          }
          aggregate: {
            args: Prisma.Order_itemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrder_item>
          }
          groupBy: {
            args: Prisma.Order_itemGroupByArgs<ExtArgs>
            result: $Utils.Optional<Order_itemGroupByOutputType>[]
          }
          count: {
            args: Prisma.Order_itemCountArgs<ExtArgs>
            result: $Utils.Optional<Order_itemCountAggregateOutputType> | number
          }
        }
      }
      Log_order: {
        payload: Prisma.$Log_orderPayload<ExtArgs>
        fields: Prisma.Log_orderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Log_orderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Log_orderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Log_orderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Log_orderPayload>
          }
          findFirst: {
            args: Prisma.Log_orderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Log_orderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Log_orderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Log_orderPayload>
          }
          findMany: {
            args: Prisma.Log_orderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Log_orderPayload>[]
          }
          create: {
            args: Prisma.Log_orderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Log_orderPayload>
          }
          createMany: {
            args: Prisma.Log_orderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.Log_orderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Log_orderPayload>
          }
          update: {
            args: Prisma.Log_orderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Log_orderPayload>
          }
          deleteMany: {
            args: Prisma.Log_orderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.Log_orderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.Log_orderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Log_orderPayload>
          }
          aggregate: {
            args: Prisma.Log_orderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLog_order>
          }
          groupBy: {
            args: Prisma.Log_orderGroupByArgs<ExtArgs>
            result: $Utils.Optional<Log_orderGroupByOutputType>[]
          }
          count: {
            args: Prisma.Log_orderCountArgs<ExtArgs>
            result: $Utils.Optional<Log_orderCountAggregateOutputType> | number
          }
        }
      }
      History_order: {
        payload: Prisma.$History_orderPayload<ExtArgs>
        fields: Prisma.History_orderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.History_orderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$History_orderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.History_orderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$History_orderPayload>
          }
          findFirst: {
            args: Prisma.History_orderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$History_orderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.History_orderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$History_orderPayload>
          }
          findMany: {
            args: Prisma.History_orderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$History_orderPayload>[]
          }
          create: {
            args: Prisma.History_orderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$History_orderPayload>
          }
          createMany: {
            args: Prisma.History_orderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.History_orderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$History_orderPayload>
          }
          update: {
            args: Prisma.History_orderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$History_orderPayload>
          }
          deleteMany: {
            args: Prisma.History_orderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.History_orderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.History_orderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$History_orderPayload>
          }
          aggregate: {
            args: Prisma.History_orderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHistory_order>
          }
          groupBy: {
            args: Prisma.History_orderGroupByArgs<ExtArgs>
            result: $Utils.Optional<History_orderGroupByOutputType>[]
          }
          count: {
            args: Prisma.History_orderCountArgs<ExtArgs>
            result: $Utils.Optional<History_orderCountAggregateOutputType> | number
          }
        }
      }
      History_order_item: {
        payload: Prisma.$History_order_itemPayload<ExtArgs>
        fields: Prisma.History_order_itemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.History_order_itemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$History_order_itemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.History_order_itemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$History_order_itemPayload>
          }
          findFirst: {
            args: Prisma.History_order_itemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$History_order_itemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.History_order_itemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$History_order_itemPayload>
          }
          findMany: {
            args: Prisma.History_order_itemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$History_order_itemPayload>[]
          }
          create: {
            args: Prisma.History_order_itemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$History_order_itemPayload>
          }
          createMany: {
            args: Prisma.History_order_itemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.History_order_itemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$History_order_itemPayload>
          }
          update: {
            args: Prisma.History_order_itemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$History_order_itemPayload>
          }
          deleteMany: {
            args: Prisma.History_order_itemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.History_order_itemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.History_order_itemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$History_order_itemPayload>
          }
          aggregate: {
            args: Prisma.History_order_itemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHistory_order_item>
          }
          groupBy: {
            args: Prisma.History_order_itemGroupByArgs<ExtArgs>
            result: $Utils.Optional<History_order_itemGroupByOutputType>[]
          }
          count: {
            args: Prisma.History_order_itemCountArgs<ExtArgs>
            result: $Utils.Optional<History_order_itemCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    status?: StatusOmit
    status_order?: Status_orderOmit
    brand?: BrandOmit
    subdistrict?: SubdistrictOmit
    city?: CityOmit
    province?: ProvinceOmit
    category?: CategoryOmit
    user?: UserOmit
    courier?: CourierOmit
    merchant?: MerchantOmit
    menu?: MenuOmit
    variant?: VariantOmit
    variant_item?: Variant_itemOmit
    order?: OrderOmit
    order_item?: Order_itemOmit
    log_order?: Log_orderOmit
    history_order?: History_orderOmit
    history_order_item?: History_order_itemOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type StatusCountOutputType
   */

  export type StatusCountOutputType = {
    rel_user: number
    rel_courier: number
    rel_merchant: number
  }

  export type StatusCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rel_user?: boolean | StatusCountOutputTypeCountRel_userArgs
    rel_courier?: boolean | StatusCountOutputTypeCountRel_courierArgs
    rel_merchant?: boolean | StatusCountOutputTypeCountRel_merchantArgs
  }

  // Custom InputTypes
  /**
   * StatusCountOutputType without action
   */
  export type StatusCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusCountOutputType
     */
    select?: StatusCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StatusCountOutputType without action
   */
  export type StatusCountOutputTypeCountRel_userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * StatusCountOutputType without action
   */
  export type StatusCountOutputTypeCountRel_courierArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourierWhereInput
  }

  /**
   * StatusCountOutputType without action
   */
  export type StatusCountOutputTypeCountRel_merchantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MerchantWhereInput
  }


  /**
   * Count Type Status_orderCountOutputType
   */

  export type Status_orderCountOutputType = {
    rel_log_order: number
  }

  export type Status_orderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rel_log_order?: boolean | Status_orderCountOutputTypeCountRel_log_orderArgs
  }

  // Custom InputTypes
  /**
   * Status_orderCountOutputType without action
   */
  export type Status_orderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status_orderCountOutputType
     */
    select?: Status_orderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Status_orderCountOutputType without action
   */
  export type Status_orderCountOutputTypeCountRel_log_orderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Log_orderWhereInput
  }


  /**
   * Count Type BrandCountOutputType
   */

  export type BrandCountOutputType = {
    rel_courier: number
  }

  export type BrandCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rel_courier?: boolean | BrandCountOutputTypeCountRel_courierArgs
  }

  // Custom InputTypes
  /**
   * BrandCountOutputType without action
   */
  export type BrandCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrandCountOutputType
     */
    select?: BrandCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BrandCountOutputType without action
   */
  export type BrandCountOutputTypeCountRel_courierArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourierWhereInput
  }


  /**
   * Count Type SubdistrictCountOutputType
   */

  export type SubdistrictCountOutputType = {
    rel_merchant: number
  }

  export type SubdistrictCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rel_merchant?: boolean | SubdistrictCountOutputTypeCountRel_merchantArgs
  }

  // Custom InputTypes
  /**
   * SubdistrictCountOutputType without action
   */
  export type SubdistrictCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubdistrictCountOutputType
     */
    select?: SubdistrictCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SubdistrictCountOutputType without action
   */
  export type SubdistrictCountOutputTypeCountRel_merchantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MerchantWhereInput
  }


  /**
   * Count Type CityCountOutputType
   */

  export type CityCountOutputType = {
    rel_merchant: number
  }

  export type CityCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rel_merchant?: boolean | CityCountOutputTypeCountRel_merchantArgs
  }

  // Custom InputTypes
  /**
   * CityCountOutputType without action
   */
  export type CityCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CityCountOutputType
     */
    select?: CityCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CityCountOutputType without action
   */
  export type CityCountOutputTypeCountRel_merchantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MerchantWhereInput
  }


  /**
   * Count Type ProvinceCountOutputType
   */

  export type ProvinceCountOutputType = {
    rel_merchant: number
  }

  export type ProvinceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rel_merchant?: boolean | ProvinceCountOutputTypeCountRel_merchantArgs
  }

  // Custom InputTypes
  /**
   * ProvinceCountOutputType without action
   */
  export type ProvinceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProvinceCountOutputType
     */
    select?: ProvinceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProvinceCountOutputType without action
   */
  export type ProvinceCountOutputTypeCountRel_merchantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MerchantWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    rel_menu: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rel_menu?: boolean | CategoryCountOutputTypeCountRel_menuArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountRel_menuArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MenuWhereInput
  }


  /**
   * Count Type MerchantCountOutputType
   */

  export type MerchantCountOutputType = {
    rel_menu: number
  }

  export type MerchantCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rel_menu?: boolean | MerchantCountOutputTypeCountRel_menuArgs
  }

  // Custom InputTypes
  /**
   * MerchantCountOutputType without action
   */
  export type MerchantCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerchantCountOutputType
     */
    select?: MerchantCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MerchantCountOutputType without action
   */
  export type MerchantCountOutputTypeCountRel_menuArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MenuWhereInput
  }


  /**
   * Count Type MenuCountOutputType
   */

  export type MenuCountOutputType = {
    rel_variant: number
  }

  export type MenuCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rel_variant?: boolean | MenuCountOutputTypeCountRel_variantArgs
  }

  // Custom InputTypes
  /**
   * MenuCountOutputType without action
   */
  export type MenuCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuCountOutputType
     */
    select?: MenuCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MenuCountOutputType without action
   */
  export type MenuCountOutputTypeCountRel_variantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VariantWhereInput
  }


  /**
   * Count Type VariantCountOutputType
   */

  export type VariantCountOutputType = {
    rel_variant_item: number
  }

  export type VariantCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rel_variant_item?: boolean | VariantCountOutputTypeCountRel_variant_itemArgs
  }

  // Custom InputTypes
  /**
   * VariantCountOutputType without action
   */
  export type VariantCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VariantCountOutputType
     */
    select?: VariantCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VariantCountOutputType without action
   */
  export type VariantCountOutputTypeCountRel_variant_itemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Variant_itemWhereInput
  }


  /**
   * Count Type OrderCountOutputType
   */

  export type OrderCountOutputType = {
    rel_order_item: number
  }

  export type OrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rel_order_item?: boolean | OrderCountOutputTypeCountRel_order_itemArgs
  }

  // Custom InputTypes
  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCountOutputType
     */
    select?: OrderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountRel_order_itemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Order_itemWhereInput
  }


  /**
   * Count Type History_orderCountOutputType
   */

  export type History_orderCountOutputType = {
    rel_history_order_item: number
  }

  export type History_orderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rel_history_order_item?: boolean | History_orderCountOutputTypeCountRel_history_order_itemArgs
  }

  // Custom InputTypes
  /**
   * History_orderCountOutputType without action
   */
  export type History_orderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History_orderCountOutputType
     */
    select?: History_orderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * History_orderCountOutputType without action
   */
  export type History_orderCountOutputTypeCountRel_history_order_itemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: History_order_itemWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Status
   */

  export type AggregateStatus = {
    _count: StatusCountAggregateOutputType | null
    _avg: StatusAvgAggregateOutputType | null
    _sum: StatusSumAggregateOutputType | null
    _min: StatusMinAggregateOutputType | null
    _max: StatusMaxAggregateOutputType | null
  }

  export type StatusAvgAggregateOutputType = {
    id: number | null
  }

  export type StatusSumAggregateOutputType = {
    id: number | null
  }

  export type StatusMinAggregateOutputType = {
    id: number | null
    name: string | null
    created_at: Date | null
    update_at: Date | null
  }

  export type StatusMaxAggregateOutputType = {
    id: number | null
    name: string | null
    created_at: Date | null
    update_at: Date | null
  }

  export type StatusCountAggregateOutputType = {
    id: number
    name: number
    created_at: number
    update_at: number
    _all: number
  }


  export type StatusAvgAggregateInputType = {
    id?: true
  }

  export type StatusSumAggregateInputType = {
    id?: true
  }

  export type StatusMinAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    update_at?: true
  }

  export type StatusMaxAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    update_at?: true
  }

  export type StatusCountAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    update_at?: true
    _all?: true
  }

  export type StatusAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Status to aggregate.
     */
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     */
    orderBy?: StatusOrderByWithRelationInput | StatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Statuses
    **/
    _count?: true | StatusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StatusAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StatusSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatusMaxAggregateInputType
  }

  export type GetStatusAggregateType<T extends StatusAggregateArgs> = {
        [P in keyof T & keyof AggregateStatus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStatus[P]>
      : GetScalarType<T[P], AggregateStatus[P]>
  }




  export type StatusGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StatusWhereInput
    orderBy?: StatusOrderByWithAggregationInput | StatusOrderByWithAggregationInput[]
    by: StatusScalarFieldEnum[] | StatusScalarFieldEnum
    having?: StatusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatusCountAggregateInputType | true
    _avg?: StatusAvgAggregateInputType
    _sum?: StatusSumAggregateInputType
    _min?: StatusMinAggregateInputType
    _max?: StatusMaxAggregateInputType
  }

  export type StatusGroupByOutputType = {
    id: number
    name: string
    created_at: Date
    update_at: Date | null
    _count: StatusCountAggregateOutputType | null
    _avg: StatusAvgAggregateOutputType | null
    _sum: StatusSumAggregateOutputType | null
    _min: StatusMinAggregateOutputType | null
    _max: StatusMaxAggregateOutputType | null
  }

  type GetStatusGroupByPayload<T extends StatusGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StatusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatusGroupByOutputType[P]>
            : GetScalarType<T[P], StatusGroupByOutputType[P]>
        }
      >
    >


  export type StatusSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    created_at?: boolean
    update_at?: boolean
    rel_user?: boolean | Status$rel_userArgs<ExtArgs>
    rel_courier?: boolean | Status$rel_courierArgs<ExtArgs>
    rel_merchant?: boolean | Status$rel_merchantArgs<ExtArgs>
    _count?: boolean | StatusCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["status"]>



  export type StatusSelectScalar = {
    id?: boolean
    name?: boolean
    created_at?: boolean
    update_at?: boolean
  }

  export type StatusOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "created_at" | "update_at", ExtArgs["result"]["status"]>
  export type StatusInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rel_user?: boolean | Status$rel_userArgs<ExtArgs>
    rel_courier?: boolean | Status$rel_courierArgs<ExtArgs>
    rel_merchant?: boolean | Status$rel_merchantArgs<ExtArgs>
    _count?: boolean | StatusCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $StatusPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Status"
    objects: {
      rel_user: Prisma.$UserPayload<ExtArgs>[]
      rel_courier: Prisma.$CourierPayload<ExtArgs>[]
      rel_merchant: Prisma.$MerchantPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      created_at: Date
      update_at: Date | null
    }, ExtArgs["result"]["status"]>
    composites: {}
  }

  type StatusGetPayload<S extends boolean | null | undefined | StatusDefaultArgs> = $Result.GetResult<Prisma.$StatusPayload, S>

  type StatusCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StatusFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StatusCountAggregateInputType | true
    }

  export interface StatusDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Status'], meta: { name: 'Status' } }
    /**
     * Find zero or one Status that matches the filter.
     * @param {StatusFindUniqueArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StatusFindUniqueArgs>(args: SelectSubset<T, StatusFindUniqueArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Status that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StatusFindUniqueOrThrowArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StatusFindUniqueOrThrowArgs>(args: SelectSubset<T, StatusFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Status that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusFindFirstArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StatusFindFirstArgs>(args?: SelectSubset<T, StatusFindFirstArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Status that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusFindFirstOrThrowArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StatusFindFirstOrThrowArgs>(args?: SelectSubset<T, StatusFindFirstOrThrowArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Statuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Statuses
     * const statuses = await prisma.status.findMany()
     * 
     * // Get first 10 Statuses
     * const statuses = await prisma.status.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const statusWithIdOnly = await prisma.status.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StatusFindManyArgs>(args?: SelectSubset<T, StatusFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Status.
     * @param {StatusCreateArgs} args - Arguments to create a Status.
     * @example
     * // Create one Status
     * const Status = await prisma.status.create({
     *   data: {
     *     // ... data to create a Status
     *   }
     * })
     * 
     */
    create<T extends StatusCreateArgs>(args: SelectSubset<T, StatusCreateArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Statuses.
     * @param {StatusCreateManyArgs} args - Arguments to create many Statuses.
     * @example
     * // Create many Statuses
     * const status = await prisma.status.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StatusCreateManyArgs>(args?: SelectSubset<T, StatusCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Status.
     * @param {StatusDeleteArgs} args - Arguments to delete one Status.
     * @example
     * // Delete one Status
     * const Status = await prisma.status.delete({
     *   where: {
     *     // ... filter to delete one Status
     *   }
     * })
     * 
     */
    delete<T extends StatusDeleteArgs>(args: SelectSubset<T, StatusDeleteArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Status.
     * @param {StatusUpdateArgs} args - Arguments to update one Status.
     * @example
     * // Update one Status
     * const status = await prisma.status.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StatusUpdateArgs>(args: SelectSubset<T, StatusUpdateArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Statuses.
     * @param {StatusDeleteManyArgs} args - Arguments to filter Statuses to delete.
     * @example
     * // Delete a few Statuses
     * const { count } = await prisma.status.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StatusDeleteManyArgs>(args?: SelectSubset<T, StatusDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Statuses
     * const status = await prisma.status.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StatusUpdateManyArgs>(args: SelectSubset<T, StatusUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Status.
     * @param {StatusUpsertArgs} args - Arguments to update or create a Status.
     * @example
     * // Update or create a Status
     * const status = await prisma.status.upsert({
     *   create: {
     *     // ... data to create a Status
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Status we want to update
     *   }
     * })
     */
    upsert<T extends StatusUpsertArgs>(args: SelectSubset<T, StatusUpsertArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusCountArgs} args - Arguments to filter Statuses to count.
     * @example
     * // Count the number of Statuses
     * const count = await prisma.status.count({
     *   where: {
     *     // ... the filter for the Statuses we want to count
     *   }
     * })
    **/
    count<T extends StatusCountArgs>(
      args?: Subset<T, StatusCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Status.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatusAggregateArgs>(args: Subset<T, StatusAggregateArgs>): Prisma.PrismaPromise<GetStatusAggregateType<T>>

    /**
     * Group by Status.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StatusGroupByArgs['orderBy'] }
        : { orderBy?: StatusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StatusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Status model
   */
  readonly fields: StatusFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Status.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StatusClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rel_user<T extends Status$rel_userArgs<ExtArgs> = {}>(args?: Subset<T, Status$rel_userArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    rel_courier<T extends Status$rel_courierArgs<ExtArgs> = {}>(args?: Subset<T, Status$rel_courierArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourierPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    rel_merchant<T extends Status$rel_merchantArgs<ExtArgs> = {}>(args?: Subset<T, Status$rel_merchantArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Status model
   */
  interface StatusFieldRefs {
    readonly id: FieldRef<"Status", 'Int'>
    readonly name: FieldRef<"Status", 'String'>
    readonly created_at: FieldRef<"Status", 'DateTime'>
    readonly update_at: FieldRef<"Status", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Status findUnique
   */
  export type StatusFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * Filter, which Status to fetch.
     */
    where: StatusWhereUniqueInput
  }

  /**
   * Status findUniqueOrThrow
   */
  export type StatusFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * Filter, which Status to fetch.
     */
    where: StatusWhereUniqueInput
  }

  /**
   * Status findFirst
   */
  export type StatusFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * Filter, which Status to fetch.
     */
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     */
    orderBy?: StatusOrderByWithRelationInput | StatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Statuses.
     */
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Statuses.
     */
    distinct?: StatusScalarFieldEnum | StatusScalarFieldEnum[]
  }

  /**
   * Status findFirstOrThrow
   */
  export type StatusFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * Filter, which Status to fetch.
     */
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     */
    orderBy?: StatusOrderByWithRelationInput | StatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Statuses.
     */
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Statuses.
     */
    distinct?: StatusScalarFieldEnum | StatusScalarFieldEnum[]
  }

  /**
   * Status findMany
   */
  export type StatusFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * Filter, which Statuses to fetch.
     */
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     */
    orderBy?: StatusOrderByWithRelationInput | StatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Statuses.
     */
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     */
    skip?: number
    distinct?: StatusScalarFieldEnum | StatusScalarFieldEnum[]
  }

  /**
   * Status create
   */
  export type StatusCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * The data needed to create a Status.
     */
    data: XOR<StatusCreateInput, StatusUncheckedCreateInput>
  }

  /**
   * Status createMany
   */
  export type StatusCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Statuses.
     */
    data: StatusCreateManyInput | StatusCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Status update
   */
  export type StatusUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * The data needed to update a Status.
     */
    data: XOR<StatusUpdateInput, StatusUncheckedUpdateInput>
    /**
     * Choose, which Status to update.
     */
    where: StatusWhereUniqueInput
  }

  /**
   * Status updateMany
   */
  export type StatusUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Statuses.
     */
    data: XOR<StatusUpdateManyMutationInput, StatusUncheckedUpdateManyInput>
    /**
     * Filter which Statuses to update
     */
    where?: StatusWhereInput
    /**
     * Limit how many Statuses to update.
     */
    limit?: number
  }

  /**
   * Status upsert
   */
  export type StatusUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * The filter to search for the Status to update in case it exists.
     */
    where: StatusWhereUniqueInput
    /**
     * In case the Status found by the `where` argument doesn't exist, create a new Status with this data.
     */
    create: XOR<StatusCreateInput, StatusUncheckedCreateInput>
    /**
     * In case the Status was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StatusUpdateInput, StatusUncheckedUpdateInput>
  }

  /**
   * Status delete
   */
  export type StatusDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * Filter which Status to delete.
     */
    where: StatusWhereUniqueInput
  }

  /**
   * Status deleteMany
   */
  export type StatusDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Statuses to delete
     */
    where?: StatusWhereInput
    /**
     * Limit how many Statuses to delete.
     */
    limit?: number
  }

  /**
   * Status.rel_user
   */
  export type Status$rel_userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Status.rel_courier
   */
  export type Status$rel_courierArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courier
     */
    select?: CourierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Courier
     */
    omit?: CourierOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourierInclude<ExtArgs> | null
    where?: CourierWhereInput
    orderBy?: CourierOrderByWithRelationInput | CourierOrderByWithRelationInput[]
    cursor?: CourierWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourierScalarFieldEnum | CourierScalarFieldEnum[]
  }

  /**
   * Status.rel_merchant
   */
  export type Status$rel_merchantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    where?: MerchantWhereInput
    orderBy?: MerchantOrderByWithRelationInput | MerchantOrderByWithRelationInput[]
    cursor?: MerchantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MerchantScalarFieldEnum | MerchantScalarFieldEnum[]
  }

  /**
   * Status without action
   */
  export type StatusDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusInclude<ExtArgs> | null
  }


  /**
   * Model Status_order
   */

  export type AggregateStatus_order = {
    _count: Status_orderCountAggregateOutputType | null
    _avg: Status_orderAvgAggregateOutputType | null
    _sum: Status_orderSumAggregateOutputType | null
    _min: Status_orderMinAggregateOutputType | null
    _max: Status_orderMaxAggregateOutputType | null
  }

  export type Status_orderAvgAggregateOutputType = {
    id: number | null
  }

  export type Status_orderSumAggregateOutputType = {
    id: number | null
  }

  export type Status_orderMinAggregateOutputType = {
    id: number | null
    name: string | null
    created_at: Date | null
    update_at: Date | null
  }

  export type Status_orderMaxAggregateOutputType = {
    id: number | null
    name: string | null
    created_at: Date | null
    update_at: Date | null
  }

  export type Status_orderCountAggregateOutputType = {
    id: number
    name: number
    created_at: number
    update_at: number
    _all: number
  }


  export type Status_orderAvgAggregateInputType = {
    id?: true
  }

  export type Status_orderSumAggregateInputType = {
    id?: true
  }

  export type Status_orderMinAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    update_at?: true
  }

  export type Status_orderMaxAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    update_at?: true
  }

  export type Status_orderCountAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    update_at?: true
    _all?: true
  }

  export type Status_orderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Status_order to aggregate.
     */
    where?: Status_orderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Status_orders to fetch.
     */
    orderBy?: Status_orderOrderByWithRelationInput | Status_orderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Status_orderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Status_orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Status_orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Status_orders
    **/
    _count?: true | Status_orderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Status_orderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Status_orderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Status_orderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Status_orderMaxAggregateInputType
  }

  export type GetStatus_orderAggregateType<T extends Status_orderAggregateArgs> = {
        [P in keyof T & keyof AggregateStatus_order]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStatus_order[P]>
      : GetScalarType<T[P], AggregateStatus_order[P]>
  }




  export type Status_orderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Status_orderWhereInput
    orderBy?: Status_orderOrderByWithAggregationInput | Status_orderOrderByWithAggregationInput[]
    by: Status_orderScalarFieldEnum[] | Status_orderScalarFieldEnum
    having?: Status_orderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Status_orderCountAggregateInputType | true
    _avg?: Status_orderAvgAggregateInputType
    _sum?: Status_orderSumAggregateInputType
    _min?: Status_orderMinAggregateInputType
    _max?: Status_orderMaxAggregateInputType
  }

  export type Status_orderGroupByOutputType = {
    id: number
    name: string
    created_at: Date
    update_at: Date | null
    _count: Status_orderCountAggregateOutputType | null
    _avg: Status_orderAvgAggregateOutputType | null
    _sum: Status_orderSumAggregateOutputType | null
    _min: Status_orderMinAggregateOutputType | null
    _max: Status_orderMaxAggregateOutputType | null
  }

  type GetStatus_orderGroupByPayload<T extends Status_orderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Status_orderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Status_orderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Status_orderGroupByOutputType[P]>
            : GetScalarType<T[P], Status_orderGroupByOutputType[P]>
        }
      >
    >


  export type Status_orderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    created_at?: boolean
    update_at?: boolean
    rel_log_order?: boolean | Status_order$rel_log_orderArgs<ExtArgs>
    _count?: boolean | Status_orderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["status_order"]>



  export type Status_orderSelectScalar = {
    id?: boolean
    name?: boolean
    created_at?: boolean
    update_at?: boolean
  }

  export type Status_orderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "created_at" | "update_at", ExtArgs["result"]["status_order"]>
  export type Status_orderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rel_log_order?: boolean | Status_order$rel_log_orderArgs<ExtArgs>
    _count?: boolean | Status_orderCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $Status_orderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Status_order"
    objects: {
      rel_log_order: Prisma.$Log_orderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      created_at: Date
      update_at: Date | null
    }, ExtArgs["result"]["status_order"]>
    composites: {}
  }

  type Status_orderGetPayload<S extends boolean | null | undefined | Status_orderDefaultArgs> = $Result.GetResult<Prisma.$Status_orderPayload, S>

  type Status_orderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<Status_orderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Status_orderCountAggregateInputType | true
    }

  export interface Status_orderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Status_order'], meta: { name: 'Status_order' } }
    /**
     * Find zero or one Status_order that matches the filter.
     * @param {Status_orderFindUniqueArgs} args - Arguments to find a Status_order
     * @example
     * // Get one Status_order
     * const status_order = await prisma.status_order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends Status_orderFindUniqueArgs>(args: SelectSubset<T, Status_orderFindUniqueArgs<ExtArgs>>): Prisma__Status_orderClient<$Result.GetResult<Prisma.$Status_orderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Status_order that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {Status_orderFindUniqueOrThrowArgs} args - Arguments to find a Status_order
     * @example
     * // Get one Status_order
     * const status_order = await prisma.status_order.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends Status_orderFindUniqueOrThrowArgs>(args: SelectSubset<T, Status_orderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__Status_orderClient<$Result.GetResult<Prisma.$Status_orderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Status_order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Status_orderFindFirstArgs} args - Arguments to find a Status_order
     * @example
     * // Get one Status_order
     * const status_order = await prisma.status_order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends Status_orderFindFirstArgs>(args?: SelectSubset<T, Status_orderFindFirstArgs<ExtArgs>>): Prisma__Status_orderClient<$Result.GetResult<Prisma.$Status_orderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Status_order that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Status_orderFindFirstOrThrowArgs} args - Arguments to find a Status_order
     * @example
     * // Get one Status_order
     * const status_order = await prisma.status_order.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends Status_orderFindFirstOrThrowArgs>(args?: SelectSubset<T, Status_orderFindFirstOrThrowArgs<ExtArgs>>): Prisma__Status_orderClient<$Result.GetResult<Prisma.$Status_orderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Status_orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Status_orderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Status_orders
     * const status_orders = await prisma.status_order.findMany()
     * 
     * // Get first 10 Status_orders
     * const status_orders = await prisma.status_order.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const status_orderWithIdOnly = await prisma.status_order.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends Status_orderFindManyArgs>(args?: SelectSubset<T, Status_orderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Status_orderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Status_order.
     * @param {Status_orderCreateArgs} args - Arguments to create a Status_order.
     * @example
     * // Create one Status_order
     * const Status_order = await prisma.status_order.create({
     *   data: {
     *     // ... data to create a Status_order
     *   }
     * })
     * 
     */
    create<T extends Status_orderCreateArgs>(args: SelectSubset<T, Status_orderCreateArgs<ExtArgs>>): Prisma__Status_orderClient<$Result.GetResult<Prisma.$Status_orderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Status_orders.
     * @param {Status_orderCreateManyArgs} args - Arguments to create many Status_orders.
     * @example
     * // Create many Status_orders
     * const status_order = await prisma.status_order.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends Status_orderCreateManyArgs>(args?: SelectSubset<T, Status_orderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Status_order.
     * @param {Status_orderDeleteArgs} args - Arguments to delete one Status_order.
     * @example
     * // Delete one Status_order
     * const Status_order = await prisma.status_order.delete({
     *   where: {
     *     // ... filter to delete one Status_order
     *   }
     * })
     * 
     */
    delete<T extends Status_orderDeleteArgs>(args: SelectSubset<T, Status_orderDeleteArgs<ExtArgs>>): Prisma__Status_orderClient<$Result.GetResult<Prisma.$Status_orderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Status_order.
     * @param {Status_orderUpdateArgs} args - Arguments to update one Status_order.
     * @example
     * // Update one Status_order
     * const status_order = await prisma.status_order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends Status_orderUpdateArgs>(args: SelectSubset<T, Status_orderUpdateArgs<ExtArgs>>): Prisma__Status_orderClient<$Result.GetResult<Prisma.$Status_orderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Status_orders.
     * @param {Status_orderDeleteManyArgs} args - Arguments to filter Status_orders to delete.
     * @example
     * // Delete a few Status_orders
     * const { count } = await prisma.status_order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends Status_orderDeleteManyArgs>(args?: SelectSubset<T, Status_orderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Status_orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Status_orderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Status_orders
     * const status_order = await prisma.status_order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends Status_orderUpdateManyArgs>(args: SelectSubset<T, Status_orderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Status_order.
     * @param {Status_orderUpsertArgs} args - Arguments to update or create a Status_order.
     * @example
     * // Update or create a Status_order
     * const status_order = await prisma.status_order.upsert({
     *   create: {
     *     // ... data to create a Status_order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Status_order we want to update
     *   }
     * })
     */
    upsert<T extends Status_orderUpsertArgs>(args: SelectSubset<T, Status_orderUpsertArgs<ExtArgs>>): Prisma__Status_orderClient<$Result.GetResult<Prisma.$Status_orderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Status_orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Status_orderCountArgs} args - Arguments to filter Status_orders to count.
     * @example
     * // Count the number of Status_orders
     * const count = await prisma.status_order.count({
     *   where: {
     *     // ... the filter for the Status_orders we want to count
     *   }
     * })
    **/
    count<T extends Status_orderCountArgs>(
      args?: Subset<T, Status_orderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Status_orderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Status_order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Status_orderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Status_orderAggregateArgs>(args: Subset<T, Status_orderAggregateArgs>): Prisma.PrismaPromise<GetStatus_orderAggregateType<T>>

    /**
     * Group by Status_order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Status_orderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Status_orderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Status_orderGroupByArgs['orderBy'] }
        : { orderBy?: Status_orderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Status_orderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatus_orderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Status_order model
   */
  readonly fields: Status_orderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Status_order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Status_orderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rel_log_order<T extends Status_order$rel_log_orderArgs<ExtArgs> = {}>(args?: Subset<T, Status_order$rel_log_orderArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Log_orderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Status_order model
   */
  interface Status_orderFieldRefs {
    readonly id: FieldRef<"Status_order", 'Int'>
    readonly name: FieldRef<"Status_order", 'String'>
    readonly created_at: FieldRef<"Status_order", 'DateTime'>
    readonly update_at: FieldRef<"Status_order", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Status_order findUnique
   */
  export type Status_orderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status_order
     */
    select?: Status_orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status_order
     */
    omit?: Status_orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Status_orderInclude<ExtArgs> | null
    /**
     * Filter, which Status_order to fetch.
     */
    where: Status_orderWhereUniqueInput
  }

  /**
   * Status_order findUniqueOrThrow
   */
  export type Status_orderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status_order
     */
    select?: Status_orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status_order
     */
    omit?: Status_orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Status_orderInclude<ExtArgs> | null
    /**
     * Filter, which Status_order to fetch.
     */
    where: Status_orderWhereUniqueInput
  }

  /**
   * Status_order findFirst
   */
  export type Status_orderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status_order
     */
    select?: Status_orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status_order
     */
    omit?: Status_orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Status_orderInclude<ExtArgs> | null
    /**
     * Filter, which Status_order to fetch.
     */
    where?: Status_orderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Status_orders to fetch.
     */
    orderBy?: Status_orderOrderByWithRelationInput | Status_orderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Status_orders.
     */
    cursor?: Status_orderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Status_orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Status_orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Status_orders.
     */
    distinct?: Status_orderScalarFieldEnum | Status_orderScalarFieldEnum[]
  }

  /**
   * Status_order findFirstOrThrow
   */
  export type Status_orderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status_order
     */
    select?: Status_orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status_order
     */
    omit?: Status_orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Status_orderInclude<ExtArgs> | null
    /**
     * Filter, which Status_order to fetch.
     */
    where?: Status_orderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Status_orders to fetch.
     */
    orderBy?: Status_orderOrderByWithRelationInput | Status_orderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Status_orders.
     */
    cursor?: Status_orderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Status_orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Status_orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Status_orders.
     */
    distinct?: Status_orderScalarFieldEnum | Status_orderScalarFieldEnum[]
  }

  /**
   * Status_order findMany
   */
  export type Status_orderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status_order
     */
    select?: Status_orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status_order
     */
    omit?: Status_orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Status_orderInclude<ExtArgs> | null
    /**
     * Filter, which Status_orders to fetch.
     */
    where?: Status_orderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Status_orders to fetch.
     */
    orderBy?: Status_orderOrderByWithRelationInput | Status_orderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Status_orders.
     */
    cursor?: Status_orderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Status_orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Status_orders.
     */
    skip?: number
    distinct?: Status_orderScalarFieldEnum | Status_orderScalarFieldEnum[]
  }

  /**
   * Status_order create
   */
  export type Status_orderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status_order
     */
    select?: Status_orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status_order
     */
    omit?: Status_orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Status_orderInclude<ExtArgs> | null
    /**
     * The data needed to create a Status_order.
     */
    data: XOR<Status_orderCreateInput, Status_orderUncheckedCreateInput>
  }

  /**
   * Status_order createMany
   */
  export type Status_orderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Status_orders.
     */
    data: Status_orderCreateManyInput | Status_orderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Status_order update
   */
  export type Status_orderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status_order
     */
    select?: Status_orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status_order
     */
    omit?: Status_orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Status_orderInclude<ExtArgs> | null
    /**
     * The data needed to update a Status_order.
     */
    data: XOR<Status_orderUpdateInput, Status_orderUncheckedUpdateInput>
    /**
     * Choose, which Status_order to update.
     */
    where: Status_orderWhereUniqueInput
  }

  /**
   * Status_order updateMany
   */
  export type Status_orderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Status_orders.
     */
    data: XOR<Status_orderUpdateManyMutationInput, Status_orderUncheckedUpdateManyInput>
    /**
     * Filter which Status_orders to update
     */
    where?: Status_orderWhereInput
    /**
     * Limit how many Status_orders to update.
     */
    limit?: number
  }

  /**
   * Status_order upsert
   */
  export type Status_orderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status_order
     */
    select?: Status_orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status_order
     */
    omit?: Status_orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Status_orderInclude<ExtArgs> | null
    /**
     * The filter to search for the Status_order to update in case it exists.
     */
    where: Status_orderWhereUniqueInput
    /**
     * In case the Status_order found by the `where` argument doesn't exist, create a new Status_order with this data.
     */
    create: XOR<Status_orderCreateInput, Status_orderUncheckedCreateInput>
    /**
     * In case the Status_order was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Status_orderUpdateInput, Status_orderUncheckedUpdateInput>
  }

  /**
   * Status_order delete
   */
  export type Status_orderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status_order
     */
    select?: Status_orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status_order
     */
    omit?: Status_orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Status_orderInclude<ExtArgs> | null
    /**
     * Filter which Status_order to delete.
     */
    where: Status_orderWhereUniqueInput
  }

  /**
   * Status_order deleteMany
   */
  export type Status_orderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Status_orders to delete
     */
    where?: Status_orderWhereInput
    /**
     * Limit how many Status_orders to delete.
     */
    limit?: number
  }

  /**
   * Status_order.rel_log_order
   */
  export type Status_order$rel_log_orderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log_order
     */
    select?: Log_orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log_order
     */
    omit?: Log_orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Log_orderInclude<ExtArgs> | null
    where?: Log_orderWhereInput
    orderBy?: Log_orderOrderByWithRelationInput | Log_orderOrderByWithRelationInput[]
    cursor?: Log_orderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Log_orderScalarFieldEnum | Log_orderScalarFieldEnum[]
  }

  /**
   * Status_order without action
   */
  export type Status_orderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status_order
     */
    select?: Status_orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status_order
     */
    omit?: Status_orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Status_orderInclude<ExtArgs> | null
  }


  /**
   * Model Brand
   */

  export type AggregateBrand = {
    _count: BrandCountAggregateOutputType | null
    _avg: BrandAvgAggregateOutputType | null
    _sum: BrandSumAggregateOutputType | null
    _min: BrandMinAggregateOutputType | null
    _max: BrandMaxAggregateOutputType | null
  }

  export type BrandAvgAggregateOutputType = {
    id: number | null
  }

  export type BrandSumAggregateOutputType = {
    id: number | null
  }

  export type BrandMinAggregateOutputType = {
    id: number | null
    name: string | null
    brand: string | null
    created_at: Date | null
    update_at: Date | null
  }

  export type BrandMaxAggregateOutputType = {
    id: number | null
    name: string | null
    brand: string | null
    created_at: Date | null
    update_at: Date | null
  }

  export type BrandCountAggregateOutputType = {
    id: number
    name: number
    brand: number
    created_at: number
    update_at: number
    _all: number
  }


  export type BrandAvgAggregateInputType = {
    id?: true
  }

  export type BrandSumAggregateInputType = {
    id?: true
  }

  export type BrandMinAggregateInputType = {
    id?: true
    name?: true
    brand?: true
    created_at?: true
    update_at?: true
  }

  export type BrandMaxAggregateInputType = {
    id?: true
    name?: true
    brand?: true
    created_at?: true
    update_at?: true
  }

  export type BrandCountAggregateInputType = {
    id?: true
    name?: true
    brand?: true
    created_at?: true
    update_at?: true
    _all?: true
  }

  export type BrandAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Brand to aggregate.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Brands
    **/
    _count?: true | BrandCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BrandAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BrandSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BrandMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BrandMaxAggregateInputType
  }

  export type GetBrandAggregateType<T extends BrandAggregateArgs> = {
        [P in keyof T & keyof AggregateBrand]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBrand[P]>
      : GetScalarType<T[P], AggregateBrand[P]>
  }




  export type BrandGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BrandWhereInput
    orderBy?: BrandOrderByWithAggregationInput | BrandOrderByWithAggregationInput[]
    by: BrandScalarFieldEnum[] | BrandScalarFieldEnum
    having?: BrandScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BrandCountAggregateInputType | true
    _avg?: BrandAvgAggregateInputType
    _sum?: BrandSumAggregateInputType
    _min?: BrandMinAggregateInputType
    _max?: BrandMaxAggregateInputType
  }

  export type BrandGroupByOutputType = {
    id: number
    name: string
    brand: string
    created_at: Date
    update_at: Date | null
    _count: BrandCountAggregateOutputType | null
    _avg: BrandAvgAggregateOutputType | null
    _sum: BrandSumAggregateOutputType | null
    _min: BrandMinAggregateOutputType | null
    _max: BrandMaxAggregateOutputType | null
  }

  type GetBrandGroupByPayload<T extends BrandGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BrandGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BrandGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BrandGroupByOutputType[P]>
            : GetScalarType<T[P], BrandGroupByOutputType[P]>
        }
      >
    >


  export type BrandSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    brand?: boolean
    created_at?: boolean
    update_at?: boolean
    rel_courier?: boolean | Brand$rel_courierArgs<ExtArgs>
    _count?: boolean | BrandCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["brand"]>



  export type BrandSelectScalar = {
    id?: boolean
    name?: boolean
    brand?: boolean
    created_at?: boolean
    update_at?: boolean
  }

  export type BrandOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "brand" | "created_at" | "update_at", ExtArgs["result"]["brand"]>
  export type BrandInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rel_courier?: boolean | Brand$rel_courierArgs<ExtArgs>
    _count?: boolean | BrandCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $BrandPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Brand"
    objects: {
      rel_courier: Prisma.$CourierPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      brand: string
      created_at: Date
      update_at: Date | null
    }, ExtArgs["result"]["brand"]>
    composites: {}
  }

  type BrandGetPayload<S extends boolean | null | undefined | BrandDefaultArgs> = $Result.GetResult<Prisma.$BrandPayload, S>

  type BrandCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BrandFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BrandCountAggregateInputType | true
    }

  export interface BrandDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Brand'], meta: { name: 'Brand' } }
    /**
     * Find zero or one Brand that matches the filter.
     * @param {BrandFindUniqueArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BrandFindUniqueArgs>(args: SelectSubset<T, BrandFindUniqueArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Brand that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BrandFindUniqueOrThrowArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BrandFindUniqueOrThrowArgs>(args: SelectSubset<T, BrandFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Brand that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandFindFirstArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BrandFindFirstArgs>(args?: SelectSubset<T, BrandFindFirstArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Brand that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandFindFirstOrThrowArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BrandFindFirstOrThrowArgs>(args?: SelectSubset<T, BrandFindFirstOrThrowArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Brands that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Brands
     * const brands = await prisma.brand.findMany()
     * 
     * // Get first 10 Brands
     * const brands = await prisma.brand.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const brandWithIdOnly = await prisma.brand.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BrandFindManyArgs>(args?: SelectSubset<T, BrandFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Brand.
     * @param {BrandCreateArgs} args - Arguments to create a Brand.
     * @example
     * // Create one Brand
     * const Brand = await prisma.brand.create({
     *   data: {
     *     // ... data to create a Brand
     *   }
     * })
     * 
     */
    create<T extends BrandCreateArgs>(args: SelectSubset<T, BrandCreateArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Brands.
     * @param {BrandCreateManyArgs} args - Arguments to create many Brands.
     * @example
     * // Create many Brands
     * const brand = await prisma.brand.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BrandCreateManyArgs>(args?: SelectSubset<T, BrandCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Brand.
     * @param {BrandDeleteArgs} args - Arguments to delete one Brand.
     * @example
     * // Delete one Brand
     * const Brand = await prisma.brand.delete({
     *   where: {
     *     // ... filter to delete one Brand
     *   }
     * })
     * 
     */
    delete<T extends BrandDeleteArgs>(args: SelectSubset<T, BrandDeleteArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Brand.
     * @param {BrandUpdateArgs} args - Arguments to update one Brand.
     * @example
     * // Update one Brand
     * const brand = await prisma.brand.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BrandUpdateArgs>(args: SelectSubset<T, BrandUpdateArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Brands.
     * @param {BrandDeleteManyArgs} args - Arguments to filter Brands to delete.
     * @example
     * // Delete a few Brands
     * const { count } = await prisma.brand.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BrandDeleteManyArgs>(args?: SelectSubset<T, BrandDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Brands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Brands
     * const brand = await prisma.brand.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BrandUpdateManyArgs>(args: SelectSubset<T, BrandUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Brand.
     * @param {BrandUpsertArgs} args - Arguments to update or create a Brand.
     * @example
     * // Update or create a Brand
     * const brand = await prisma.brand.upsert({
     *   create: {
     *     // ... data to create a Brand
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Brand we want to update
     *   }
     * })
     */
    upsert<T extends BrandUpsertArgs>(args: SelectSubset<T, BrandUpsertArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Brands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandCountArgs} args - Arguments to filter Brands to count.
     * @example
     * // Count the number of Brands
     * const count = await prisma.brand.count({
     *   where: {
     *     // ... the filter for the Brands we want to count
     *   }
     * })
    **/
    count<T extends BrandCountArgs>(
      args?: Subset<T, BrandCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BrandCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Brand.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BrandAggregateArgs>(args: Subset<T, BrandAggregateArgs>): Prisma.PrismaPromise<GetBrandAggregateType<T>>

    /**
     * Group by Brand.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BrandGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BrandGroupByArgs['orderBy'] }
        : { orderBy?: BrandGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BrandGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBrandGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Brand model
   */
  readonly fields: BrandFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Brand.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BrandClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rel_courier<T extends Brand$rel_courierArgs<ExtArgs> = {}>(args?: Subset<T, Brand$rel_courierArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourierPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Brand model
   */
  interface BrandFieldRefs {
    readonly id: FieldRef<"Brand", 'Int'>
    readonly name: FieldRef<"Brand", 'String'>
    readonly brand: FieldRef<"Brand", 'String'>
    readonly created_at: FieldRef<"Brand", 'DateTime'>
    readonly update_at: FieldRef<"Brand", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Brand findUnique
   */
  export type BrandFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand findUniqueOrThrow
   */
  export type BrandFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand findFirst
   */
  export type BrandFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Brands.
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Brands.
     */
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * Brand findFirstOrThrow
   */
  export type BrandFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Brands.
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Brands.
     */
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * Brand findMany
   */
  export type BrandFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brands to fetch.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Brands.
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * Brand create
   */
  export type BrandCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * The data needed to create a Brand.
     */
    data: XOR<BrandCreateInput, BrandUncheckedCreateInput>
  }

  /**
   * Brand createMany
   */
  export type BrandCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Brands.
     */
    data: BrandCreateManyInput | BrandCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Brand update
   */
  export type BrandUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * The data needed to update a Brand.
     */
    data: XOR<BrandUpdateInput, BrandUncheckedUpdateInput>
    /**
     * Choose, which Brand to update.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand updateMany
   */
  export type BrandUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Brands.
     */
    data: XOR<BrandUpdateManyMutationInput, BrandUncheckedUpdateManyInput>
    /**
     * Filter which Brands to update
     */
    where?: BrandWhereInput
    /**
     * Limit how many Brands to update.
     */
    limit?: number
  }

  /**
   * Brand upsert
   */
  export type BrandUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * The filter to search for the Brand to update in case it exists.
     */
    where: BrandWhereUniqueInput
    /**
     * In case the Brand found by the `where` argument doesn't exist, create a new Brand with this data.
     */
    create: XOR<BrandCreateInput, BrandUncheckedCreateInput>
    /**
     * In case the Brand was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BrandUpdateInput, BrandUncheckedUpdateInput>
  }

  /**
   * Brand delete
   */
  export type BrandDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter which Brand to delete.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand deleteMany
   */
  export type BrandDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Brands to delete
     */
    where?: BrandWhereInput
    /**
     * Limit how many Brands to delete.
     */
    limit?: number
  }

  /**
   * Brand.rel_courier
   */
  export type Brand$rel_courierArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courier
     */
    select?: CourierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Courier
     */
    omit?: CourierOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourierInclude<ExtArgs> | null
    where?: CourierWhereInput
    orderBy?: CourierOrderByWithRelationInput | CourierOrderByWithRelationInput[]
    cursor?: CourierWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourierScalarFieldEnum | CourierScalarFieldEnum[]
  }

  /**
   * Brand without action
   */
  export type BrandDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
  }


  /**
   * Model Subdistrict
   */

  export type AggregateSubdistrict = {
    _count: SubdistrictCountAggregateOutputType | null
    _avg: SubdistrictAvgAggregateOutputType | null
    _sum: SubdistrictSumAggregateOutputType | null
    _min: SubdistrictMinAggregateOutputType | null
    _max: SubdistrictMaxAggregateOutputType | null
  }

  export type SubdistrictAvgAggregateOutputType = {
    id: number | null
    id_city: number | null
  }

  export type SubdistrictSumAggregateOutputType = {
    id: number | null
    id_city: number | null
  }

  export type SubdistrictMinAggregateOutputType = {
    id: number | null
    name: string | null
    id_city: number | null
    created_at: Date | null
    update_at: Date | null
  }

  export type SubdistrictMaxAggregateOutputType = {
    id: number | null
    name: string | null
    id_city: number | null
    created_at: Date | null
    update_at: Date | null
  }

  export type SubdistrictCountAggregateOutputType = {
    id: number
    name: number
    id_city: number
    created_at: number
    update_at: number
    _all: number
  }


  export type SubdistrictAvgAggregateInputType = {
    id?: true
    id_city?: true
  }

  export type SubdistrictSumAggregateInputType = {
    id?: true
    id_city?: true
  }

  export type SubdistrictMinAggregateInputType = {
    id?: true
    name?: true
    id_city?: true
    created_at?: true
    update_at?: true
  }

  export type SubdistrictMaxAggregateInputType = {
    id?: true
    name?: true
    id_city?: true
    created_at?: true
    update_at?: true
  }

  export type SubdistrictCountAggregateInputType = {
    id?: true
    name?: true
    id_city?: true
    created_at?: true
    update_at?: true
    _all?: true
  }

  export type SubdistrictAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subdistrict to aggregate.
     */
    where?: SubdistrictWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subdistricts to fetch.
     */
    orderBy?: SubdistrictOrderByWithRelationInput | SubdistrictOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubdistrictWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subdistricts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subdistricts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subdistricts
    **/
    _count?: true | SubdistrictCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubdistrictAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubdistrictSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubdistrictMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubdistrictMaxAggregateInputType
  }

  export type GetSubdistrictAggregateType<T extends SubdistrictAggregateArgs> = {
        [P in keyof T & keyof AggregateSubdistrict]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubdistrict[P]>
      : GetScalarType<T[P], AggregateSubdistrict[P]>
  }




  export type SubdistrictGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubdistrictWhereInput
    orderBy?: SubdistrictOrderByWithAggregationInput | SubdistrictOrderByWithAggregationInput[]
    by: SubdistrictScalarFieldEnum[] | SubdistrictScalarFieldEnum
    having?: SubdistrictScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubdistrictCountAggregateInputType | true
    _avg?: SubdistrictAvgAggregateInputType
    _sum?: SubdistrictSumAggregateInputType
    _min?: SubdistrictMinAggregateInputType
    _max?: SubdistrictMaxAggregateInputType
  }

  export type SubdistrictGroupByOutputType = {
    id: number
    name: string
    id_city: number
    created_at: Date
    update_at: Date | null
    _count: SubdistrictCountAggregateOutputType | null
    _avg: SubdistrictAvgAggregateOutputType | null
    _sum: SubdistrictSumAggregateOutputType | null
    _min: SubdistrictMinAggregateOutputType | null
    _max: SubdistrictMaxAggregateOutputType | null
  }

  type GetSubdistrictGroupByPayload<T extends SubdistrictGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubdistrictGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubdistrictGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubdistrictGroupByOutputType[P]>
            : GetScalarType<T[P], SubdistrictGroupByOutputType[P]>
        }
      >
    >


  export type SubdistrictSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    id_city?: boolean
    created_at?: boolean
    update_at?: boolean
    rel_merchant?: boolean | Subdistrict$rel_merchantArgs<ExtArgs>
    _count?: boolean | SubdistrictCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subdistrict"]>



  export type SubdistrictSelectScalar = {
    id?: boolean
    name?: boolean
    id_city?: boolean
    created_at?: boolean
    update_at?: boolean
  }

  export type SubdistrictOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "id_city" | "created_at" | "update_at", ExtArgs["result"]["subdistrict"]>
  export type SubdistrictInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rel_merchant?: boolean | Subdistrict$rel_merchantArgs<ExtArgs>
    _count?: boolean | SubdistrictCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $SubdistrictPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Subdistrict"
    objects: {
      rel_merchant: Prisma.$MerchantPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      id_city: number
      created_at: Date
      update_at: Date | null
    }, ExtArgs["result"]["subdistrict"]>
    composites: {}
  }

  type SubdistrictGetPayload<S extends boolean | null | undefined | SubdistrictDefaultArgs> = $Result.GetResult<Prisma.$SubdistrictPayload, S>

  type SubdistrictCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubdistrictFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubdistrictCountAggregateInputType | true
    }

  export interface SubdistrictDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subdistrict'], meta: { name: 'Subdistrict' } }
    /**
     * Find zero or one Subdistrict that matches the filter.
     * @param {SubdistrictFindUniqueArgs} args - Arguments to find a Subdistrict
     * @example
     * // Get one Subdistrict
     * const subdistrict = await prisma.subdistrict.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubdistrictFindUniqueArgs>(args: SelectSubset<T, SubdistrictFindUniqueArgs<ExtArgs>>): Prisma__SubdistrictClient<$Result.GetResult<Prisma.$SubdistrictPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Subdistrict that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubdistrictFindUniqueOrThrowArgs} args - Arguments to find a Subdistrict
     * @example
     * // Get one Subdistrict
     * const subdistrict = await prisma.subdistrict.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubdistrictFindUniqueOrThrowArgs>(args: SelectSubset<T, SubdistrictFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubdistrictClient<$Result.GetResult<Prisma.$SubdistrictPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subdistrict that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubdistrictFindFirstArgs} args - Arguments to find a Subdistrict
     * @example
     * // Get one Subdistrict
     * const subdistrict = await prisma.subdistrict.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubdistrictFindFirstArgs>(args?: SelectSubset<T, SubdistrictFindFirstArgs<ExtArgs>>): Prisma__SubdistrictClient<$Result.GetResult<Prisma.$SubdistrictPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subdistrict that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubdistrictFindFirstOrThrowArgs} args - Arguments to find a Subdistrict
     * @example
     * // Get one Subdistrict
     * const subdistrict = await prisma.subdistrict.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubdistrictFindFirstOrThrowArgs>(args?: SelectSubset<T, SubdistrictFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubdistrictClient<$Result.GetResult<Prisma.$SubdistrictPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Subdistricts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubdistrictFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subdistricts
     * const subdistricts = await prisma.subdistrict.findMany()
     * 
     * // Get first 10 Subdistricts
     * const subdistricts = await prisma.subdistrict.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subdistrictWithIdOnly = await prisma.subdistrict.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubdistrictFindManyArgs>(args?: SelectSubset<T, SubdistrictFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubdistrictPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Subdistrict.
     * @param {SubdistrictCreateArgs} args - Arguments to create a Subdistrict.
     * @example
     * // Create one Subdistrict
     * const Subdistrict = await prisma.subdistrict.create({
     *   data: {
     *     // ... data to create a Subdistrict
     *   }
     * })
     * 
     */
    create<T extends SubdistrictCreateArgs>(args: SelectSubset<T, SubdistrictCreateArgs<ExtArgs>>): Prisma__SubdistrictClient<$Result.GetResult<Prisma.$SubdistrictPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Subdistricts.
     * @param {SubdistrictCreateManyArgs} args - Arguments to create many Subdistricts.
     * @example
     * // Create many Subdistricts
     * const subdistrict = await prisma.subdistrict.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubdistrictCreateManyArgs>(args?: SelectSubset<T, SubdistrictCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Subdistrict.
     * @param {SubdistrictDeleteArgs} args - Arguments to delete one Subdistrict.
     * @example
     * // Delete one Subdistrict
     * const Subdistrict = await prisma.subdistrict.delete({
     *   where: {
     *     // ... filter to delete one Subdistrict
     *   }
     * })
     * 
     */
    delete<T extends SubdistrictDeleteArgs>(args: SelectSubset<T, SubdistrictDeleteArgs<ExtArgs>>): Prisma__SubdistrictClient<$Result.GetResult<Prisma.$SubdistrictPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Subdistrict.
     * @param {SubdistrictUpdateArgs} args - Arguments to update one Subdistrict.
     * @example
     * // Update one Subdistrict
     * const subdistrict = await prisma.subdistrict.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubdistrictUpdateArgs>(args: SelectSubset<T, SubdistrictUpdateArgs<ExtArgs>>): Prisma__SubdistrictClient<$Result.GetResult<Prisma.$SubdistrictPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Subdistricts.
     * @param {SubdistrictDeleteManyArgs} args - Arguments to filter Subdistricts to delete.
     * @example
     * // Delete a few Subdistricts
     * const { count } = await prisma.subdistrict.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubdistrictDeleteManyArgs>(args?: SelectSubset<T, SubdistrictDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subdistricts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubdistrictUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subdistricts
     * const subdistrict = await prisma.subdistrict.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubdistrictUpdateManyArgs>(args: SelectSubset<T, SubdistrictUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Subdistrict.
     * @param {SubdistrictUpsertArgs} args - Arguments to update or create a Subdistrict.
     * @example
     * // Update or create a Subdistrict
     * const subdistrict = await prisma.subdistrict.upsert({
     *   create: {
     *     // ... data to create a Subdistrict
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subdistrict we want to update
     *   }
     * })
     */
    upsert<T extends SubdistrictUpsertArgs>(args: SelectSubset<T, SubdistrictUpsertArgs<ExtArgs>>): Prisma__SubdistrictClient<$Result.GetResult<Prisma.$SubdistrictPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Subdistricts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubdistrictCountArgs} args - Arguments to filter Subdistricts to count.
     * @example
     * // Count the number of Subdistricts
     * const count = await prisma.subdistrict.count({
     *   where: {
     *     // ... the filter for the Subdistricts we want to count
     *   }
     * })
    **/
    count<T extends SubdistrictCountArgs>(
      args?: Subset<T, SubdistrictCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubdistrictCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subdistrict.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubdistrictAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubdistrictAggregateArgs>(args: Subset<T, SubdistrictAggregateArgs>): Prisma.PrismaPromise<GetSubdistrictAggregateType<T>>

    /**
     * Group by Subdistrict.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubdistrictGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubdistrictGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubdistrictGroupByArgs['orderBy'] }
        : { orderBy?: SubdistrictGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubdistrictGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubdistrictGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Subdistrict model
   */
  readonly fields: SubdistrictFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subdistrict.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubdistrictClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rel_merchant<T extends Subdistrict$rel_merchantArgs<ExtArgs> = {}>(args?: Subset<T, Subdistrict$rel_merchantArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Subdistrict model
   */
  interface SubdistrictFieldRefs {
    readonly id: FieldRef<"Subdistrict", 'Int'>
    readonly name: FieldRef<"Subdistrict", 'String'>
    readonly id_city: FieldRef<"Subdistrict", 'Int'>
    readonly created_at: FieldRef<"Subdistrict", 'DateTime'>
    readonly update_at: FieldRef<"Subdistrict", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Subdistrict findUnique
   */
  export type SubdistrictFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subdistrict
     */
    select?: SubdistrictSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subdistrict
     */
    omit?: SubdistrictOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubdistrictInclude<ExtArgs> | null
    /**
     * Filter, which Subdistrict to fetch.
     */
    where: SubdistrictWhereUniqueInput
  }

  /**
   * Subdistrict findUniqueOrThrow
   */
  export type SubdistrictFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subdistrict
     */
    select?: SubdistrictSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subdistrict
     */
    omit?: SubdistrictOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubdistrictInclude<ExtArgs> | null
    /**
     * Filter, which Subdistrict to fetch.
     */
    where: SubdistrictWhereUniqueInput
  }

  /**
   * Subdistrict findFirst
   */
  export type SubdistrictFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subdistrict
     */
    select?: SubdistrictSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subdistrict
     */
    omit?: SubdistrictOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubdistrictInclude<ExtArgs> | null
    /**
     * Filter, which Subdistrict to fetch.
     */
    where?: SubdistrictWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subdistricts to fetch.
     */
    orderBy?: SubdistrictOrderByWithRelationInput | SubdistrictOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subdistricts.
     */
    cursor?: SubdistrictWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subdistricts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subdistricts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subdistricts.
     */
    distinct?: SubdistrictScalarFieldEnum | SubdistrictScalarFieldEnum[]
  }

  /**
   * Subdistrict findFirstOrThrow
   */
  export type SubdistrictFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subdistrict
     */
    select?: SubdistrictSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subdistrict
     */
    omit?: SubdistrictOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubdistrictInclude<ExtArgs> | null
    /**
     * Filter, which Subdistrict to fetch.
     */
    where?: SubdistrictWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subdistricts to fetch.
     */
    orderBy?: SubdistrictOrderByWithRelationInput | SubdistrictOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subdistricts.
     */
    cursor?: SubdistrictWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subdistricts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subdistricts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subdistricts.
     */
    distinct?: SubdistrictScalarFieldEnum | SubdistrictScalarFieldEnum[]
  }

  /**
   * Subdistrict findMany
   */
  export type SubdistrictFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subdistrict
     */
    select?: SubdistrictSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subdistrict
     */
    omit?: SubdistrictOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubdistrictInclude<ExtArgs> | null
    /**
     * Filter, which Subdistricts to fetch.
     */
    where?: SubdistrictWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subdistricts to fetch.
     */
    orderBy?: SubdistrictOrderByWithRelationInput | SubdistrictOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subdistricts.
     */
    cursor?: SubdistrictWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subdistricts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subdistricts.
     */
    skip?: number
    distinct?: SubdistrictScalarFieldEnum | SubdistrictScalarFieldEnum[]
  }

  /**
   * Subdistrict create
   */
  export type SubdistrictCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subdistrict
     */
    select?: SubdistrictSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subdistrict
     */
    omit?: SubdistrictOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubdistrictInclude<ExtArgs> | null
    /**
     * The data needed to create a Subdistrict.
     */
    data: XOR<SubdistrictCreateInput, SubdistrictUncheckedCreateInput>
  }

  /**
   * Subdistrict createMany
   */
  export type SubdistrictCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Subdistricts.
     */
    data: SubdistrictCreateManyInput | SubdistrictCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Subdistrict update
   */
  export type SubdistrictUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subdistrict
     */
    select?: SubdistrictSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subdistrict
     */
    omit?: SubdistrictOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubdistrictInclude<ExtArgs> | null
    /**
     * The data needed to update a Subdistrict.
     */
    data: XOR<SubdistrictUpdateInput, SubdistrictUncheckedUpdateInput>
    /**
     * Choose, which Subdistrict to update.
     */
    where: SubdistrictWhereUniqueInput
  }

  /**
   * Subdistrict updateMany
   */
  export type SubdistrictUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Subdistricts.
     */
    data: XOR<SubdistrictUpdateManyMutationInput, SubdistrictUncheckedUpdateManyInput>
    /**
     * Filter which Subdistricts to update
     */
    where?: SubdistrictWhereInput
    /**
     * Limit how many Subdistricts to update.
     */
    limit?: number
  }

  /**
   * Subdistrict upsert
   */
  export type SubdistrictUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subdistrict
     */
    select?: SubdistrictSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subdistrict
     */
    omit?: SubdistrictOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubdistrictInclude<ExtArgs> | null
    /**
     * The filter to search for the Subdistrict to update in case it exists.
     */
    where: SubdistrictWhereUniqueInput
    /**
     * In case the Subdistrict found by the `where` argument doesn't exist, create a new Subdistrict with this data.
     */
    create: XOR<SubdistrictCreateInput, SubdistrictUncheckedCreateInput>
    /**
     * In case the Subdistrict was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubdistrictUpdateInput, SubdistrictUncheckedUpdateInput>
  }

  /**
   * Subdistrict delete
   */
  export type SubdistrictDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subdistrict
     */
    select?: SubdistrictSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subdistrict
     */
    omit?: SubdistrictOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubdistrictInclude<ExtArgs> | null
    /**
     * Filter which Subdistrict to delete.
     */
    where: SubdistrictWhereUniqueInput
  }

  /**
   * Subdistrict deleteMany
   */
  export type SubdistrictDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subdistricts to delete
     */
    where?: SubdistrictWhereInput
    /**
     * Limit how many Subdistricts to delete.
     */
    limit?: number
  }

  /**
   * Subdistrict.rel_merchant
   */
  export type Subdistrict$rel_merchantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    where?: MerchantWhereInput
    orderBy?: MerchantOrderByWithRelationInput | MerchantOrderByWithRelationInput[]
    cursor?: MerchantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MerchantScalarFieldEnum | MerchantScalarFieldEnum[]
  }

  /**
   * Subdistrict without action
   */
  export type SubdistrictDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subdistrict
     */
    select?: SubdistrictSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subdistrict
     */
    omit?: SubdistrictOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubdistrictInclude<ExtArgs> | null
  }


  /**
   * Model City
   */

  export type AggregateCity = {
    _count: CityCountAggregateOutputType | null
    _avg: CityAvgAggregateOutputType | null
    _sum: CitySumAggregateOutputType | null
    _min: CityMinAggregateOutputType | null
    _max: CityMaxAggregateOutputType | null
  }

  export type CityAvgAggregateOutputType = {
    id: number | null
    id_prov: number | null
  }

  export type CitySumAggregateOutputType = {
    id: number | null
    id_prov: number | null
  }

  export type CityMinAggregateOutputType = {
    id: number | null
    name: string | null
    id_prov: number | null
    created_at: Date | null
    update_at: Date | null
  }

  export type CityMaxAggregateOutputType = {
    id: number | null
    name: string | null
    id_prov: number | null
    created_at: Date | null
    update_at: Date | null
  }

  export type CityCountAggregateOutputType = {
    id: number
    name: number
    id_prov: number
    created_at: number
    update_at: number
    _all: number
  }


  export type CityAvgAggregateInputType = {
    id?: true
    id_prov?: true
  }

  export type CitySumAggregateInputType = {
    id?: true
    id_prov?: true
  }

  export type CityMinAggregateInputType = {
    id?: true
    name?: true
    id_prov?: true
    created_at?: true
    update_at?: true
  }

  export type CityMaxAggregateInputType = {
    id?: true
    name?: true
    id_prov?: true
    created_at?: true
    update_at?: true
  }

  export type CityCountAggregateInputType = {
    id?: true
    name?: true
    id_prov?: true
    created_at?: true
    update_at?: true
    _all?: true
  }

  export type CityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which City to aggregate.
     */
    where?: CityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cities to fetch.
     */
    orderBy?: CityOrderByWithRelationInput | CityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cities
    **/
    _count?: true | CityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CityMaxAggregateInputType
  }

  export type GetCityAggregateType<T extends CityAggregateArgs> = {
        [P in keyof T & keyof AggregateCity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCity[P]>
      : GetScalarType<T[P], AggregateCity[P]>
  }




  export type CityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CityWhereInput
    orderBy?: CityOrderByWithAggregationInput | CityOrderByWithAggregationInput[]
    by: CityScalarFieldEnum[] | CityScalarFieldEnum
    having?: CityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CityCountAggregateInputType | true
    _avg?: CityAvgAggregateInputType
    _sum?: CitySumAggregateInputType
    _min?: CityMinAggregateInputType
    _max?: CityMaxAggregateInputType
  }

  export type CityGroupByOutputType = {
    id: number
    name: string
    id_prov: number
    created_at: Date
    update_at: Date | null
    _count: CityCountAggregateOutputType | null
    _avg: CityAvgAggregateOutputType | null
    _sum: CitySumAggregateOutputType | null
    _min: CityMinAggregateOutputType | null
    _max: CityMaxAggregateOutputType | null
  }

  type GetCityGroupByPayload<T extends CityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CityGroupByOutputType[P]>
            : GetScalarType<T[P], CityGroupByOutputType[P]>
        }
      >
    >


  export type CitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    id_prov?: boolean
    created_at?: boolean
    update_at?: boolean
    rel_merchant?: boolean | City$rel_merchantArgs<ExtArgs>
    _count?: boolean | CityCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["city"]>



  export type CitySelectScalar = {
    id?: boolean
    name?: boolean
    id_prov?: boolean
    created_at?: boolean
    update_at?: boolean
  }

  export type CityOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "id_prov" | "created_at" | "update_at", ExtArgs["result"]["city"]>
  export type CityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rel_merchant?: boolean | City$rel_merchantArgs<ExtArgs>
    _count?: boolean | CityCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "City"
    objects: {
      rel_merchant: Prisma.$MerchantPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      id_prov: number
      created_at: Date
      update_at: Date | null
    }, ExtArgs["result"]["city"]>
    composites: {}
  }

  type CityGetPayload<S extends boolean | null | undefined | CityDefaultArgs> = $Result.GetResult<Prisma.$CityPayload, S>

  type CityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CityCountAggregateInputType | true
    }

  export interface CityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['City'], meta: { name: 'City' } }
    /**
     * Find zero or one City that matches the filter.
     * @param {CityFindUniqueArgs} args - Arguments to find a City
     * @example
     * // Get one City
     * const city = await prisma.city.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CityFindUniqueArgs>(args: SelectSubset<T, CityFindUniqueArgs<ExtArgs>>): Prisma__CityClient<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one City that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CityFindUniqueOrThrowArgs} args - Arguments to find a City
     * @example
     * // Get one City
     * const city = await prisma.city.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CityFindUniqueOrThrowArgs>(args: SelectSubset<T, CityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CityClient<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first City that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CityFindFirstArgs} args - Arguments to find a City
     * @example
     * // Get one City
     * const city = await prisma.city.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CityFindFirstArgs>(args?: SelectSubset<T, CityFindFirstArgs<ExtArgs>>): Prisma__CityClient<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first City that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CityFindFirstOrThrowArgs} args - Arguments to find a City
     * @example
     * // Get one City
     * const city = await prisma.city.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CityFindFirstOrThrowArgs>(args?: SelectSubset<T, CityFindFirstOrThrowArgs<ExtArgs>>): Prisma__CityClient<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Cities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cities
     * const cities = await prisma.city.findMany()
     * 
     * // Get first 10 Cities
     * const cities = await prisma.city.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cityWithIdOnly = await prisma.city.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CityFindManyArgs>(args?: SelectSubset<T, CityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a City.
     * @param {CityCreateArgs} args - Arguments to create a City.
     * @example
     * // Create one City
     * const City = await prisma.city.create({
     *   data: {
     *     // ... data to create a City
     *   }
     * })
     * 
     */
    create<T extends CityCreateArgs>(args: SelectSubset<T, CityCreateArgs<ExtArgs>>): Prisma__CityClient<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Cities.
     * @param {CityCreateManyArgs} args - Arguments to create many Cities.
     * @example
     * // Create many Cities
     * const city = await prisma.city.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CityCreateManyArgs>(args?: SelectSubset<T, CityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a City.
     * @param {CityDeleteArgs} args - Arguments to delete one City.
     * @example
     * // Delete one City
     * const City = await prisma.city.delete({
     *   where: {
     *     // ... filter to delete one City
     *   }
     * })
     * 
     */
    delete<T extends CityDeleteArgs>(args: SelectSubset<T, CityDeleteArgs<ExtArgs>>): Prisma__CityClient<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one City.
     * @param {CityUpdateArgs} args - Arguments to update one City.
     * @example
     * // Update one City
     * const city = await prisma.city.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CityUpdateArgs>(args: SelectSubset<T, CityUpdateArgs<ExtArgs>>): Prisma__CityClient<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Cities.
     * @param {CityDeleteManyArgs} args - Arguments to filter Cities to delete.
     * @example
     * // Delete a few Cities
     * const { count } = await prisma.city.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CityDeleteManyArgs>(args?: SelectSubset<T, CityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cities
     * const city = await prisma.city.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CityUpdateManyArgs>(args: SelectSubset<T, CityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one City.
     * @param {CityUpsertArgs} args - Arguments to update or create a City.
     * @example
     * // Update or create a City
     * const city = await prisma.city.upsert({
     *   create: {
     *     // ... data to create a City
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the City we want to update
     *   }
     * })
     */
    upsert<T extends CityUpsertArgs>(args: SelectSubset<T, CityUpsertArgs<ExtArgs>>): Prisma__CityClient<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Cities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CityCountArgs} args - Arguments to filter Cities to count.
     * @example
     * // Count the number of Cities
     * const count = await prisma.city.count({
     *   where: {
     *     // ... the filter for the Cities we want to count
     *   }
     * })
    **/
    count<T extends CityCountArgs>(
      args?: Subset<T, CityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a City.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CityAggregateArgs>(args: Subset<T, CityAggregateArgs>): Prisma.PrismaPromise<GetCityAggregateType<T>>

    /**
     * Group by City.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CityGroupByArgs['orderBy'] }
        : { orderBy?: CityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the City model
   */
  readonly fields: CityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for City.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rel_merchant<T extends City$rel_merchantArgs<ExtArgs> = {}>(args?: Subset<T, City$rel_merchantArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the City model
   */
  interface CityFieldRefs {
    readonly id: FieldRef<"City", 'Int'>
    readonly name: FieldRef<"City", 'String'>
    readonly id_prov: FieldRef<"City", 'Int'>
    readonly created_at: FieldRef<"City", 'DateTime'>
    readonly update_at: FieldRef<"City", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * City findUnique
   */
  export type CityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the City
     */
    omit?: CityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
    /**
     * Filter, which City to fetch.
     */
    where: CityWhereUniqueInput
  }

  /**
   * City findUniqueOrThrow
   */
  export type CityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the City
     */
    omit?: CityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
    /**
     * Filter, which City to fetch.
     */
    where: CityWhereUniqueInput
  }

  /**
   * City findFirst
   */
  export type CityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the City
     */
    omit?: CityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
    /**
     * Filter, which City to fetch.
     */
    where?: CityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cities to fetch.
     */
    orderBy?: CityOrderByWithRelationInput | CityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cities.
     */
    cursor?: CityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cities.
     */
    distinct?: CityScalarFieldEnum | CityScalarFieldEnum[]
  }

  /**
   * City findFirstOrThrow
   */
  export type CityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the City
     */
    omit?: CityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
    /**
     * Filter, which City to fetch.
     */
    where?: CityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cities to fetch.
     */
    orderBy?: CityOrderByWithRelationInput | CityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cities.
     */
    cursor?: CityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cities.
     */
    distinct?: CityScalarFieldEnum | CityScalarFieldEnum[]
  }

  /**
   * City findMany
   */
  export type CityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the City
     */
    omit?: CityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
    /**
     * Filter, which Cities to fetch.
     */
    where?: CityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cities to fetch.
     */
    orderBy?: CityOrderByWithRelationInput | CityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cities.
     */
    cursor?: CityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cities.
     */
    skip?: number
    distinct?: CityScalarFieldEnum | CityScalarFieldEnum[]
  }

  /**
   * City create
   */
  export type CityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the City
     */
    omit?: CityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
    /**
     * The data needed to create a City.
     */
    data: XOR<CityCreateInput, CityUncheckedCreateInput>
  }

  /**
   * City createMany
   */
  export type CityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Cities.
     */
    data: CityCreateManyInput | CityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * City update
   */
  export type CityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the City
     */
    omit?: CityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
    /**
     * The data needed to update a City.
     */
    data: XOR<CityUpdateInput, CityUncheckedUpdateInput>
    /**
     * Choose, which City to update.
     */
    where: CityWhereUniqueInput
  }

  /**
   * City updateMany
   */
  export type CityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Cities.
     */
    data: XOR<CityUpdateManyMutationInput, CityUncheckedUpdateManyInput>
    /**
     * Filter which Cities to update
     */
    where?: CityWhereInput
    /**
     * Limit how many Cities to update.
     */
    limit?: number
  }

  /**
   * City upsert
   */
  export type CityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the City
     */
    omit?: CityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
    /**
     * The filter to search for the City to update in case it exists.
     */
    where: CityWhereUniqueInput
    /**
     * In case the City found by the `where` argument doesn't exist, create a new City with this data.
     */
    create: XOR<CityCreateInput, CityUncheckedCreateInput>
    /**
     * In case the City was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CityUpdateInput, CityUncheckedUpdateInput>
  }

  /**
   * City delete
   */
  export type CityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the City
     */
    omit?: CityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
    /**
     * Filter which City to delete.
     */
    where: CityWhereUniqueInput
  }

  /**
   * City deleteMany
   */
  export type CityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cities to delete
     */
    where?: CityWhereInput
    /**
     * Limit how many Cities to delete.
     */
    limit?: number
  }

  /**
   * City.rel_merchant
   */
  export type City$rel_merchantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    where?: MerchantWhereInput
    orderBy?: MerchantOrderByWithRelationInput | MerchantOrderByWithRelationInput[]
    cursor?: MerchantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MerchantScalarFieldEnum | MerchantScalarFieldEnum[]
  }

  /**
   * City without action
   */
  export type CityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the City
     */
    omit?: CityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
  }


  /**
   * Model Province
   */

  export type AggregateProvince = {
    _count: ProvinceCountAggregateOutputType | null
    _avg: ProvinceAvgAggregateOutputType | null
    _sum: ProvinceSumAggregateOutputType | null
    _min: ProvinceMinAggregateOutputType | null
    _max: ProvinceMaxAggregateOutputType | null
  }

  export type ProvinceAvgAggregateOutputType = {
    id: number | null
  }

  export type ProvinceSumAggregateOutputType = {
    id: number | null
  }

  export type ProvinceMinAggregateOutputType = {
    id: number | null
    name: string | null
    created_at: Date | null
    update_at: Date | null
  }

  export type ProvinceMaxAggregateOutputType = {
    id: number | null
    name: string | null
    created_at: Date | null
    update_at: Date | null
  }

  export type ProvinceCountAggregateOutputType = {
    id: number
    name: number
    created_at: number
    update_at: number
    _all: number
  }


  export type ProvinceAvgAggregateInputType = {
    id?: true
  }

  export type ProvinceSumAggregateInputType = {
    id?: true
  }

  export type ProvinceMinAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    update_at?: true
  }

  export type ProvinceMaxAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    update_at?: true
  }

  export type ProvinceCountAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    update_at?: true
    _all?: true
  }

  export type ProvinceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Province to aggregate.
     */
    where?: ProvinceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Provinces to fetch.
     */
    orderBy?: ProvinceOrderByWithRelationInput | ProvinceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProvinceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Provinces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Provinces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Provinces
    **/
    _count?: true | ProvinceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProvinceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProvinceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProvinceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProvinceMaxAggregateInputType
  }

  export type GetProvinceAggregateType<T extends ProvinceAggregateArgs> = {
        [P in keyof T & keyof AggregateProvince]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProvince[P]>
      : GetScalarType<T[P], AggregateProvince[P]>
  }




  export type ProvinceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProvinceWhereInput
    orderBy?: ProvinceOrderByWithAggregationInput | ProvinceOrderByWithAggregationInput[]
    by: ProvinceScalarFieldEnum[] | ProvinceScalarFieldEnum
    having?: ProvinceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProvinceCountAggregateInputType | true
    _avg?: ProvinceAvgAggregateInputType
    _sum?: ProvinceSumAggregateInputType
    _min?: ProvinceMinAggregateInputType
    _max?: ProvinceMaxAggregateInputType
  }

  export type ProvinceGroupByOutputType = {
    id: number
    name: string
    created_at: Date
    update_at: Date | null
    _count: ProvinceCountAggregateOutputType | null
    _avg: ProvinceAvgAggregateOutputType | null
    _sum: ProvinceSumAggregateOutputType | null
    _min: ProvinceMinAggregateOutputType | null
    _max: ProvinceMaxAggregateOutputType | null
  }

  type GetProvinceGroupByPayload<T extends ProvinceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProvinceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProvinceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProvinceGroupByOutputType[P]>
            : GetScalarType<T[P], ProvinceGroupByOutputType[P]>
        }
      >
    >


  export type ProvinceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    created_at?: boolean
    update_at?: boolean
    rel_merchant?: boolean | Province$rel_merchantArgs<ExtArgs>
    _count?: boolean | ProvinceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["province"]>



  export type ProvinceSelectScalar = {
    id?: boolean
    name?: boolean
    created_at?: boolean
    update_at?: boolean
  }

  export type ProvinceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "created_at" | "update_at", ExtArgs["result"]["province"]>
  export type ProvinceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rel_merchant?: boolean | Province$rel_merchantArgs<ExtArgs>
    _count?: boolean | ProvinceCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ProvincePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Province"
    objects: {
      rel_merchant: Prisma.$MerchantPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      created_at: Date
      update_at: Date | null
    }, ExtArgs["result"]["province"]>
    composites: {}
  }

  type ProvinceGetPayload<S extends boolean | null | undefined | ProvinceDefaultArgs> = $Result.GetResult<Prisma.$ProvincePayload, S>

  type ProvinceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProvinceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProvinceCountAggregateInputType | true
    }

  export interface ProvinceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Province'], meta: { name: 'Province' } }
    /**
     * Find zero or one Province that matches the filter.
     * @param {ProvinceFindUniqueArgs} args - Arguments to find a Province
     * @example
     * // Get one Province
     * const province = await prisma.province.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProvinceFindUniqueArgs>(args: SelectSubset<T, ProvinceFindUniqueArgs<ExtArgs>>): Prisma__ProvinceClient<$Result.GetResult<Prisma.$ProvincePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Province that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProvinceFindUniqueOrThrowArgs} args - Arguments to find a Province
     * @example
     * // Get one Province
     * const province = await prisma.province.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProvinceFindUniqueOrThrowArgs>(args: SelectSubset<T, ProvinceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProvinceClient<$Result.GetResult<Prisma.$ProvincePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Province that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProvinceFindFirstArgs} args - Arguments to find a Province
     * @example
     * // Get one Province
     * const province = await prisma.province.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProvinceFindFirstArgs>(args?: SelectSubset<T, ProvinceFindFirstArgs<ExtArgs>>): Prisma__ProvinceClient<$Result.GetResult<Prisma.$ProvincePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Province that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProvinceFindFirstOrThrowArgs} args - Arguments to find a Province
     * @example
     * // Get one Province
     * const province = await prisma.province.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProvinceFindFirstOrThrowArgs>(args?: SelectSubset<T, ProvinceFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProvinceClient<$Result.GetResult<Prisma.$ProvincePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Provinces that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProvinceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Provinces
     * const provinces = await prisma.province.findMany()
     * 
     * // Get first 10 Provinces
     * const provinces = await prisma.province.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const provinceWithIdOnly = await prisma.province.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProvinceFindManyArgs>(args?: SelectSubset<T, ProvinceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProvincePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Province.
     * @param {ProvinceCreateArgs} args - Arguments to create a Province.
     * @example
     * // Create one Province
     * const Province = await prisma.province.create({
     *   data: {
     *     // ... data to create a Province
     *   }
     * })
     * 
     */
    create<T extends ProvinceCreateArgs>(args: SelectSubset<T, ProvinceCreateArgs<ExtArgs>>): Prisma__ProvinceClient<$Result.GetResult<Prisma.$ProvincePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Provinces.
     * @param {ProvinceCreateManyArgs} args - Arguments to create many Provinces.
     * @example
     * // Create many Provinces
     * const province = await prisma.province.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProvinceCreateManyArgs>(args?: SelectSubset<T, ProvinceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Province.
     * @param {ProvinceDeleteArgs} args - Arguments to delete one Province.
     * @example
     * // Delete one Province
     * const Province = await prisma.province.delete({
     *   where: {
     *     // ... filter to delete one Province
     *   }
     * })
     * 
     */
    delete<T extends ProvinceDeleteArgs>(args: SelectSubset<T, ProvinceDeleteArgs<ExtArgs>>): Prisma__ProvinceClient<$Result.GetResult<Prisma.$ProvincePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Province.
     * @param {ProvinceUpdateArgs} args - Arguments to update one Province.
     * @example
     * // Update one Province
     * const province = await prisma.province.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProvinceUpdateArgs>(args: SelectSubset<T, ProvinceUpdateArgs<ExtArgs>>): Prisma__ProvinceClient<$Result.GetResult<Prisma.$ProvincePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Provinces.
     * @param {ProvinceDeleteManyArgs} args - Arguments to filter Provinces to delete.
     * @example
     * // Delete a few Provinces
     * const { count } = await prisma.province.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProvinceDeleteManyArgs>(args?: SelectSubset<T, ProvinceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Provinces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProvinceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Provinces
     * const province = await prisma.province.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProvinceUpdateManyArgs>(args: SelectSubset<T, ProvinceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Province.
     * @param {ProvinceUpsertArgs} args - Arguments to update or create a Province.
     * @example
     * // Update or create a Province
     * const province = await prisma.province.upsert({
     *   create: {
     *     // ... data to create a Province
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Province we want to update
     *   }
     * })
     */
    upsert<T extends ProvinceUpsertArgs>(args: SelectSubset<T, ProvinceUpsertArgs<ExtArgs>>): Prisma__ProvinceClient<$Result.GetResult<Prisma.$ProvincePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Provinces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProvinceCountArgs} args - Arguments to filter Provinces to count.
     * @example
     * // Count the number of Provinces
     * const count = await prisma.province.count({
     *   where: {
     *     // ... the filter for the Provinces we want to count
     *   }
     * })
    **/
    count<T extends ProvinceCountArgs>(
      args?: Subset<T, ProvinceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProvinceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Province.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProvinceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProvinceAggregateArgs>(args: Subset<T, ProvinceAggregateArgs>): Prisma.PrismaPromise<GetProvinceAggregateType<T>>

    /**
     * Group by Province.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProvinceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProvinceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProvinceGroupByArgs['orderBy'] }
        : { orderBy?: ProvinceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProvinceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProvinceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Province model
   */
  readonly fields: ProvinceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Province.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProvinceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rel_merchant<T extends Province$rel_merchantArgs<ExtArgs> = {}>(args?: Subset<T, Province$rel_merchantArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Province model
   */
  interface ProvinceFieldRefs {
    readonly id: FieldRef<"Province", 'Int'>
    readonly name: FieldRef<"Province", 'String'>
    readonly created_at: FieldRef<"Province", 'DateTime'>
    readonly update_at: FieldRef<"Province", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Province findUnique
   */
  export type ProvinceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Province
     */
    select?: ProvinceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Province
     */
    omit?: ProvinceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProvinceInclude<ExtArgs> | null
    /**
     * Filter, which Province to fetch.
     */
    where: ProvinceWhereUniqueInput
  }

  /**
   * Province findUniqueOrThrow
   */
  export type ProvinceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Province
     */
    select?: ProvinceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Province
     */
    omit?: ProvinceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProvinceInclude<ExtArgs> | null
    /**
     * Filter, which Province to fetch.
     */
    where: ProvinceWhereUniqueInput
  }

  /**
   * Province findFirst
   */
  export type ProvinceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Province
     */
    select?: ProvinceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Province
     */
    omit?: ProvinceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProvinceInclude<ExtArgs> | null
    /**
     * Filter, which Province to fetch.
     */
    where?: ProvinceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Provinces to fetch.
     */
    orderBy?: ProvinceOrderByWithRelationInput | ProvinceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Provinces.
     */
    cursor?: ProvinceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Provinces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Provinces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Provinces.
     */
    distinct?: ProvinceScalarFieldEnum | ProvinceScalarFieldEnum[]
  }

  /**
   * Province findFirstOrThrow
   */
  export type ProvinceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Province
     */
    select?: ProvinceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Province
     */
    omit?: ProvinceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProvinceInclude<ExtArgs> | null
    /**
     * Filter, which Province to fetch.
     */
    where?: ProvinceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Provinces to fetch.
     */
    orderBy?: ProvinceOrderByWithRelationInput | ProvinceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Provinces.
     */
    cursor?: ProvinceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Provinces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Provinces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Provinces.
     */
    distinct?: ProvinceScalarFieldEnum | ProvinceScalarFieldEnum[]
  }

  /**
   * Province findMany
   */
  export type ProvinceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Province
     */
    select?: ProvinceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Province
     */
    omit?: ProvinceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProvinceInclude<ExtArgs> | null
    /**
     * Filter, which Provinces to fetch.
     */
    where?: ProvinceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Provinces to fetch.
     */
    orderBy?: ProvinceOrderByWithRelationInput | ProvinceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Provinces.
     */
    cursor?: ProvinceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Provinces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Provinces.
     */
    skip?: number
    distinct?: ProvinceScalarFieldEnum | ProvinceScalarFieldEnum[]
  }

  /**
   * Province create
   */
  export type ProvinceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Province
     */
    select?: ProvinceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Province
     */
    omit?: ProvinceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProvinceInclude<ExtArgs> | null
    /**
     * The data needed to create a Province.
     */
    data: XOR<ProvinceCreateInput, ProvinceUncheckedCreateInput>
  }

  /**
   * Province createMany
   */
  export type ProvinceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Provinces.
     */
    data: ProvinceCreateManyInput | ProvinceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Province update
   */
  export type ProvinceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Province
     */
    select?: ProvinceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Province
     */
    omit?: ProvinceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProvinceInclude<ExtArgs> | null
    /**
     * The data needed to update a Province.
     */
    data: XOR<ProvinceUpdateInput, ProvinceUncheckedUpdateInput>
    /**
     * Choose, which Province to update.
     */
    where: ProvinceWhereUniqueInput
  }

  /**
   * Province updateMany
   */
  export type ProvinceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Provinces.
     */
    data: XOR<ProvinceUpdateManyMutationInput, ProvinceUncheckedUpdateManyInput>
    /**
     * Filter which Provinces to update
     */
    where?: ProvinceWhereInput
    /**
     * Limit how many Provinces to update.
     */
    limit?: number
  }

  /**
   * Province upsert
   */
  export type ProvinceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Province
     */
    select?: ProvinceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Province
     */
    omit?: ProvinceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProvinceInclude<ExtArgs> | null
    /**
     * The filter to search for the Province to update in case it exists.
     */
    where: ProvinceWhereUniqueInput
    /**
     * In case the Province found by the `where` argument doesn't exist, create a new Province with this data.
     */
    create: XOR<ProvinceCreateInput, ProvinceUncheckedCreateInput>
    /**
     * In case the Province was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProvinceUpdateInput, ProvinceUncheckedUpdateInput>
  }

  /**
   * Province delete
   */
  export type ProvinceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Province
     */
    select?: ProvinceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Province
     */
    omit?: ProvinceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProvinceInclude<ExtArgs> | null
    /**
     * Filter which Province to delete.
     */
    where: ProvinceWhereUniqueInput
  }

  /**
   * Province deleteMany
   */
  export type ProvinceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Provinces to delete
     */
    where?: ProvinceWhereInput
    /**
     * Limit how many Provinces to delete.
     */
    limit?: number
  }

  /**
   * Province.rel_merchant
   */
  export type Province$rel_merchantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    where?: MerchantWhereInput
    orderBy?: MerchantOrderByWithRelationInput | MerchantOrderByWithRelationInput[]
    cursor?: MerchantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MerchantScalarFieldEnum | MerchantScalarFieldEnum[]
  }

  /**
   * Province without action
   */
  export type ProvinceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Province
     */
    select?: ProvinceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Province
     */
    omit?: ProvinceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProvinceInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id: number | null
  }

  export type CategorySumAggregateOutputType = {
    id: number | null
  }

  export type CategoryMinAggregateOutputType = {
    id: number | null
    name: string | null
    created_at: Date | null
    update_at: Date | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
    created_at: Date | null
    update_at: Date | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    created_at: number
    update_at: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id?: true
  }

  export type CategorySumAggregateInputType = {
    id?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    update_at?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    update_at?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    update_at?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: number
    name: string
    created_at: Date
    update_at: Date | null
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    created_at?: boolean
    update_at?: boolean
    rel_menu?: boolean | Category$rel_menuArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>



  export type CategorySelectScalar = {
    id?: boolean
    name?: boolean
    created_at?: boolean
    update_at?: boolean
  }

  export type CategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "created_at" | "update_at", ExtArgs["result"]["category"]>
  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rel_menu?: boolean | Category$rel_menuArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      rel_menu: Prisma.$MenuPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      created_at: Date
      update_at: Date | null
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rel_menu<T extends Category$rel_menuArgs<ExtArgs> = {}>(args?: Subset<T, Category$rel_menuArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MenuPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'Int'>
    readonly name: FieldRef<"Category", 'String'>
    readonly created_at: FieldRef<"Category", 'DateTime'>
    readonly update_at: FieldRef<"Category", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to delete.
     */
    limit?: number
  }

  /**
   * Category.rel_menu
   */
  export type Category$rel_menuArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Menu
     */
    select?: MenuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Menu
     */
    omit?: MenuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuInclude<ExtArgs> | null
    where?: MenuWhereInput
    orderBy?: MenuOrderByWithRelationInput | MenuOrderByWithRelationInput[]
    cursor?: MenuWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MenuScalarFieldEnum | MenuScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    poin: number | null
    id_status: number | null
  }

  export type UserSumAggregateOutputType = {
    poin: number | null
    id_status: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
    name: string | null
    email: string | null
    phone: string | null
    poin: number | null
    id_status: number | null
    created_at: Date | null
    update_at: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
    name: string | null
    email: string | null
    phone: string | null
    poin: number | null
    id_status: number | null
    created_at: Date | null
    update_at: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    password: number
    name: number
    email: number
    phone: number
    poin: number
    id_status: number
    created_at: number
    update_at: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    poin?: true
    id_status?: true
  }

  export type UserSumAggregateInputType = {
    poin?: true
    id_status?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
    name?: true
    email?: true
    phone?: true
    poin?: true
    id_status?: true
    created_at?: true
    update_at?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
    name?: true
    email?: true
    phone?: true
    poin?: true
    id_status?: true
    created_at?: true
    update_at?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    name?: true
    email?: true
    phone?: true
    poin?: true
    id_status?: true
    created_at?: true
    update_at?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    username: string
    password: string
    name: string
    email: string
    phone: string | null
    poin: number
    id_status: number
    created_at: Date
    update_at: Date | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    poin?: boolean
    id_status?: boolean
    created_at?: boolean
    update_at?: boolean
    rel_status?: boolean | StatusDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>



  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    password?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    poin?: boolean
    id_status?: boolean
    created_at?: boolean
    update_at?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "password" | "name" | "email" | "phone" | "poin" | "id_status" | "created_at" | "update_at", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rel_status?: boolean | StatusDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      rel_status: Prisma.$StatusPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      password: string
      name: string
      email: string
      phone: string | null
      poin: number
      id_status: number
      created_at: Date
      update_at: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rel_status<T extends StatusDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StatusDefaultArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly poin: FieldRef<"User", 'Int'>
    readonly id_status: FieldRef<"User", 'Int'>
    readonly created_at: FieldRef<"User", 'DateTime'>
    readonly update_at: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Courier
   */

  export type AggregateCourier = {
    _count: CourierCountAggregateOutputType | null
    _avg: CourierAvgAggregateOutputType | null
    _sum: CourierSumAggregateOutputType | null
    _min: CourierMinAggregateOutputType | null
    _max: CourierMaxAggregateOutputType | null
  }

  export type CourierAvgAggregateOutputType = {
    id_brand: number | null
    id_status: number | null
  }

  export type CourierSumAggregateOutputType = {
    id_brand: number | null
    id_status: number | null
  }

  export type CourierMinAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
    name: string | null
    email: string | null
    phone: string | null
    number_plate: string | null
    id_brand: number | null
    color: string | null
    is_active: boolean | null
    id_status: number | null
    created_at: Date | null
    update_at: Date | null
  }

  export type CourierMaxAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
    name: string | null
    email: string | null
    phone: string | null
    number_plate: string | null
    id_brand: number | null
    color: string | null
    is_active: boolean | null
    id_status: number | null
    created_at: Date | null
    update_at: Date | null
  }

  export type CourierCountAggregateOutputType = {
    id: number
    username: number
    password: number
    name: number
    email: number
    phone: number
    number_plate: number
    id_brand: number
    color: number
    is_active: number
    id_status: number
    created_at: number
    update_at: number
    _all: number
  }


  export type CourierAvgAggregateInputType = {
    id_brand?: true
    id_status?: true
  }

  export type CourierSumAggregateInputType = {
    id_brand?: true
    id_status?: true
  }

  export type CourierMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
    name?: true
    email?: true
    phone?: true
    number_plate?: true
    id_brand?: true
    color?: true
    is_active?: true
    id_status?: true
    created_at?: true
    update_at?: true
  }

  export type CourierMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
    name?: true
    email?: true
    phone?: true
    number_plate?: true
    id_brand?: true
    color?: true
    is_active?: true
    id_status?: true
    created_at?: true
    update_at?: true
  }

  export type CourierCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    name?: true
    email?: true
    phone?: true
    number_plate?: true
    id_brand?: true
    color?: true
    is_active?: true
    id_status?: true
    created_at?: true
    update_at?: true
    _all?: true
  }

  export type CourierAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Courier to aggregate.
     */
    where?: CourierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Couriers to fetch.
     */
    orderBy?: CourierOrderByWithRelationInput | CourierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CourierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Couriers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Couriers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Couriers
    **/
    _count?: true | CourierCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CourierAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CourierSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourierMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourierMaxAggregateInputType
  }

  export type GetCourierAggregateType<T extends CourierAggregateArgs> = {
        [P in keyof T & keyof AggregateCourier]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourier[P]>
      : GetScalarType<T[P], AggregateCourier[P]>
  }




  export type CourierGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourierWhereInput
    orderBy?: CourierOrderByWithAggregationInput | CourierOrderByWithAggregationInput[]
    by: CourierScalarFieldEnum[] | CourierScalarFieldEnum
    having?: CourierScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourierCountAggregateInputType | true
    _avg?: CourierAvgAggregateInputType
    _sum?: CourierSumAggregateInputType
    _min?: CourierMinAggregateInputType
    _max?: CourierMaxAggregateInputType
  }

  export type CourierGroupByOutputType = {
    id: string
    username: string
    password: string
    name: string
    email: string
    phone: string | null
    number_plate: string
    id_brand: number
    color: string
    is_active: boolean
    id_status: number
    created_at: Date
    update_at: Date | null
    _count: CourierCountAggregateOutputType | null
    _avg: CourierAvgAggregateOutputType | null
    _sum: CourierSumAggregateOutputType | null
    _min: CourierMinAggregateOutputType | null
    _max: CourierMaxAggregateOutputType | null
  }

  type GetCourierGroupByPayload<T extends CourierGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CourierGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourierGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourierGroupByOutputType[P]>
            : GetScalarType<T[P], CourierGroupByOutputType[P]>
        }
      >
    >


  export type CourierSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    number_plate?: boolean
    id_brand?: boolean
    color?: boolean
    is_active?: boolean
    id_status?: boolean
    created_at?: boolean
    update_at?: boolean
    rel_brand?: boolean | BrandDefaultArgs<ExtArgs>
    rel_status?: boolean | StatusDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["courier"]>



  export type CourierSelectScalar = {
    id?: boolean
    username?: boolean
    password?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    number_plate?: boolean
    id_brand?: boolean
    color?: boolean
    is_active?: boolean
    id_status?: boolean
    created_at?: boolean
    update_at?: boolean
  }

  export type CourierOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "password" | "name" | "email" | "phone" | "number_plate" | "id_brand" | "color" | "is_active" | "id_status" | "created_at" | "update_at", ExtArgs["result"]["courier"]>
  export type CourierInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rel_brand?: boolean | BrandDefaultArgs<ExtArgs>
    rel_status?: boolean | StatusDefaultArgs<ExtArgs>
  }

  export type $CourierPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Courier"
    objects: {
      rel_brand: Prisma.$BrandPayload<ExtArgs>
      rel_status: Prisma.$StatusPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      password: string
      name: string
      email: string
      phone: string | null
      number_plate: string
      id_brand: number
      color: string
      is_active: boolean
      id_status: number
      created_at: Date
      update_at: Date | null
    }, ExtArgs["result"]["courier"]>
    composites: {}
  }

  type CourierGetPayload<S extends boolean | null | undefined | CourierDefaultArgs> = $Result.GetResult<Prisma.$CourierPayload, S>

  type CourierCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CourierFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CourierCountAggregateInputType | true
    }

  export interface CourierDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Courier'], meta: { name: 'Courier' } }
    /**
     * Find zero or one Courier that matches the filter.
     * @param {CourierFindUniqueArgs} args - Arguments to find a Courier
     * @example
     * // Get one Courier
     * const courier = await prisma.courier.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CourierFindUniqueArgs>(args: SelectSubset<T, CourierFindUniqueArgs<ExtArgs>>): Prisma__CourierClient<$Result.GetResult<Prisma.$CourierPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Courier that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CourierFindUniqueOrThrowArgs} args - Arguments to find a Courier
     * @example
     * // Get one Courier
     * const courier = await prisma.courier.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CourierFindUniqueOrThrowArgs>(args: SelectSubset<T, CourierFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CourierClient<$Result.GetResult<Prisma.$CourierPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Courier that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourierFindFirstArgs} args - Arguments to find a Courier
     * @example
     * // Get one Courier
     * const courier = await prisma.courier.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CourierFindFirstArgs>(args?: SelectSubset<T, CourierFindFirstArgs<ExtArgs>>): Prisma__CourierClient<$Result.GetResult<Prisma.$CourierPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Courier that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourierFindFirstOrThrowArgs} args - Arguments to find a Courier
     * @example
     * // Get one Courier
     * const courier = await prisma.courier.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CourierFindFirstOrThrowArgs>(args?: SelectSubset<T, CourierFindFirstOrThrowArgs<ExtArgs>>): Prisma__CourierClient<$Result.GetResult<Prisma.$CourierPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Couriers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourierFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Couriers
     * const couriers = await prisma.courier.findMany()
     * 
     * // Get first 10 Couriers
     * const couriers = await prisma.courier.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const courierWithIdOnly = await prisma.courier.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CourierFindManyArgs>(args?: SelectSubset<T, CourierFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourierPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Courier.
     * @param {CourierCreateArgs} args - Arguments to create a Courier.
     * @example
     * // Create one Courier
     * const Courier = await prisma.courier.create({
     *   data: {
     *     // ... data to create a Courier
     *   }
     * })
     * 
     */
    create<T extends CourierCreateArgs>(args: SelectSubset<T, CourierCreateArgs<ExtArgs>>): Prisma__CourierClient<$Result.GetResult<Prisma.$CourierPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Couriers.
     * @param {CourierCreateManyArgs} args - Arguments to create many Couriers.
     * @example
     * // Create many Couriers
     * const courier = await prisma.courier.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CourierCreateManyArgs>(args?: SelectSubset<T, CourierCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Courier.
     * @param {CourierDeleteArgs} args - Arguments to delete one Courier.
     * @example
     * // Delete one Courier
     * const Courier = await prisma.courier.delete({
     *   where: {
     *     // ... filter to delete one Courier
     *   }
     * })
     * 
     */
    delete<T extends CourierDeleteArgs>(args: SelectSubset<T, CourierDeleteArgs<ExtArgs>>): Prisma__CourierClient<$Result.GetResult<Prisma.$CourierPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Courier.
     * @param {CourierUpdateArgs} args - Arguments to update one Courier.
     * @example
     * // Update one Courier
     * const courier = await prisma.courier.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CourierUpdateArgs>(args: SelectSubset<T, CourierUpdateArgs<ExtArgs>>): Prisma__CourierClient<$Result.GetResult<Prisma.$CourierPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Couriers.
     * @param {CourierDeleteManyArgs} args - Arguments to filter Couriers to delete.
     * @example
     * // Delete a few Couriers
     * const { count } = await prisma.courier.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CourierDeleteManyArgs>(args?: SelectSubset<T, CourierDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Couriers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourierUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Couriers
     * const courier = await prisma.courier.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CourierUpdateManyArgs>(args: SelectSubset<T, CourierUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Courier.
     * @param {CourierUpsertArgs} args - Arguments to update or create a Courier.
     * @example
     * // Update or create a Courier
     * const courier = await prisma.courier.upsert({
     *   create: {
     *     // ... data to create a Courier
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Courier we want to update
     *   }
     * })
     */
    upsert<T extends CourierUpsertArgs>(args: SelectSubset<T, CourierUpsertArgs<ExtArgs>>): Prisma__CourierClient<$Result.GetResult<Prisma.$CourierPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Couriers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourierCountArgs} args - Arguments to filter Couriers to count.
     * @example
     * // Count the number of Couriers
     * const count = await prisma.courier.count({
     *   where: {
     *     // ... the filter for the Couriers we want to count
     *   }
     * })
    **/
    count<T extends CourierCountArgs>(
      args?: Subset<T, CourierCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourierCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Courier.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourierAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourierAggregateArgs>(args: Subset<T, CourierAggregateArgs>): Prisma.PrismaPromise<GetCourierAggregateType<T>>

    /**
     * Group by Courier.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourierGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourierGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourierGroupByArgs['orderBy'] }
        : { orderBy?: CourierGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourierGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourierGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Courier model
   */
  readonly fields: CourierFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Courier.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CourierClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rel_brand<T extends BrandDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BrandDefaultArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    rel_status<T extends StatusDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StatusDefaultArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Courier model
   */
  interface CourierFieldRefs {
    readonly id: FieldRef<"Courier", 'String'>
    readonly username: FieldRef<"Courier", 'String'>
    readonly password: FieldRef<"Courier", 'String'>
    readonly name: FieldRef<"Courier", 'String'>
    readonly email: FieldRef<"Courier", 'String'>
    readonly phone: FieldRef<"Courier", 'String'>
    readonly number_plate: FieldRef<"Courier", 'String'>
    readonly id_brand: FieldRef<"Courier", 'Int'>
    readonly color: FieldRef<"Courier", 'String'>
    readonly is_active: FieldRef<"Courier", 'Boolean'>
    readonly id_status: FieldRef<"Courier", 'Int'>
    readonly created_at: FieldRef<"Courier", 'DateTime'>
    readonly update_at: FieldRef<"Courier", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Courier findUnique
   */
  export type CourierFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courier
     */
    select?: CourierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Courier
     */
    omit?: CourierOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourierInclude<ExtArgs> | null
    /**
     * Filter, which Courier to fetch.
     */
    where: CourierWhereUniqueInput
  }

  /**
   * Courier findUniqueOrThrow
   */
  export type CourierFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courier
     */
    select?: CourierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Courier
     */
    omit?: CourierOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourierInclude<ExtArgs> | null
    /**
     * Filter, which Courier to fetch.
     */
    where: CourierWhereUniqueInput
  }

  /**
   * Courier findFirst
   */
  export type CourierFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courier
     */
    select?: CourierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Courier
     */
    omit?: CourierOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourierInclude<ExtArgs> | null
    /**
     * Filter, which Courier to fetch.
     */
    where?: CourierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Couriers to fetch.
     */
    orderBy?: CourierOrderByWithRelationInput | CourierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Couriers.
     */
    cursor?: CourierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Couriers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Couriers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Couriers.
     */
    distinct?: CourierScalarFieldEnum | CourierScalarFieldEnum[]
  }

  /**
   * Courier findFirstOrThrow
   */
  export type CourierFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courier
     */
    select?: CourierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Courier
     */
    omit?: CourierOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourierInclude<ExtArgs> | null
    /**
     * Filter, which Courier to fetch.
     */
    where?: CourierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Couriers to fetch.
     */
    orderBy?: CourierOrderByWithRelationInput | CourierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Couriers.
     */
    cursor?: CourierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Couriers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Couriers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Couriers.
     */
    distinct?: CourierScalarFieldEnum | CourierScalarFieldEnum[]
  }

  /**
   * Courier findMany
   */
  export type CourierFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courier
     */
    select?: CourierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Courier
     */
    omit?: CourierOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourierInclude<ExtArgs> | null
    /**
     * Filter, which Couriers to fetch.
     */
    where?: CourierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Couriers to fetch.
     */
    orderBy?: CourierOrderByWithRelationInput | CourierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Couriers.
     */
    cursor?: CourierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Couriers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Couriers.
     */
    skip?: number
    distinct?: CourierScalarFieldEnum | CourierScalarFieldEnum[]
  }

  /**
   * Courier create
   */
  export type CourierCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courier
     */
    select?: CourierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Courier
     */
    omit?: CourierOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourierInclude<ExtArgs> | null
    /**
     * The data needed to create a Courier.
     */
    data: XOR<CourierCreateInput, CourierUncheckedCreateInput>
  }

  /**
   * Courier createMany
   */
  export type CourierCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Couriers.
     */
    data: CourierCreateManyInput | CourierCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Courier update
   */
  export type CourierUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courier
     */
    select?: CourierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Courier
     */
    omit?: CourierOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourierInclude<ExtArgs> | null
    /**
     * The data needed to update a Courier.
     */
    data: XOR<CourierUpdateInput, CourierUncheckedUpdateInput>
    /**
     * Choose, which Courier to update.
     */
    where: CourierWhereUniqueInput
  }

  /**
   * Courier updateMany
   */
  export type CourierUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Couriers.
     */
    data: XOR<CourierUpdateManyMutationInput, CourierUncheckedUpdateManyInput>
    /**
     * Filter which Couriers to update
     */
    where?: CourierWhereInput
    /**
     * Limit how many Couriers to update.
     */
    limit?: number
  }

  /**
   * Courier upsert
   */
  export type CourierUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courier
     */
    select?: CourierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Courier
     */
    omit?: CourierOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourierInclude<ExtArgs> | null
    /**
     * The filter to search for the Courier to update in case it exists.
     */
    where: CourierWhereUniqueInput
    /**
     * In case the Courier found by the `where` argument doesn't exist, create a new Courier with this data.
     */
    create: XOR<CourierCreateInput, CourierUncheckedCreateInput>
    /**
     * In case the Courier was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CourierUpdateInput, CourierUncheckedUpdateInput>
  }

  /**
   * Courier delete
   */
  export type CourierDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courier
     */
    select?: CourierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Courier
     */
    omit?: CourierOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourierInclude<ExtArgs> | null
    /**
     * Filter which Courier to delete.
     */
    where: CourierWhereUniqueInput
  }

  /**
   * Courier deleteMany
   */
  export type CourierDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Couriers to delete
     */
    where?: CourierWhereInput
    /**
     * Limit how many Couriers to delete.
     */
    limit?: number
  }

  /**
   * Courier without action
   */
  export type CourierDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courier
     */
    select?: CourierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Courier
     */
    omit?: CourierOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourierInclude<ExtArgs> | null
  }


  /**
   * Model Merchant
   */

  export type AggregateMerchant = {
    _count: MerchantCountAggregateOutputType | null
    _avg: MerchantAvgAggregateOutputType | null
    _sum: MerchantSumAggregateOutputType | null
    _min: MerchantMinAggregateOutputType | null
    _max: MerchantMaxAggregateOutputType | null
  }

  export type MerchantAvgAggregateOutputType = {
    id_subd: number | null
    id_city: number | null
    id_prov: number | null
    id_status: number | null
  }

  export type MerchantSumAggregateOutputType = {
    id_subd: number | null
    id_city: number | null
    id_prov: number | null
    id_status: number | null
  }

  export type MerchantMinAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
    name: string | null
    address: string | null
    id_subd: number | null
    id_city: number | null
    id_prov: number | null
    email: string | null
    phone: string | null
    is_open: boolean | null
    id_status: number | null
    created_at: Date | null
    update_at: Date | null
  }

  export type MerchantMaxAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
    name: string | null
    address: string | null
    id_subd: number | null
    id_city: number | null
    id_prov: number | null
    email: string | null
    phone: string | null
    is_open: boolean | null
    id_status: number | null
    created_at: Date | null
    update_at: Date | null
  }

  export type MerchantCountAggregateOutputType = {
    id: number
    username: number
    password: number
    name: number
    address: number
    id_subd: number
    id_city: number
    id_prov: number
    email: number
    phone: number
    is_open: number
    id_status: number
    created_at: number
    update_at: number
    _all: number
  }


  export type MerchantAvgAggregateInputType = {
    id_subd?: true
    id_city?: true
    id_prov?: true
    id_status?: true
  }

  export type MerchantSumAggregateInputType = {
    id_subd?: true
    id_city?: true
    id_prov?: true
    id_status?: true
  }

  export type MerchantMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
    name?: true
    address?: true
    id_subd?: true
    id_city?: true
    id_prov?: true
    email?: true
    phone?: true
    is_open?: true
    id_status?: true
    created_at?: true
    update_at?: true
  }

  export type MerchantMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
    name?: true
    address?: true
    id_subd?: true
    id_city?: true
    id_prov?: true
    email?: true
    phone?: true
    is_open?: true
    id_status?: true
    created_at?: true
    update_at?: true
  }

  export type MerchantCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    name?: true
    address?: true
    id_subd?: true
    id_city?: true
    id_prov?: true
    email?: true
    phone?: true
    is_open?: true
    id_status?: true
    created_at?: true
    update_at?: true
    _all?: true
  }

  export type MerchantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Merchant to aggregate.
     */
    where?: MerchantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Merchants to fetch.
     */
    orderBy?: MerchantOrderByWithRelationInput | MerchantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MerchantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Merchants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Merchants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Merchants
    **/
    _count?: true | MerchantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MerchantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MerchantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MerchantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MerchantMaxAggregateInputType
  }

  export type GetMerchantAggregateType<T extends MerchantAggregateArgs> = {
        [P in keyof T & keyof AggregateMerchant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMerchant[P]>
      : GetScalarType<T[P], AggregateMerchant[P]>
  }




  export type MerchantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MerchantWhereInput
    orderBy?: MerchantOrderByWithAggregationInput | MerchantOrderByWithAggregationInput[]
    by: MerchantScalarFieldEnum[] | MerchantScalarFieldEnum
    having?: MerchantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MerchantCountAggregateInputType | true
    _avg?: MerchantAvgAggregateInputType
    _sum?: MerchantSumAggregateInputType
    _min?: MerchantMinAggregateInputType
    _max?: MerchantMaxAggregateInputType
  }

  export type MerchantGroupByOutputType = {
    id: string
    username: string
    password: string
    name: string
    address: string
    id_subd: number
    id_city: number
    id_prov: number
    email: string
    phone: string | null
    is_open: boolean
    id_status: number
    created_at: Date
    update_at: Date | null
    _count: MerchantCountAggregateOutputType | null
    _avg: MerchantAvgAggregateOutputType | null
    _sum: MerchantSumAggregateOutputType | null
    _min: MerchantMinAggregateOutputType | null
    _max: MerchantMaxAggregateOutputType | null
  }

  type GetMerchantGroupByPayload<T extends MerchantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MerchantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MerchantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MerchantGroupByOutputType[P]>
            : GetScalarType<T[P], MerchantGroupByOutputType[P]>
        }
      >
    >


  export type MerchantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    name?: boolean
    address?: boolean
    id_subd?: boolean
    id_city?: boolean
    id_prov?: boolean
    email?: boolean
    phone?: boolean
    is_open?: boolean
    id_status?: boolean
    created_at?: boolean
    update_at?: boolean
    rel_menu?: boolean | Merchant$rel_menuArgs<ExtArgs>
    rel_subd?: boolean | SubdistrictDefaultArgs<ExtArgs>
    rel_city?: boolean | CityDefaultArgs<ExtArgs>
    rel_prov?: boolean | ProvinceDefaultArgs<ExtArgs>
    rel_status?: boolean | StatusDefaultArgs<ExtArgs>
    _count?: boolean | MerchantCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["merchant"]>



  export type MerchantSelectScalar = {
    id?: boolean
    username?: boolean
    password?: boolean
    name?: boolean
    address?: boolean
    id_subd?: boolean
    id_city?: boolean
    id_prov?: boolean
    email?: boolean
    phone?: boolean
    is_open?: boolean
    id_status?: boolean
    created_at?: boolean
    update_at?: boolean
  }

  export type MerchantOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "password" | "name" | "address" | "id_subd" | "id_city" | "id_prov" | "email" | "phone" | "is_open" | "id_status" | "created_at" | "update_at", ExtArgs["result"]["merchant"]>
  export type MerchantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rel_menu?: boolean | Merchant$rel_menuArgs<ExtArgs>
    rel_subd?: boolean | SubdistrictDefaultArgs<ExtArgs>
    rel_city?: boolean | CityDefaultArgs<ExtArgs>
    rel_prov?: boolean | ProvinceDefaultArgs<ExtArgs>
    rel_status?: boolean | StatusDefaultArgs<ExtArgs>
    _count?: boolean | MerchantCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $MerchantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Merchant"
    objects: {
      rel_menu: Prisma.$MenuPayload<ExtArgs>[]
      rel_subd: Prisma.$SubdistrictPayload<ExtArgs>
      rel_city: Prisma.$CityPayload<ExtArgs>
      rel_prov: Prisma.$ProvincePayload<ExtArgs>
      rel_status: Prisma.$StatusPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      password: string
      name: string
      address: string
      id_subd: number
      id_city: number
      id_prov: number
      email: string
      phone: string | null
      is_open: boolean
      id_status: number
      created_at: Date
      update_at: Date | null
    }, ExtArgs["result"]["merchant"]>
    composites: {}
  }

  type MerchantGetPayload<S extends boolean | null | undefined | MerchantDefaultArgs> = $Result.GetResult<Prisma.$MerchantPayload, S>

  type MerchantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MerchantFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MerchantCountAggregateInputType | true
    }

  export interface MerchantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Merchant'], meta: { name: 'Merchant' } }
    /**
     * Find zero or one Merchant that matches the filter.
     * @param {MerchantFindUniqueArgs} args - Arguments to find a Merchant
     * @example
     * // Get one Merchant
     * const merchant = await prisma.merchant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MerchantFindUniqueArgs>(args: SelectSubset<T, MerchantFindUniqueArgs<ExtArgs>>): Prisma__MerchantClient<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Merchant that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MerchantFindUniqueOrThrowArgs} args - Arguments to find a Merchant
     * @example
     * // Get one Merchant
     * const merchant = await prisma.merchant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MerchantFindUniqueOrThrowArgs>(args: SelectSubset<T, MerchantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MerchantClient<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Merchant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerchantFindFirstArgs} args - Arguments to find a Merchant
     * @example
     * // Get one Merchant
     * const merchant = await prisma.merchant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MerchantFindFirstArgs>(args?: SelectSubset<T, MerchantFindFirstArgs<ExtArgs>>): Prisma__MerchantClient<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Merchant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerchantFindFirstOrThrowArgs} args - Arguments to find a Merchant
     * @example
     * // Get one Merchant
     * const merchant = await prisma.merchant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MerchantFindFirstOrThrowArgs>(args?: SelectSubset<T, MerchantFindFirstOrThrowArgs<ExtArgs>>): Prisma__MerchantClient<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Merchants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerchantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Merchants
     * const merchants = await prisma.merchant.findMany()
     * 
     * // Get first 10 Merchants
     * const merchants = await prisma.merchant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const merchantWithIdOnly = await prisma.merchant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MerchantFindManyArgs>(args?: SelectSubset<T, MerchantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Merchant.
     * @param {MerchantCreateArgs} args - Arguments to create a Merchant.
     * @example
     * // Create one Merchant
     * const Merchant = await prisma.merchant.create({
     *   data: {
     *     // ... data to create a Merchant
     *   }
     * })
     * 
     */
    create<T extends MerchantCreateArgs>(args: SelectSubset<T, MerchantCreateArgs<ExtArgs>>): Prisma__MerchantClient<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Merchants.
     * @param {MerchantCreateManyArgs} args - Arguments to create many Merchants.
     * @example
     * // Create many Merchants
     * const merchant = await prisma.merchant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MerchantCreateManyArgs>(args?: SelectSubset<T, MerchantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Merchant.
     * @param {MerchantDeleteArgs} args - Arguments to delete one Merchant.
     * @example
     * // Delete one Merchant
     * const Merchant = await prisma.merchant.delete({
     *   where: {
     *     // ... filter to delete one Merchant
     *   }
     * })
     * 
     */
    delete<T extends MerchantDeleteArgs>(args: SelectSubset<T, MerchantDeleteArgs<ExtArgs>>): Prisma__MerchantClient<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Merchant.
     * @param {MerchantUpdateArgs} args - Arguments to update one Merchant.
     * @example
     * // Update one Merchant
     * const merchant = await prisma.merchant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MerchantUpdateArgs>(args: SelectSubset<T, MerchantUpdateArgs<ExtArgs>>): Prisma__MerchantClient<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Merchants.
     * @param {MerchantDeleteManyArgs} args - Arguments to filter Merchants to delete.
     * @example
     * // Delete a few Merchants
     * const { count } = await prisma.merchant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MerchantDeleteManyArgs>(args?: SelectSubset<T, MerchantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Merchants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerchantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Merchants
     * const merchant = await prisma.merchant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MerchantUpdateManyArgs>(args: SelectSubset<T, MerchantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Merchant.
     * @param {MerchantUpsertArgs} args - Arguments to update or create a Merchant.
     * @example
     * // Update or create a Merchant
     * const merchant = await prisma.merchant.upsert({
     *   create: {
     *     // ... data to create a Merchant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Merchant we want to update
     *   }
     * })
     */
    upsert<T extends MerchantUpsertArgs>(args: SelectSubset<T, MerchantUpsertArgs<ExtArgs>>): Prisma__MerchantClient<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Merchants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerchantCountArgs} args - Arguments to filter Merchants to count.
     * @example
     * // Count the number of Merchants
     * const count = await prisma.merchant.count({
     *   where: {
     *     // ... the filter for the Merchants we want to count
     *   }
     * })
    **/
    count<T extends MerchantCountArgs>(
      args?: Subset<T, MerchantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MerchantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Merchant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerchantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MerchantAggregateArgs>(args: Subset<T, MerchantAggregateArgs>): Prisma.PrismaPromise<GetMerchantAggregateType<T>>

    /**
     * Group by Merchant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerchantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MerchantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MerchantGroupByArgs['orderBy'] }
        : { orderBy?: MerchantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MerchantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMerchantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Merchant model
   */
  readonly fields: MerchantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Merchant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MerchantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rel_menu<T extends Merchant$rel_menuArgs<ExtArgs> = {}>(args?: Subset<T, Merchant$rel_menuArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MenuPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    rel_subd<T extends SubdistrictDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubdistrictDefaultArgs<ExtArgs>>): Prisma__SubdistrictClient<$Result.GetResult<Prisma.$SubdistrictPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    rel_city<T extends CityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CityDefaultArgs<ExtArgs>>): Prisma__CityClient<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    rel_prov<T extends ProvinceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProvinceDefaultArgs<ExtArgs>>): Prisma__ProvinceClient<$Result.GetResult<Prisma.$ProvincePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    rel_status<T extends StatusDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StatusDefaultArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Merchant model
   */
  interface MerchantFieldRefs {
    readonly id: FieldRef<"Merchant", 'String'>
    readonly username: FieldRef<"Merchant", 'String'>
    readonly password: FieldRef<"Merchant", 'String'>
    readonly name: FieldRef<"Merchant", 'String'>
    readonly address: FieldRef<"Merchant", 'String'>
    readonly id_subd: FieldRef<"Merchant", 'Int'>
    readonly id_city: FieldRef<"Merchant", 'Int'>
    readonly id_prov: FieldRef<"Merchant", 'Int'>
    readonly email: FieldRef<"Merchant", 'String'>
    readonly phone: FieldRef<"Merchant", 'String'>
    readonly is_open: FieldRef<"Merchant", 'Boolean'>
    readonly id_status: FieldRef<"Merchant", 'Int'>
    readonly created_at: FieldRef<"Merchant", 'DateTime'>
    readonly update_at: FieldRef<"Merchant", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Merchant findUnique
   */
  export type MerchantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    /**
     * Filter, which Merchant to fetch.
     */
    where: MerchantWhereUniqueInput
  }

  /**
   * Merchant findUniqueOrThrow
   */
  export type MerchantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    /**
     * Filter, which Merchant to fetch.
     */
    where: MerchantWhereUniqueInput
  }

  /**
   * Merchant findFirst
   */
  export type MerchantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    /**
     * Filter, which Merchant to fetch.
     */
    where?: MerchantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Merchants to fetch.
     */
    orderBy?: MerchantOrderByWithRelationInput | MerchantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Merchants.
     */
    cursor?: MerchantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Merchants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Merchants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Merchants.
     */
    distinct?: MerchantScalarFieldEnum | MerchantScalarFieldEnum[]
  }

  /**
   * Merchant findFirstOrThrow
   */
  export type MerchantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    /**
     * Filter, which Merchant to fetch.
     */
    where?: MerchantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Merchants to fetch.
     */
    orderBy?: MerchantOrderByWithRelationInput | MerchantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Merchants.
     */
    cursor?: MerchantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Merchants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Merchants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Merchants.
     */
    distinct?: MerchantScalarFieldEnum | MerchantScalarFieldEnum[]
  }

  /**
   * Merchant findMany
   */
  export type MerchantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    /**
     * Filter, which Merchants to fetch.
     */
    where?: MerchantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Merchants to fetch.
     */
    orderBy?: MerchantOrderByWithRelationInput | MerchantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Merchants.
     */
    cursor?: MerchantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Merchants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Merchants.
     */
    skip?: number
    distinct?: MerchantScalarFieldEnum | MerchantScalarFieldEnum[]
  }

  /**
   * Merchant create
   */
  export type MerchantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    /**
     * The data needed to create a Merchant.
     */
    data: XOR<MerchantCreateInput, MerchantUncheckedCreateInput>
  }

  /**
   * Merchant createMany
   */
  export type MerchantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Merchants.
     */
    data: MerchantCreateManyInput | MerchantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Merchant update
   */
  export type MerchantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    /**
     * The data needed to update a Merchant.
     */
    data: XOR<MerchantUpdateInput, MerchantUncheckedUpdateInput>
    /**
     * Choose, which Merchant to update.
     */
    where: MerchantWhereUniqueInput
  }

  /**
   * Merchant updateMany
   */
  export type MerchantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Merchants.
     */
    data: XOR<MerchantUpdateManyMutationInput, MerchantUncheckedUpdateManyInput>
    /**
     * Filter which Merchants to update
     */
    where?: MerchantWhereInput
    /**
     * Limit how many Merchants to update.
     */
    limit?: number
  }

  /**
   * Merchant upsert
   */
  export type MerchantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    /**
     * The filter to search for the Merchant to update in case it exists.
     */
    where: MerchantWhereUniqueInput
    /**
     * In case the Merchant found by the `where` argument doesn't exist, create a new Merchant with this data.
     */
    create: XOR<MerchantCreateInput, MerchantUncheckedCreateInput>
    /**
     * In case the Merchant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MerchantUpdateInput, MerchantUncheckedUpdateInput>
  }

  /**
   * Merchant delete
   */
  export type MerchantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    /**
     * Filter which Merchant to delete.
     */
    where: MerchantWhereUniqueInput
  }

  /**
   * Merchant deleteMany
   */
  export type MerchantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Merchants to delete
     */
    where?: MerchantWhereInput
    /**
     * Limit how many Merchants to delete.
     */
    limit?: number
  }

  /**
   * Merchant.rel_menu
   */
  export type Merchant$rel_menuArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Menu
     */
    select?: MenuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Menu
     */
    omit?: MenuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuInclude<ExtArgs> | null
    where?: MenuWhereInput
    orderBy?: MenuOrderByWithRelationInput | MenuOrderByWithRelationInput[]
    cursor?: MenuWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MenuScalarFieldEnum | MenuScalarFieldEnum[]
  }

  /**
   * Merchant without action
   */
  export type MerchantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
  }


  /**
   * Model Menu
   */

  export type AggregateMenu = {
    _count: MenuCountAggregateOutputType | null
    _avg: MenuAvgAggregateOutputType | null
    _sum: MenuSumAggregateOutputType | null
    _min: MenuMinAggregateOutputType | null
    _max: MenuMaxAggregateOutputType | null
  }

  export type MenuAvgAggregateOutputType = {
    id_category: number | null
    price: Decimal | null
  }

  export type MenuSumAggregateOutputType = {
    id_category: number | null
    price: Decimal | null
  }

  export type MenuMinAggregateOutputType = {
    id: string | null
    name: string | null
    detail: string | null
    id_merchant: string | null
    id_category: number | null
    price: Decimal | null
    is_ready: boolean | null
    created_at: Date | null
    update_at: Date | null
  }

  export type MenuMaxAggregateOutputType = {
    id: string | null
    name: string | null
    detail: string | null
    id_merchant: string | null
    id_category: number | null
    price: Decimal | null
    is_ready: boolean | null
    created_at: Date | null
    update_at: Date | null
  }

  export type MenuCountAggregateOutputType = {
    id: number
    name: number
    detail: number
    id_merchant: number
    id_category: number
    price: number
    is_ready: number
    created_at: number
    update_at: number
    _all: number
  }


  export type MenuAvgAggregateInputType = {
    id_category?: true
    price?: true
  }

  export type MenuSumAggregateInputType = {
    id_category?: true
    price?: true
  }

  export type MenuMinAggregateInputType = {
    id?: true
    name?: true
    detail?: true
    id_merchant?: true
    id_category?: true
    price?: true
    is_ready?: true
    created_at?: true
    update_at?: true
  }

  export type MenuMaxAggregateInputType = {
    id?: true
    name?: true
    detail?: true
    id_merchant?: true
    id_category?: true
    price?: true
    is_ready?: true
    created_at?: true
    update_at?: true
  }

  export type MenuCountAggregateInputType = {
    id?: true
    name?: true
    detail?: true
    id_merchant?: true
    id_category?: true
    price?: true
    is_ready?: true
    created_at?: true
    update_at?: true
    _all?: true
  }

  export type MenuAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Menu to aggregate.
     */
    where?: MenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Menus to fetch.
     */
    orderBy?: MenuOrderByWithRelationInput | MenuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Menus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Menus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Menus
    **/
    _count?: true | MenuCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MenuAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MenuSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MenuMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MenuMaxAggregateInputType
  }

  export type GetMenuAggregateType<T extends MenuAggregateArgs> = {
        [P in keyof T & keyof AggregateMenu]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMenu[P]>
      : GetScalarType<T[P], AggregateMenu[P]>
  }




  export type MenuGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MenuWhereInput
    orderBy?: MenuOrderByWithAggregationInput | MenuOrderByWithAggregationInput[]
    by: MenuScalarFieldEnum[] | MenuScalarFieldEnum
    having?: MenuScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MenuCountAggregateInputType | true
    _avg?: MenuAvgAggregateInputType
    _sum?: MenuSumAggregateInputType
    _min?: MenuMinAggregateInputType
    _max?: MenuMaxAggregateInputType
  }

  export type MenuGroupByOutputType = {
    id: string
    name: string
    detail: string | null
    id_merchant: string
    id_category: number
    price: Decimal
    is_ready: boolean
    created_at: Date
    update_at: Date | null
    _count: MenuCountAggregateOutputType | null
    _avg: MenuAvgAggregateOutputType | null
    _sum: MenuSumAggregateOutputType | null
    _min: MenuMinAggregateOutputType | null
    _max: MenuMaxAggregateOutputType | null
  }

  type GetMenuGroupByPayload<T extends MenuGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MenuGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MenuGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MenuGroupByOutputType[P]>
            : GetScalarType<T[P], MenuGroupByOutputType[P]>
        }
      >
    >


  export type MenuSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    detail?: boolean
    id_merchant?: boolean
    id_category?: boolean
    price?: boolean
    is_ready?: boolean
    created_at?: boolean
    update_at?: boolean
    rel_variant?: boolean | Menu$rel_variantArgs<ExtArgs>
    rel_merchant?: boolean | MerchantDefaultArgs<ExtArgs>
    rel_category?: boolean | CategoryDefaultArgs<ExtArgs>
    _count?: boolean | MenuCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["menu"]>



  export type MenuSelectScalar = {
    id?: boolean
    name?: boolean
    detail?: boolean
    id_merchant?: boolean
    id_category?: boolean
    price?: boolean
    is_ready?: boolean
    created_at?: boolean
    update_at?: boolean
  }

  export type MenuOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "detail" | "id_merchant" | "id_category" | "price" | "is_ready" | "created_at" | "update_at", ExtArgs["result"]["menu"]>
  export type MenuInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rel_variant?: boolean | Menu$rel_variantArgs<ExtArgs>
    rel_merchant?: boolean | MerchantDefaultArgs<ExtArgs>
    rel_category?: boolean | CategoryDefaultArgs<ExtArgs>
    _count?: boolean | MenuCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $MenuPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Menu"
    objects: {
      rel_variant: Prisma.$VariantPayload<ExtArgs>[]
      rel_merchant: Prisma.$MerchantPayload<ExtArgs>
      rel_category: Prisma.$CategoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      detail: string | null
      id_merchant: string
      id_category: number
      price: Prisma.Decimal
      is_ready: boolean
      created_at: Date
      update_at: Date | null
    }, ExtArgs["result"]["menu"]>
    composites: {}
  }

  type MenuGetPayload<S extends boolean | null | undefined | MenuDefaultArgs> = $Result.GetResult<Prisma.$MenuPayload, S>

  type MenuCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MenuFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MenuCountAggregateInputType | true
    }

  export interface MenuDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Menu'], meta: { name: 'Menu' } }
    /**
     * Find zero or one Menu that matches the filter.
     * @param {MenuFindUniqueArgs} args - Arguments to find a Menu
     * @example
     * // Get one Menu
     * const menu = await prisma.menu.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MenuFindUniqueArgs>(args: SelectSubset<T, MenuFindUniqueArgs<ExtArgs>>): Prisma__MenuClient<$Result.GetResult<Prisma.$MenuPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Menu that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MenuFindUniqueOrThrowArgs} args - Arguments to find a Menu
     * @example
     * // Get one Menu
     * const menu = await prisma.menu.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MenuFindUniqueOrThrowArgs>(args: SelectSubset<T, MenuFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MenuClient<$Result.GetResult<Prisma.$MenuPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Menu that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuFindFirstArgs} args - Arguments to find a Menu
     * @example
     * // Get one Menu
     * const menu = await prisma.menu.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MenuFindFirstArgs>(args?: SelectSubset<T, MenuFindFirstArgs<ExtArgs>>): Prisma__MenuClient<$Result.GetResult<Prisma.$MenuPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Menu that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuFindFirstOrThrowArgs} args - Arguments to find a Menu
     * @example
     * // Get one Menu
     * const menu = await prisma.menu.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MenuFindFirstOrThrowArgs>(args?: SelectSubset<T, MenuFindFirstOrThrowArgs<ExtArgs>>): Prisma__MenuClient<$Result.GetResult<Prisma.$MenuPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Menus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Menus
     * const menus = await prisma.menu.findMany()
     * 
     * // Get first 10 Menus
     * const menus = await prisma.menu.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const menuWithIdOnly = await prisma.menu.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MenuFindManyArgs>(args?: SelectSubset<T, MenuFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MenuPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Menu.
     * @param {MenuCreateArgs} args - Arguments to create a Menu.
     * @example
     * // Create one Menu
     * const Menu = await prisma.menu.create({
     *   data: {
     *     // ... data to create a Menu
     *   }
     * })
     * 
     */
    create<T extends MenuCreateArgs>(args: SelectSubset<T, MenuCreateArgs<ExtArgs>>): Prisma__MenuClient<$Result.GetResult<Prisma.$MenuPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Menus.
     * @param {MenuCreateManyArgs} args - Arguments to create many Menus.
     * @example
     * // Create many Menus
     * const menu = await prisma.menu.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MenuCreateManyArgs>(args?: SelectSubset<T, MenuCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Menu.
     * @param {MenuDeleteArgs} args - Arguments to delete one Menu.
     * @example
     * // Delete one Menu
     * const Menu = await prisma.menu.delete({
     *   where: {
     *     // ... filter to delete one Menu
     *   }
     * })
     * 
     */
    delete<T extends MenuDeleteArgs>(args: SelectSubset<T, MenuDeleteArgs<ExtArgs>>): Prisma__MenuClient<$Result.GetResult<Prisma.$MenuPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Menu.
     * @param {MenuUpdateArgs} args - Arguments to update one Menu.
     * @example
     * // Update one Menu
     * const menu = await prisma.menu.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MenuUpdateArgs>(args: SelectSubset<T, MenuUpdateArgs<ExtArgs>>): Prisma__MenuClient<$Result.GetResult<Prisma.$MenuPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Menus.
     * @param {MenuDeleteManyArgs} args - Arguments to filter Menus to delete.
     * @example
     * // Delete a few Menus
     * const { count } = await prisma.menu.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MenuDeleteManyArgs>(args?: SelectSubset<T, MenuDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Menus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Menus
     * const menu = await prisma.menu.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MenuUpdateManyArgs>(args: SelectSubset<T, MenuUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Menu.
     * @param {MenuUpsertArgs} args - Arguments to update or create a Menu.
     * @example
     * // Update or create a Menu
     * const menu = await prisma.menu.upsert({
     *   create: {
     *     // ... data to create a Menu
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Menu we want to update
     *   }
     * })
     */
    upsert<T extends MenuUpsertArgs>(args: SelectSubset<T, MenuUpsertArgs<ExtArgs>>): Prisma__MenuClient<$Result.GetResult<Prisma.$MenuPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Menus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuCountArgs} args - Arguments to filter Menus to count.
     * @example
     * // Count the number of Menus
     * const count = await prisma.menu.count({
     *   where: {
     *     // ... the filter for the Menus we want to count
     *   }
     * })
    **/
    count<T extends MenuCountArgs>(
      args?: Subset<T, MenuCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MenuCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Menu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MenuAggregateArgs>(args: Subset<T, MenuAggregateArgs>): Prisma.PrismaPromise<GetMenuAggregateType<T>>

    /**
     * Group by Menu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MenuGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MenuGroupByArgs['orderBy'] }
        : { orderBy?: MenuGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MenuGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMenuGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Menu model
   */
  readonly fields: MenuFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Menu.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MenuClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rel_variant<T extends Menu$rel_variantArgs<ExtArgs> = {}>(args?: Subset<T, Menu$rel_variantArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VariantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    rel_merchant<T extends MerchantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MerchantDefaultArgs<ExtArgs>>): Prisma__MerchantClient<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    rel_category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Menu model
   */
  interface MenuFieldRefs {
    readonly id: FieldRef<"Menu", 'String'>
    readonly name: FieldRef<"Menu", 'String'>
    readonly detail: FieldRef<"Menu", 'String'>
    readonly id_merchant: FieldRef<"Menu", 'String'>
    readonly id_category: FieldRef<"Menu", 'Int'>
    readonly price: FieldRef<"Menu", 'Decimal'>
    readonly is_ready: FieldRef<"Menu", 'Boolean'>
    readonly created_at: FieldRef<"Menu", 'DateTime'>
    readonly update_at: FieldRef<"Menu", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Menu findUnique
   */
  export type MenuFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Menu
     */
    select?: MenuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Menu
     */
    omit?: MenuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuInclude<ExtArgs> | null
    /**
     * Filter, which Menu to fetch.
     */
    where: MenuWhereUniqueInput
  }

  /**
   * Menu findUniqueOrThrow
   */
  export type MenuFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Menu
     */
    select?: MenuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Menu
     */
    omit?: MenuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuInclude<ExtArgs> | null
    /**
     * Filter, which Menu to fetch.
     */
    where: MenuWhereUniqueInput
  }

  /**
   * Menu findFirst
   */
  export type MenuFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Menu
     */
    select?: MenuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Menu
     */
    omit?: MenuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuInclude<ExtArgs> | null
    /**
     * Filter, which Menu to fetch.
     */
    where?: MenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Menus to fetch.
     */
    orderBy?: MenuOrderByWithRelationInput | MenuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Menus.
     */
    cursor?: MenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Menus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Menus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Menus.
     */
    distinct?: MenuScalarFieldEnum | MenuScalarFieldEnum[]
  }

  /**
   * Menu findFirstOrThrow
   */
  export type MenuFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Menu
     */
    select?: MenuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Menu
     */
    omit?: MenuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuInclude<ExtArgs> | null
    /**
     * Filter, which Menu to fetch.
     */
    where?: MenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Menus to fetch.
     */
    orderBy?: MenuOrderByWithRelationInput | MenuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Menus.
     */
    cursor?: MenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Menus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Menus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Menus.
     */
    distinct?: MenuScalarFieldEnum | MenuScalarFieldEnum[]
  }

  /**
   * Menu findMany
   */
  export type MenuFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Menu
     */
    select?: MenuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Menu
     */
    omit?: MenuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuInclude<ExtArgs> | null
    /**
     * Filter, which Menus to fetch.
     */
    where?: MenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Menus to fetch.
     */
    orderBy?: MenuOrderByWithRelationInput | MenuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Menus.
     */
    cursor?: MenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Menus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Menus.
     */
    skip?: number
    distinct?: MenuScalarFieldEnum | MenuScalarFieldEnum[]
  }

  /**
   * Menu create
   */
  export type MenuCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Menu
     */
    select?: MenuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Menu
     */
    omit?: MenuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuInclude<ExtArgs> | null
    /**
     * The data needed to create a Menu.
     */
    data: XOR<MenuCreateInput, MenuUncheckedCreateInput>
  }

  /**
   * Menu createMany
   */
  export type MenuCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Menus.
     */
    data: MenuCreateManyInput | MenuCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Menu update
   */
  export type MenuUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Menu
     */
    select?: MenuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Menu
     */
    omit?: MenuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuInclude<ExtArgs> | null
    /**
     * The data needed to update a Menu.
     */
    data: XOR<MenuUpdateInput, MenuUncheckedUpdateInput>
    /**
     * Choose, which Menu to update.
     */
    where: MenuWhereUniqueInput
  }

  /**
   * Menu updateMany
   */
  export type MenuUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Menus.
     */
    data: XOR<MenuUpdateManyMutationInput, MenuUncheckedUpdateManyInput>
    /**
     * Filter which Menus to update
     */
    where?: MenuWhereInput
    /**
     * Limit how many Menus to update.
     */
    limit?: number
  }

  /**
   * Menu upsert
   */
  export type MenuUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Menu
     */
    select?: MenuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Menu
     */
    omit?: MenuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuInclude<ExtArgs> | null
    /**
     * The filter to search for the Menu to update in case it exists.
     */
    where: MenuWhereUniqueInput
    /**
     * In case the Menu found by the `where` argument doesn't exist, create a new Menu with this data.
     */
    create: XOR<MenuCreateInput, MenuUncheckedCreateInput>
    /**
     * In case the Menu was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MenuUpdateInput, MenuUncheckedUpdateInput>
  }

  /**
   * Menu delete
   */
  export type MenuDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Menu
     */
    select?: MenuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Menu
     */
    omit?: MenuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuInclude<ExtArgs> | null
    /**
     * Filter which Menu to delete.
     */
    where: MenuWhereUniqueInput
  }

  /**
   * Menu deleteMany
   */
  export type MenuDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Menus to delete
     */
    where?: MenuWhereInput
    /**
     * Limit how many Menus to delete.
     */
    limit?: number
  }

  /**
   * Menu.rel_variant
   */
  export type Menu$rel_variantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variant
     */
    select?: VariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Variant
     */
    omit?: VariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariantInclude<ExtArgs> | null
    where?: VariantWhereInput
    orderBy?: VariantOrderByWithRelationInput | VariantOrderByWithRelationInput[]
    cursor?: VariantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VariantScalarFieldEnum | VariantScalarFieldEnum[]
  }

  /**
   * Menu without action
   */
  export type MenuDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Menu
     */
    select?: MenuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Menu
     */
    omit?: MenuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuInclude<ExtArgs> | null
  }


  /**
   * Model Variant
   */

  export type AggregateVariant = {
    _count: VariantCountAggregateOutputType | null
    _min: VariantMinAggregateOutputType | null
    _max: VariantMaxAggregateOutputType | null
  }

  export type VariantMinAggregateOutputType = {
    id: string | null
    name: string | null
    id_menu: string | null
    created_at: Date | null
    update_at: Date | null
  }

  export type VariantMaxAggregateOutputType = {
    id: string | null
    name: string | null
    id_menu: string | null
    created_at: Date | null
    update_at: Date | null
  }

  export type VariantCountAggregateOutputType = {
    id: number
    name: number
    id_menu: number
    created_at: number
    update_at: number
    _all: number
  }


  export type VariantMinAggregateInputType = {
    id?: true
    name?: true
    id_menu?: true
    created_at?: true
    update_at?: true
  }

  export type VariantMaxAggregateInputType = {
    id?: true
    name?: true
    id_menu?: true
    created_at?: true
    update_at?: true
  }

  export type VariantCountAggregateInputType = {
    id?: true
    name?: true
    id_menu?: true
    created_at?: true
    update_at?: true
    _all?: true
  }

  export type VariantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Variant to aggregate.
     */
    where?: VariantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Variants to fetch.
     */
    orderBy?: VariantOrderByWithRelationInput | VariantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VariantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Variants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Variants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Variants
    **/
    _count?: true | VariantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VariantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VariantMaxAggregateInputType
  }

  export type GetVariantAggregateType<T extends VariantAggregateArgs> = {
        [P in keyof T & keyof AggregateVariant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVariant[P]>
      : GetScalarType<T[P], AggregateVariant[P]>
  }




  export type VariantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VariantWhereInput
    orderBy?: VariantOrderByWithAggregationInput | VariantOrderByWithAggregationInput[]
    by: VariantScalarFieldEnum[] | VariantScalarFieldEnum
    having?: VariantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VariantCountAggregateInputType | true
    _min?: VariantMinAggregateInputType
    _max?: VariantMaxAggregateInputType
  }

  export type VariantGroupByOutputType = {
    id: string
    name: string
    id_menu: string
    created_at: Date
    update_at: Date | null
    _count: VariantCountAggregateOutputType | null
    _min: VariantMinAggregateOutputType | null
    _max: VariantMaxAggregateOutputType | null
  }

  type GetVariantGroupByPayload<T extends VariantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VariantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VariantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VariantGroupByOutputType[P]>
            : GetScalarType<T[P], VariantGroupByOutputType[P]>
        }
      >
    >


  export type VariantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    id_menu?: boolean
    created_at?: boolean
    update_at?: boolean
    rel_variant_item?: boolean | Variant$rel_variant_itemArgs<ExtArgs>
    rel_menu?: boolean | MenuDefaultArgs<ExtArgs>
    _count?: boolean | VariantCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["variant"]>



  export type VariantSelectScalar = {
    id?: boolean
    name?: boolean
    id_menu?: boolean
    created_at?: boolean
    update_at?: boolean
  }

  export type VariantOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "id_menu" | "created_at" | "update_at", ExtArgs["result"]["variant"]>
  export type VariantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rel_variant_item?: boolean | Variant$rel_variant_itemArgs<ExtArgs>
    rel_menu?: boolean | MenuDefaultArgs<ExtArgs>
    _count?: boolean | VariantCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $VariantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Variant"
    objects: {
      rel_variant_item: Prisma.$Variant_itemPayload<ExtArgs>[]
      rel_menu: Prisma.$MenuPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      id_menu: string
      created_at: Date
      update_at: Date | null
    }, ExtArgs["result"]["variant"]>
    composites: {}
  }

  type VariantGetPayload<S extends boolean | null | undefined | VariantDefaultArgs> = $Result.GetResult<Prisma.$VariantPayload, S>

  type VariantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VariantFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VariantCountAggregateInputType | true
    }

  export interface VariantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Variant'], meta: { name: 'Variant' } }
    /**
     * Find zero or one Variant that matches the filter.
     * @param {VariantFindUniqueArgs} args - Arguments to find a Variant
     * @example
     * // Get one Variant
     * const variant = await prisma.variant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VariantFindUniqueArgs>(args: SelectSubset<T, VariantFindUniqueArgs<ExtArgs>>): Prisma__VariantClient<$Result.GetResult<Prisma.$VariantPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Variant that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VariantFindUniqueOrThrowArgs} args - Arguments to find a Variant
     * @example
     * // Get one Variant
     * const variant = await prisma.variant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VariantFindUniqueOrThrowArgs>(args: SelectSubset<T, VariantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VariantClient<$Result.GetResult<Prisma.$VariantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Variant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VariantFindFirstArgs} args - Arguments to find a Variant
     * @example
     * // Get one Variant
     * const variant = await prisma.variant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VariantFindFirstArgs>(args?: SelectSubset<T, VariantFindFirstArgs<ExtArgs>>): Prisma__VariantClient<$Result.GetResult<Prisma.$VariantPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Variant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VariantFindFirstOrThrowArgs} args - Arguments to find a Variant
     * @example
     * // Get one Variant
     * const variant = await prisma.variant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VariantFindFirstOrThrowArgs>(args?: SelectSubset<T, VariantFindFirstOrThrowArgs<ExtArgs>>): Prisma__VariantClient<$Result.GetResult<Prisma.$VariantPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Variants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VariantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Variants
     * const variants = await prisma.variant.findMany()
     * 
     * // Get first 10 Variants
     * const variants = await prisma.variant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const variantWithIdOnly = await prisma.variant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VariantFindManyArgs>(args?: SelectSubset<T, VariantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VariantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Variant.
     * @param {VariantCreateArgs} args - Arguments to create a Variant.
     * @example
     * // Create one Variant
     * const Variant = await prisma.variant.create({
     *   data: {
     *     // ... data to create a Variant
     *   }
     * })
     * 
     */
    create<T extends VariantCreateArgs>(args: SelectSubset<T, VariantCreateArgs<ExtArgs>>): Prisma__VariantClient<$Result.GetResult<Prisma.$VariantPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Variants.
     * @param {VariantCreateManyArgs} args - Arguments to create many Variants.
     * @example
     * // Create many Variants
     * const variant = await prisma.variant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VariantCreateManyArgs>(args?: SelectSubset<T, VariantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Variant.
     * @param {VariantDeleteArgs} args - Arguments to delete one Variant.
     * @example
     * // Delete one Variant
     * const Variant = await prisma.variant.delete({
     *   where: {
     *     // ... filter to delete one Variant
     *   }
     * })
     * 
     */
    delete<T extends VariantDeleteArgs>(args: SelectSubset<T, VariantDeleteArgs<ExtArgs>>): Prisma__VariantClient<$Result.GetResult<Prisma.$VariantPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Variant.
     * @param {VariantUpdateArgs} args - Arguments to update one Variant.
     * @example
     * // Update one Variant
     * const variant = await prisma.variant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VariantUpdateArgs>(args: SelectSubset<T, VariantUpdateArgs<ExtArgs>>): Prisma__VariantClient<$Result.GetResult<Prisma.$VariantPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Variants.
     * @param {VariantDeleteManyArgs} args - Arguments to filter Variants to delete.
     * @example
     * // Delete a few Variants
     * const { count } = await prisma.variant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VariantDeleteManyArgs>(args?: SelectSubset<T, VariantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Variants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VariantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Variants
     * const variant = await prisma.variant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VariantUpdateManyArgs>(args: SelectSubset<T, VariantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Variant.
     * @param {VariantUpsertArgs} args - Arguments to update or create a Variant.
     * @example
     * // Update or create a Variant
     * const variant = await prisma.variant.upsert({
     *   create: {
     *     // ... data to create a Variant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Variant we want to update
     *   }
     * })
     */
    upsert<T extends VariantUpsertArgs>(args: SelectSubset<T, VariantUpsertArgs<ExtArgs>>): Prisma__VariantClient<$Result.GetResult<Prisma.$VariantPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Variants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VariantCountArgs} args - Arguments to filter Variants to count.
     * @example
     * // Count the number of Variants
     * const count = await prisma.variant.count({
     *   where: {
     *     // ... the filter for the Variants we want to count
     *   }
     * })
    **/
    count<T extends VariantCountArgs>(
      args?: Subset<T, VariantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VariantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Variant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VariantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VariantAggregateArgs>(args: Subset<T, VariantAggregateArgs>): Prisma.PrismaPromise<GetVariantAggregateType<T>>

    /**
     * Group by Variant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VariantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VariantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VariantGroupByArgs['orderBy'] }
        : { orderBy?: VariantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VariantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVariantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Variant model
   */
  readonly fields: VariantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Variant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VariantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rel_variant_item<T extends Variant$rel_variant_itemArgs<ExtArgs> = {}>(args?: Subset<T, Variant$rel_variant_itemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Variant_itemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    rel_menu<T extends MenuDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MenuDefaultArgs<ExtArgs>>): Prisma__MenuClient<$Result.GetResult<Prisma.$MenuPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Variant model
   */
  interface VariantFieldRefs {
    readonly id: FieldRef<"Variant", 'String'>
    readonly name: FieldRef<"Variant", 'String'>
    readonly id_menu: FieldRef<"Variant", 'String'>
    readonly created_at: FieldRef<"Variant", 'DateTime'>
    readonly update_at: FieldRef<"Variant", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Variant findUnique
   */
  export type VariantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variant
     */
    select?: VariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Variant
     */
    omit?: VariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariantInclude<ExtArgs> | null
    /**
     * Filter, which Variant to fetch.
     */
    where: VariantWhereUniqueInput
  }

  /**
   * Variant findUniqueOrThrow
   */
  export type VariantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variant
     */
    select?: VariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Variant
     */
    omit?: VariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariantInclude<ExtArgs> | null
    /**
     * Filter, which Variant to fetch.
     */
    where: VariantWhereUniqueInput
  }

  /**
   * Variant findFirst
   */
  export type VariantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variant
     */
    select?: VariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Variant
     */
    omit?: VariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariantInclude<ExtArgs> | null
    /**
     * Filter, which Variant to fetch.
     */
    where?: VariantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Variants to fetch.
     */
    orderBy?: VariantOrderByWithRelationInput | VariantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Variants.
     */
    cursor?: VariantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Variants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Variants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Variants.
     */
    distinct?: VariantScalarFieldEnum | VariantScalarFieldEnum[]
  }

  /**
   * Variant findFirstOrThrow
   */
  export type VariantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variant
     */
    select?: VariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Variant
     */
    omit?: VariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariantInclude<ExtArgs> | null
    /**
     * Filter, which Variant to fetch.
     */
    where?: VariantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Variants to fetch.
     */
    orderBy?: VariantOrderByWithRelationInput | VariantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Variants.
     */
    cursor?: VariantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Variants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Variants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Variants.
     */
    distinct?: VariantScalarFieldEnum | VariantScalarFieldEnum[]
  }

  /**
   * Variant findMany
   */
  export type VariantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variant
     */
    select?: VariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Variant
     */
    omit?: VariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariantInclude<ExtArgs> | null
    /**
     * Filter, which Variants to fetch.
     */
    where?: VariantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Variants to fetch.
     */
    orderBy?: VariantOrderByWithRelationInput | VariantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Variants.
     */
    cursor?: VariantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Variants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Variants.
     */
    skip?: number
    distinct?: VariantScalarFieldEnum | VariantScalarFieldEnum[]
  }

  /**
   * Variant create
   */
  export type VariantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variant
     */
    select?: VariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Variant
     */
    omit?: VariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariantInclude<ExtArgs> | null
    /**
     * The data needed to create a Variant.
     */
    data: XOR<VariantCreateInput, VariantUncheckedCreateInput>
  }

  /**
   * Variant createMany
   */
  export type VariantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Variants.
     */
    data: VariantCreateManyInput | VariantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Variant update
   */
  export type VariantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variant
     */
    select?: VariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Variant
     */
    omit?: VariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariantInclude<ExtArgs> | null
    /**
     * The data needed to update a Variant.
     */
    data: XOR<VariantUpdateInput, VariantUncheckedUpdateInput>
    /**
     * Choose, which Variant to update.
     */
    where: VariantWhereUniqueInput
  }

  /**
   * Variant updateMany
   */
  export type VariantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Variants.
     */
    data: XOR<VariantUpdateManyMutationInput, VariantUncheckedUpdateManyInput>
    /**
     * Filter which Variants to update
     */
    where?: VariantWhereInput
    /**
     * Limit how many Variants to update.
     */
    limit?: number
  }

  /**
   * Variant upsert
   */
  export type VariantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variant
     */
    select?: VariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Variant
     */
    omit?: VariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariantInclude<ExtArgs> | null
    /**
     * The filter to search for the Variant to update in case it exists.
     */
    where: VariantWhereUniqueInput
    /**
     * In case the Variant found by the `where` argument doesn't exist, create a new Variant with this data.
     */
    create: XOR<VariantCreateInput, VariantUncheckedCreateInput>
    /**
     * In case the Variant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VariantUpdateInput, VariantUncheckedUpdateInput>
  }

  /**
   * Variant delete
   */
  export type VariantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variant
     */
    select?: VariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Variant
     */
    omit?: VariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariantInclude<ExtArgs> | null
    /**
     * Filter which Variant to delete.
     */
    where: VariantWhereUniqueInput
  }

  /**
   * Variant deleteMany
   */
  export type VariantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Variants to delete
     */
    where?: VariantWhereInput
    /**
     * Limit how many Variants to delete.
     */
    limit?: number
  }

  /**
   * Variant.rel_variant_item
   */
  export type Variant$rel_variant_itemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variant_item
     */
    select?: Variant_itemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Variant_item
     */
    omit?: Variant_itemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Variant_itemInclude<ExtArgs> | null
    where?: Variant_itemWhereInput
    orderBy?: Variant_itemOrderByWithRelationInput | Variant_itemOrderByWithRelationInput[]
    cursor?: Variant_itemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Variant_itemScalarFieldEnum | Variant_itemScalarFieldEnum[]
  }

  /**
   * Variant without action
   */
  export type VariantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variant
     */
    select?: VariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Variant
     */
    omit?: VariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariantInclude<ExtArgs> | null
  }


  /**
   * Model Variant_item
   */

  export type AggregateVariant_item = {
    _count: Variant_itemCountAggregateOutputType | null
    _avg: Variant_itemAvgAggregateOutputType | null
    _sum: Variant_itemSumAggregateOutputType | null
    _min: Variant_itemMinAggregateOutputType | null
    _max: Variant_itemMaxAggregateOutputType | null
  }

  export type Variant_itemAvgAggregateOutputType = {
    price: Decimal | null
  }

  export type Variant_itemSumAggregateOutputType = {
    price: Decimal | null
  }

  export type Variant_itemMinAggregateOutputType = {
    id: string | null
    name: string | null
    id_variant: string | null
    price: Decimal | null
    created_at: Date | null
    update_at: Date | null
  }

  export type Variant_itemMaxAggregateOutputType = {
    id: string | null
    name: string | null
    id_variant: string | null
    price: Decimal | null
    created_at: Date | null
    update_at: Date | null
  }

  export type Variant_itemCountAggregateOutputType = {
    id: number
    name: number
    id_variant: number
    price: number
    created_at: number
    update_at: number
    _all: number
  }


  export type Variant_itemAvgAggregateInputType = {
    price?: true
  }

  export type Variant_itemSumAggregateInputType = {
    price?: true
  }

  export type Variant_itemMinAggregateInputType = {
    id?: true
    name?: true
    id_variant?: true
    price?: true
    created_at?: true
    update_at?: true
  }

  export type Variant_itemMaxAggregateInputType = {
    id?: true
    name?: true
    id_variant?: true
    price?: true
    created_at?: true
    update_at?: true
  }

  export type Variant_itemCountAggregateInputType = {
    id?: true
    name?: true
    id_variant?: true
    price?: true
    created_at?: true
    update_at?: true
    _all?: true
  }

  export type Variant_itemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Variant_item to aggregate.
     */
    where?: Variant_itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Variant_items to fetch.
     */
    orderBy?: Variant_itemOrderByWithRelationInput | Variant_itemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Variant_itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Variant_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Variant_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Variant_items
    **/
    _count?: true | Variant_itemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Variant_itemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Variant_itemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Variant_itemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Variant_itemMaxAggregateInputType
  }

  export type GetVariant_itemAggregateType<T extends Variant_itemAggregateArgs> = {
        [P in keyof T & keyof AggregateVariant_item]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVariant_item[P]>
      : GetScalarType<T[P], AggregateVariant_item[P]>
  }




  export type Variant_itemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Variant_itemWhereInput
    orderBy?: Variant_itemOrderByWithAggregationInput | Variant_itemOrderByWithAggregationInput[]
    by: Variant_itemScalarFieldEnum[] | Variant_itemScalarFieldEnum
    having?: Variant_itemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Variant_itemCountAggregateInputType | true
    _avg?: Variant_itemAvgAggregateInputType
    _sum?: Variant_itemSumAggregateInputType
    _min?: Variant_itemMinAggregateInputType
    _max?: Variant_itemMaxAggregateInputType
  }

  export type Variant_itemGroupByOutputType = {
    id: string
    name: string
    id_variant: string
    price: Decimal
    created_at: Date
    update_at: Date | null
    _count: Variant_itemCountAggregateOutputType | null
    _avg: Variant_itemAvgAggregateOutputType | null
    _sum: Variant_itemSumAggregateOutputType | null
    _min: Variant_itemMinAggregateOutputType | null
    _max: Variant_itemMaxAggregateOutputType | null
  }

  type GetVariant_itemGroupByPayload<T extends Variant_itemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Variant_itemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Variant_itemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Variant_itemGroupByOutputType[P]>
            : GetScalarType<T[P], Variant_itemGroupByOutputType[P]>
        }
      >
    >


  export type Variant_itemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    id_variant?: boolean
    price?: boolean
    created_at?: boolean
    update_at?: boolean
    rel_variant?: boolean | VariantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["variant_item"]>



  export type Variant_itemSelectScalar = {
    id?: boolean
    name?: boolean
    id_variant?: boolean
    price?: boolean
    created_at?: boolean
    update_at?: boolean
  }

  export type Variant_itemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "id_variant" | "price" | "created_at" | "update_at", ExtArgs["result"]["variant_item"]>
  export type Variant_itemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rel_variant?: boolean | VariantDefaultArgs<ExtArgs>
  }

  export type $Variant_itemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Variant_item"
    objects: {
      rel_variant: Prisma.$VariantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      id_variant: string
      price: Prisma.Decimal
      created_at: Date
      update_at: Date | null
    }, ExtArgs["result"]["variant_item"]>
    composites: {}
  }

  type Variant_itemGetPayload<S extends boolean | null | undefined | Variant_itemDefaultArgs> = $Result.GetResult<Prisma.$Variant_itemPayload, S>

  type Variant_itemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<Variant_itemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Variant_itemCountAggregateInputType | true
    }

  export interface Variant_itemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Variant_item'], meta: { name: 'Variant_item' } }
    /**
     * Find zero or one Variant_item that matches the filter.
     * @param {Variant_itemFindUniqueArgs} args - Arguments to find a Variant_item
     * @example
     * // Get one Variant_item
     * const variant_item = await prisma.variant_item.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends Variant_itemFindUniqueArgs>(args: SelectSubset<T, Variant_itemFindUniqueArgs<ExtArgs>>): Prisma__Variant_itemClient<$Result.GetResult<Prisma.$Variant_itemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Variant_item that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {Variant_itemFindUniqueOrThrowArgs} args - Arguments to find a Variant_item
     * @example
     * // Get one Variant_item
     * const variant_item = await prisma.variant_item.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends Variant_itemFindUniqueOrThrowArgs>(args: SelectSubset<T, Variant_itemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__Variant_itemClient<$Result.GetResult<Prisma.$Variant_itemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Variant_item that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Variant_itemFindFirstArgs} args - Arguments to find a Variant_item
     * @example
     * // Get one Variant_item
     * const variant_item = await prisma.variant_item.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends Variant_itemFindFirstArgs>(args?: SelectSubset<T, Variant_itemFindFirstArgs<ExtArgs>>): Prisma__Variant_itemClient<$Result.GetResult<Prisma.$Variant_itemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Variant_item that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Variant_itemFindFirstOrThrowArgs} args - Arguments to find a Variant_item
     * @example
     * // Get one Variant_item
     * const variant_item = await prisma.variant_item.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends Variant_itemFindFirstOrThrowArgs>(args?: SelectSubset<T, Variant_itemFindFirstOrThrowArgs<ExtArgs>>): Prisma__Variant_itemClient<$Result.GetResult<Prisma.$Variant_itemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Variant_items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Variant_itemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Variant_items
     * const variant_items = await prisma.variant_item.findMany()
     * 
     * // Get first 10 Variant_items
     * const variant_items = await prisma.variant_item.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const variant_itemWithIdOnly = await prisma.variant_item.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends Variant_itemFindManyArgs>(args?: SelectSubset<T, Variant_itemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Variant_itemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Variant_item.
     * @param {Variant_itemCreateArgs} args - Arguments to create a Variant_item.
     * @example
     * // Create one Variant_item
     * const Variant_item = await prisma.variant_item.create({
     *   data: {
     *     // ... data to create a Variant_item
     *   }
     * })
     * 
     */
    create<T extends Variant_itemCreateArgs>(args: SelectSubset<T, Variant_itemCreateArgs<ExtArgs>>): Prisma__Variant_itemClient<$Result.GetResult<Prisma.$Variant_itemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Variant_items.
     * @param {Variant_itemCreateManyArgs} args - Arguments to create many Variant_items.
     * @example
     * // Create many Variant_items
     * const variant_item = await prisma.variant_item.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends Variant_itemCreateManyArgs>(args?: SelectSubset<T, Variant_itemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Variant_item.
     * @param {Variant_itemDeleteArgs} args - Arguments to delete one Variant_item.
     * @example
     * // Delete one Variant_item
     * const Variant_item = await prisma.variant_item.delete({
     *   where: {
     *     // ... filter to delete one Variant_item
     *   }
     * })
     * 
     */
    delete<T extends Variant_itemDeleteArgs>(args: SelectSubset<T, Variant_itemDeleteArgs<ExtArgs>>): Prisma__Variant_itemClient<$Result.GetResult<Prisma.$Variant_itemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Variant_item.
     * @param {Variant_itemUpdateArgs} args - Arguments to update one Variant_item.
     * @example
     * // Update one Variant_item
     * const variant_item = await prisma.variant_item.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends Variant_itemUpdateArgs>(args: SelectSubset<T, Variant_itemUpdateArgs<ExtArgs>>): Prisma__Variant_itemClient<$Result.GetResult<Prisma.$Variant_itemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Variant_items.
     * @param {Variant_itemDeleteManyArgs} args - Arguments to filter Variant_items to delete.
     * @example
     * // Delete a few Variant_items
     * const { count } = await prisma.variant_item.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends Variant_itemDeleteManyArgs>(args?: SelectSubset<T, Variant_itemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Variant_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Variant_itemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Variant_items
     * const variant_item = await prisma.variant_item.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends Variant_itemUpdateManyArgs>(args: SelectSubset<T, Variant_itemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Variant_item.
     * @param {Variant_itemUpsertArgs} args - Arguments to update or create a Variant_item.
     * @example
     * // Update or create a Variant_item
     * const variant_item = await prisma.variant_item.upsert({
     *   create: {
     *     // ... data to create a Variant_item
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Variant_item we want to update
     *   }
     * })
     */
    upsert<T extends Variant_itemUpsertArgs>(args: SelectSubset<T, Variant_itemUpsertArgs<ExtArgs>>): Prisma__Variant_itemClient<$Result.GetResult<Prisma.$Variant_itemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Variant_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Variant_itemCountArgs} args - Arguments to filter Variant_items to count.
     * @example
     * // Count the number of Variant_items
     * const count = await prisma.variant_item.count({
     *   where: {
     *     // ... the filter for the Variant_items we want to count
     *   }
     * })
    **/
    count<T extends Variant_itemCountArgs>(
      args?: Subset<T, Variant_itemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Variant_itemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Variant_item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Variant_itemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Variant_itemAggregateArgs>(args: Subset<T, Variant_itemAggregateArgs>): Prisma.PrismaPromise<GetVariant_itemAggregateType<T>>

    /**
     * Group by Variant_item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Variant_itemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Variant_itemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Variant_itemGroupByArgs['orderBy'] }
        : { orderBy?: Variant_itemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Variant_itemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVariant_itemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Variant_item model
   */
  readonly fields: Variant_itemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Variant_item.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Variant_itemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rel_variant<T extends VariantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VariantDefaultArgs<ExtArgs>>): Prisma__VariantClient<$Result.GetResult<Prisma.$VariantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Variant_item model
   */
  interface Variant_itemFieldRefs {
    readonly id: FieldRef<"Variant_item", 'String'>
    readonly name: FieldRef<"Variant_item", 'String'>
    readonly id_variant: FieldRef<"Variant_item", 'String'>
    readonly price: FieldRef<"Variant_item", 'Decimal'>
    readonly created_at: FieldRef<"Variant_item", 'DateTime'>
    readonly update_at: FieldRef<"Variant_item", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Variant_item findUnique
   */
  export type Variant_itemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variant_item
     */
    select?: Variant_itemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Variant_item
     */
    omit?: Variant_itemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Variant_itemInclude<ExtArgs> | null
    /**
     * Filter, which Variant_item to fetch.
     */
    where: Variant_itemWhereUniqueInput
  }

  /**
   * Variant_item findUniqueOrThrow
   */
  export type Variant_itemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variant_item
     */
    select?: Variant_itemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Variant_item
     */
    omit?: Variant_itemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Variant_itemInclude<ExtArgs> | null
    /**
     * Filter, which Variant_item to fetch.
     */
    where: Variant_itemWhereUniqueInput
  }

  /**
   * Variant_item findFirst
   */
  export type Variant_itemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variant_item
     */
    select?: Variant_itemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Variant_item
     */
    omit?: Variant_itemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Variant_itemInclude<ExtArgs> | null
    /**
     * Filter, which Variant_item to fetch.
     */
    where?: Variant_itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Variant_items to fetch.
     */
    orderBy?: Variant_itemOrderByWithRelationInput | Variant_itemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Variant_items.
     */
    cursor?: Variant_itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Variant_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Variant_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Variant_items.
     */
    distinct?: Variant_itemScalarFieldEnum | Variant_itemScalarFieldEnum[]
  }

  /**
   * Variant_item findFirstOrThrow
   */
  export type Variant_itemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variant_item
     */
    select?: Variant_itemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Variant_item
     */
    omit?: Variant_itemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Variant_itemInclude<ExtArgs> | null
    /**
     * Filter, which Variant_item to fetch.
     */
    where?: Variant_itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Variant_items to fetch.
     */
    orderBy?: Variant_itemOrderByWithRelationInput | Variant_itemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Variant_items.
     */
    cursor?: Variant_itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Variant_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Variant_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Variant_items.
     */
    distinct?: Variant_itemScalarFieldEnum | Variant_itemScalarFieldEnum[]
  }

  /**
   * Variant_item findMany
   */
  export type Variant_itemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variant_item
     */
    select?: Variant_itemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Variant_item
     */
    omit?: Variant_itemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Variant_itemInclude<ExtArgs> | null
    /**
     * Filter, which Variant_items to fetch.
     */
    where?: Variant_itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Variant_items to fetch.
     */
    orderBy?: Variant_itemOrderByWithRelationInput | Variant_itemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Variant_items.
     */
    cursor?: Variant_itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Variant_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Variant_items.
     */
    skip?: number
    distinct?: Variant_itemScalarFieldEnum | Variant_itemScalarFieldEnum[]
  }

  /**
   * Variant_item create
   */
  export type Variant_itemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variant_item
     */
    select?: Variant_itemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Variant_item
     */
    omit?: Variant_itemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Variant_itemInclude<ExtArgs> | null
    /**
     * The data needed to create a Variant_item.
     */
    data: XOR<Variant_itemCreateInput, Variant_itemUncheckedCreateInput>
  }

  /**
   * Variant_item createMany
   */
  export type Variant_itemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Variant_items.
     */
    data: Variant_itemCreateManyInput | Variant_itemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Variant_item update
   */
  export type Variant_itemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variant_item
     */
    select?: Variant_itemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Variant_item
     */
    omit?: Variant_itemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Variant_itemInclude<ExtArgs> | null
    /**
     * The data needed to update a Variant_item.
     */
    data: XOR<Variant_itemUpdateInput, Variant_itemUncheckedUpdateInput>
    /**
     * Choose, which Variant_item to update.
     */
    where: Variant_itemWhereUniqueInput
  }

  /**
   * Variant_item updateMany
   */
  export type Variant_itemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Variant_items.
     */
    data: XOR<Variant_itemUpdateManyMutationInput, Variant_itemUncheckedUpdateManyInput>
    /**
     * Filter which Variant_items to update
     */
    where?: Variant_itemWhereInput
    /**
     * Limit how many Variant_items to update.
     */
    limit?: number
  }

  /**
   * Variant_item upsert
   */
  export type Variant_itemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variant_item
     */
    select?: Variant_itemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Variant_item
     */
    omit?: Variant_itemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Variant_itemInclude<ExtArgs> | null
    /**
     * The filter to search for the Variant_item to update in case it exists.
     */
    where: Variant_itemWhereUniqueInput
    /**
     * In case the Variant_item found by the `where` argument doesn't exist, create a new Variant_item with this data.
     */
    create: XOR<Variant_itemCreateInput, Variant_itemUncheckedCreateInput>
    /**
     * In case the Variant_item was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Variant_itemUpdateInput, Variant_itemUncheckedUpdateInput>
  }

  /**
   * Variant_item delete
   */
  export type Variant_itemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variant_item
     */
    select?: Variant_itemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Variant_item
     */
    omit?: Variant_itemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Variant_itemInclude<ExtArgs> | null
    /**
     * Filter which Variant_item to delete.
     */
    where: Variant_itemWhereUniqueInput
  }

  /**
   * Variant_item deleteMany
   */
  export type Variant_itemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Variant_items to delete
     */
    where?: Variant_itemWhereInput
    /**
     * Limit how many Variant_items to delete.
     */
    limit?: number
  }

  /**
   * Variant_item without action
   */
  export type Variant_itemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variant_item
     */
    select?: Variant_itemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Variant_item
     */
    omit?: Variant_itemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Variant_itemInclude<ExtArgs> | null
  }


  /**
   * Model Order
   */

  export type AggregateOrder = {
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  export type OrderAvgAggregateOutputType = {
    id_subd: number | null
    id_city: number | null
    id_prov: number | null
    shipping_cost: Decimal | null
  }

  export type OrderSumAggregateOutputType = {
    id_subd: number | null
    id_city: number | null
    id_prov: number | null
    shipping_cost: Decimal | null
  }

  export type OrderMinAggregateOutputType = {
    id: string | null
    id_user: string | null
    name_user: string | null
    id_merchant: string | null
    name_merchant: string | null
    id_courier: string | null
    name_courier: string | null
    destination: string | null
    id_subd: number | null
    name_subd: string | null
    id_city: number | null
    name_city: string | null
    id_prov: number | null
    name_prov: string | null
    shipping_cost: Decimal | null
    created_at: Date | null
    update_at: Date | null
  }

  export type OrderMaxAggregateOutputType = {
    id: string | null
    id_user: string | null
    name_user: string | null
    id_merchant: string | null
    name_merchant: string | null
    id_courier: string | null
    name_courier: string | null
    destination: string | null
    id_subd: number | null
    name_subd: string | null
    id_city: number | null
    name_city: string | null
    id_prov: number | null
    name_prov: string | null
    shipping_cost: Decimal | null
    created_at: Date | null
    update_at: Date | null
  }

  export type OrderCountAggregateOutputType = {
    id: number
    id_user: number
    name_user: number
    id_merchant: number
    name_merchant: number
    id_courier: number
    name_courier: number
    destination: number
    id_subd: number
    name_subd: number
    id_city: number
    name_city: number
    id_prov: number
    name_prov: number
    shipping_cost: number
    created_at: number
    update_at: number
    _all: number
  }


  export type OrderAvgAggregateInputType = {
    id_subd?: true
    id_city?: true
    id_prov?: true
    shipping_cost?: true
  }

  export type OrderSumAggregateInputType = {
    id_subd?: true
    id_city?: true
    id_prov?: true
    shipping_cost?: true
  }

  export type OrderMinAggregateInputType = {
    id?: true
    id_user?: true
    name_user?: true
    id_merchant?: true
    name_merchant?: true
    id_courier?: true
    name_courier?: true
    destination?: true
    id_subd?: true
    name_subd?: true
    id_city?: true
    name_city?: true
    id_prov?: true
    name_prov?: true
    shipping_cost?: true
    created_at?: true
    update_at?: true
  }

  export type OrderMaxAggregateInputType = {
    id?: true
    id_user?: true
    name_user?: true
    id_merchant?: true
    name_merchant?: true
    id_courier?: true
    name_courier?: true
    destination?: true
    id_subd?: true
    name_subd?: true
    id_city?: true
    name_city?: true
    id_prov?: true
    name_prov?: true
    shipping_cost?: true
    created_at?: true
    update_at?: true
  }

  export type OrderCountAggregateInputType = {
    id?: true
    id_user?: true
    name_user?: true
    id_merchant?: true
    name_merchant?: true
    id_courier?: true
    name_courier?: true
    destination?: true
    id_subd?: true
    name_subd?: true
    id_city?: true
    name_city?: true
    id_prov?: true
    name_prov?: true
    shipping_cost?: true
    created_at?: true
    update_at?: true
    _all?: true
  }

  export type OrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Order to aggregate.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Orders
    **/
    _count?: true | OrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderMaxAggregateInputType
  }

  export type GetOrderAggregateType<T extends OrderAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder[P]>
      : GetScalarType<T[P], AggregateOrder[P]>
  }




  export type OrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithAggregationInput | OrderOrderByWithAggregationInput[]
    by: OrderScalarFieldEnum[] | OrderScalarFieldEnum
    having?: OrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderCountAggregateInputType | true
    _avg?: OrderAvgAggregateInputType
    _sum?: OrderSumAggregateInputType
    _min?: OrderMinAggregateInputType
    _max?: OrderMaxAggregateInputType
  }

  export type OrderGroupByOutputType = {
    id: string
    id_user: string
    name_user: string
    id_merchant: string
    name_merchant: string
    id_courier: string
    name_courier: string
    destination: string
    id_subd: number
    name_subd: string
    id_city: number
    name_city: string
    id_prov: number
    name_prov: string
    shipping_cost: Decimal
    created_at: Date
    update_at: Date | null
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  type GetOrderGroupByPayload<T extends OrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderGroupByOutputType[P]>
            : GetScalarType<T[P], OrderGroupByOutputType[P]>
        }
      >
    >


  export type OrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_user?: boolean
    name_user?: boolean
    id_merchant?: boolean
    name_merchant?: boolean
    id_courier?: boolean
    name_courier?: boolean
    destination?: boolean
    id_subd?: boolean
    name_subd?: boolean
    id_city?: boolean
    name_city?: boolean
    id_prov?: boolean
    name_prov?: boolean
    shipping_cost?: boolean
    created_at?: boolean
    update_at?: boolean
    rel_order_item?: boolean | Order$rel_order_itemArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>



  export type OrderSelectScalar = {
    id?: boolean
    id_user?: boolean
    name_user?: boolean
    id_merchant?: boolean
    name_merchant?: boolean
    id_courier?: boolean
    name_courier?: boolean
    destination?: boolean
    id_subd?: boolean
    name_subd?: boolean
    id_city?: boolean
    name_city?: boolean
    id_prov?: boolean
    name_prov?: boolean
    shipping_cost?: boolean
    created_at?: boolean
    update_at?: boolean
  }

  export type OrderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "id_user" | "name_user" | "id_merchant" | "name_merchant" | "id_courier" | "name_courier" | "destination" | "id_subd" | "name_subd" | "id_city" | "name_city" | "id_prov" | "name_prov" | "shipping_cost" | "created_at" | "update_at", ExtArgs["result"]["order"]>
  export type OrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rel_order_item?: boolean | Order$rel_order_itemArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $OrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Order"
    objects: {
      rel_order_item: Prisma.$Order_itemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      id_user: string
      name_user: string
      id_merchant: string
      name_merchant: string
      id_courier: string
      name_courier: string
      destination: string
      id_subd: number
      name_subd: string
      id_city: number
      name_city: string
      id_prov: number
      name_prov: string
      shipping_cost: Prisma.Decimal
      created_at: Date
      update_at: Date | null
    }, ExtArgs["result"]["order"]>
    composites: {}
  }

  type OrderGetPayload<S extends boolean | null | undefined | OrderDefaultArgs> = $Result.GetResult<Prisma.$OrderPayload, S>

  type OrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderCountAggregateInputType | true
    }

  export interface OrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Order'], meta: { name: 'Order' } }
    /**
     * Find zero or one Order that matches the filter.
     * @param {OrderFindUniqueArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderFindUniqueArgs>(args: SelectSubset<T, OrderFindUniqueArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Order that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderFindUniqueOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderFindFirstArgs>(args?: SelectSubset<T, OrderFindFirstArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Order that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.order.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.order.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderWithIdOnly = await prisma.order.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderFindManyArgs>(args?: SelectSubset<T, OrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Order.
     * @param {OrderCreateArgs} args - Arguments to create a Order.
     * @example
     * // Create one Order
     * const Order = await prisma.order.create({
     *   data: {
     *     // ... data to create a Order
     *   }
     * })
     * 
     */
    create<T extends OrderCreateArgs>(args: SelectSubset<T, OrderCreateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Orders.
     * @param {OrderCreateManyArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderCreateManyArgs>(args?: SelectSubset<T, OrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Order.
     * @param {OrderDeleteArgs} args - Arguments to delete one Order.
     * @example
     * // Delete one Order
     * const Order = await prisma.order.delete({
     *   where: {
     *     // ... filter to delete one Order
     *   }
     * })
     * 
     */
    delete<T extends OrderDeleteArgs>(args: SelectSubset<T, OrderDeleteArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Order.
     * @param {OrderUpdateArgs} args - Arguments to update one Order.
     * @example
     * // Update one Order
     * const order = await prisma.order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderUpdateArgs>(args: SelectSubset<T, OrderUpdateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Orders.
     * @param {OrderDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderDeleteManyArgs>(args?: SelectSubset<T, OrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderUpdateManyArgs>(args: SelectSubset<T, OrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Order.
     * @param {OrderUpsertArgs} args - Arguments to update or create a Order.
     * @example
     * // Update or create a Order
     * const order = await prisma.order.upsert({
     *   create: {
     *     // ... data to create a Order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order we want to update
     *   }
     * })
     */
    upsert<T extends OrderUpsertArgs>(args: SelectSubset<T, OrderUpsertArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.order.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends OrderCountArgs>(
      args?: Subset<T, OrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderAggregateArgs>(args: Subset<T, OrderAggregateArgs>): Prisma.PrismaPromise<GetOrderAggregateType<T>>

    /**
     * Group by Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderGroupByArgs['orderBy'] }
        : { orderBy?: OrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Order model
   */
  readonly fields: OrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rel_order_item<T extends Order$rel_order_itemArgs<ExtArgs> = {}>(args?: Subset<T, Order$rel_order_itemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Order_itemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Order model
   */
  interface OrderFieldRefs {
    readonly id: FieldRef<"Order", 'String'>
    readonly id_user: FieldRef<"Order", 'String'>
    readonly name_user: FieldRef<"Order", 'String'>
    readonly id_merchant: FieldRef<"Order", 'String'>
    readonly name_merchant: FieldRef<"Order", 'String'>
    readonly id_courier: FieldRef<"Order", 'String'>
    readonly name_courier: FieldRef<"Order", 'String'>
    readonly destination: FieldRef<"Order", 'String'>
    readonly id_subd: FieldRef<"Order", 'Int'>
    readonly name_subd: FieldRef<"Order", 'String'>
    readonly id_city: FieldRef<"Order", 'Int'>
    readonly name_city: FieldRef<"Order", 'String'>
    readonly id_prov: FieldRef<"Order", 'Int'>
    readonly name_prov: FieldRef<"Order", 'String'>
    readonly shipping_cost: FieldRef<"Order", 'Decimal'>
    readonly created_at: FieldRef<"Order", 'DateTime'>
    readonly update_at: FieldRef<"Order", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Order findUnique
   */
  export type OrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findUniqueOrThrow
   */
  export type OrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findFirst
   */
  export type OrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findFirstOrThrow
   */
  export type OrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findMany
   */
  export type OrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Orders to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order create
   */
  export type OrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to create a Order.
     */
    data: XOR<OrderCreateInput, OrderUncheckedCreateInput>
  }

  /**
   * Order createMany
   */
  export type OrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Order update
   */
  export type OrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to update a Order.
     */
    data: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
    /**
     * Choose, which Order to update.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order updateMany
   */
  export type OrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to update.
     */
    limit?: number
  }

  /**
   * Order upsert
   */
  export type OrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The filter to search for the Order to update in case it exists.
     */
    where: OrderWhereUniqueInput
    /**
     * In case the Order found by the `where` argument doesn't exist, create a new Order with this data.
     */
    create: XOR<OrderCreateInput, OrderUncheckedCreateInput>
    /**
     * In case the Order was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
  }

  /**
   * Order delete
   */
  export type OrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter which Order to delete.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order deleteMany
   */
  export type OrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Orders to delete
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to delete.
     */
    limit?: number
  }

  /**
   * Order.rel_order_item
   */
  export type Order$rel_order_itemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order_item
     */
    select?: Order_itemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order_item
     */
    omit?: Order_itemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Order_itemInclude<ExtArgs> | null
    where?: Order_itemWhereInput
    orderBy?: Order_itemOrderByWithRelationInput | Order_itemOrderByWithRelationInput[]
    cursor?: Order_itemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Order_itemScalarFieldEnum | Order_itemScalarFieldEnum[]
  }

  /**
   * Order without action
   */
  export type OrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
  }


  /**
   * Model Order_item
   */

  export type AggregateOrder_item = {
    _count: Order_itemCountAggregateOutputType | null
    _avg: Order_itemAvgAggregateOutputType | null
    _sum: Order_itemSumAggregateOutputType | null
    _min: Order_itemMinAggregateOutputType | null
    _max: Order_itemMaxAggregateOutputType | null
  }

  export type Order_itemAvgAggregateOutputType = {
    qty: number | null
    price: Decimal | null
  }

  export type Order_itemSumAggregateOutputType = {
    qty: number | null
    price: Decimal | null
  }

  export type Order_itemMinAggregateOutputType = {
    id: string | null
    id_menu: string | null
    name_menu: string | null
    id_variant: string | null
    name_variant: string | null
    qty: number | null
    note: string | null
    price: Decimal | null
    id_order: string | null
    created_at: Date | null
    update_at: Date | null
  }

  export type Order_itemMaxAggregateOutputType = {
    id: string | null
    id_menu: string | null
    name_menu: string | null
    id_variant: string | null
    name_variant: string | null
    qty: number | null
    note: string | null
    price: Decimal | null
    id_order: string | null
    created_at: Date | null
    update_at: Date | null
  }

  export type Order_itemCountAggregateOutputType = {
    id: number
    id_menu: number
    name_menu: number
    id_variant: number
    name_variant: number
    qty: number
    note: number
    price: number
    id_order: number
    created_at: number
    update_at: number
    _all: number
  }


  export type Order_itemAvgAggregateInputType = {
    qty?: true
    price?: true
  }

  export type Order_itemSumAggregateInputType = {
    qty?: true
    price?: true
  }

  export type Order_itemMinAggregateInputType = {
    id?: true
    id_menu?: true
    name_menu?: true
    id_variant?: true
    name_variant?: true
    qty?: true
    note?: true
    price?: true
    id_order?: true
    created_at?: true
    update_at?: true
  }

  export type Order_itemMaxAggregateInputType = {
    id?: true
    id_menu?: true
    name_menu?: true
    id_variant?: true
    name_variant?: true
    qty?: true
    note?: true
    price?: true
    id_order?: true
    created_at?: true
    update_at?: true
  }

  export type Order_itemCountAggregateInputType = {
    id?: true
    id_menu?: true
    name_menu?: true
    id_variant?: true
    name_variant?: true
    qty?: true
    note?: true
    price?: true
    id_order?: true
    created_at?: true
    update_at?: true
    _all?: true
  }

  export type Order_itemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Order_item to aggregate.
     */
    where?: Order_itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Order_items to fetch.
     */
    orderBy?: Order_itemOrderByWithRelationInput | Order_itemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Order_itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Order_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Order_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Order_items
    **/
    _count?: true | Order_itemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Order_itemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Order_itemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Order_itemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Order_itemMaxAggregateInputType
  }

  export type GetOrder_itemAggregateType<T extends Order_itemAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder_item]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder_item[P]>
      : GetScalarType<T[P], AggregateOrder_item[P]>
  }




  export type Order_itemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Order_itemWhereInput
    orderBy?: Order_itemOrderByWithAggregationInput | Order_itemOrderByWithAggregationInput[]
    by: Order_itemScalarFieldEnum[] | Order_itemScalarFieldEnum
    having?: Order_itemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Order_itemCountAggregateInputType | true
    _avg?: Order_itemAvgAggregateInputType
    _sum?: Order_itemSumAggregateInputType
    _min?: Order_itemMinAggregateInputType
    _max?: Order_itemMaxAggregateInputType
  }

  export type Order_itemGroupByOutputType = {
    id: string
    id_menu: string
    name_menu: string
    id_variant: string
    name_variant: string
    qty: number
    note: string
    price: Decimal
    id_order: string
    created_at: Date
    update_at: Date | null
    _count: Order_itemCountAggregateOutputType | null
    _avg: Order_itemAvgAggregateOutputType | null
    _sum: Order_itemSumAggregateOutputType | null
    _min: Order_itemMinAggregateOutputType | null
    _max: Order_itemMaxAggregateOutputType | null
  }

  type GetOrder_itemGroupByPayload<T extends Order_itemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Order_itemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Order_itemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Order_itemGroupByOutputType[P]>
            : GetScalarType<T[P], Order_itemGroupByOutputType[P]>
        }
      >
    >


  export type Order_itemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_menu?: boolean
    name_menu?: boolean
    id_variant?: boolean
    name_variant?: boolean
    qty?: boolean
    note?: boolean
    price?: boolean
    id_order?: boolean
    created_at?: boolean
    update_at?: boolean
    rel_order?: boolean | OrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order_item"]>



  export type Order_itemSelectScalar = {
    id?: boolean
    id_menu?: boolean
    name_menu?: boolean
    id_variant?: boolean
    name_variant?: boolean
    qty?: boolean
    note?: boolean
    price?: boolean
    id_order?: boolean
    created_at?: boolean
    update_at?: boolean
  }

  export type Order_itemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "id_menu" | "name_menu" | "id_variant" | "name_variant" | "qty" | "note" | "price" | "id_order" | "created_at" | "update_at", ExtArgs["result"]["order_item"]>
  export type Order_itemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rel_order?: boolean | OrderDefaultArgs<ExtArgs>
  }

  export type $Order_itemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Order_item"
    objects: {
      rel_order: Prisma.$OrderPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      id_menu: string
      name_menu: string
      id_variant: string
      name_variant: string
      qty: number
      note: string
      price: Prisma.Decimal
      id_order: string
      created_at: Date
      update_at: Date | null
    }, ExtArgs["result"]["order_item"]>
    composites: {}
  }

  type Order_itemGetPayload<S extends boolean | null | undefined | Order_itemDefaultArgs> = $Result.GetResult<Prisma.$Order_itemPayload, S>

  type Order_itemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<Order_itemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Order_itemCountAggregateInputType | true
    }

  export interface Order_itemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Order_item'], meta: { name: 'Order_item' } }
    /**
     * Find zero or one Order_item that matches the filter.
     * @param {Order_itemFindUniqueArgs} args - Arguments to find a Order_item
     * @example
     * // Get one Order_item
     * const order_item = await prisma.order_item.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends Order_itemFindUniqueArgs>(args: SelectSubset<T, Order_itemFindUniqueArgs<ExtArgs>>): Prisma__Order_itemClient<$Result.GetResult<Prisma.$Order_itemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Order_item that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {Order_itemFindUniqueOrThrowArgs} args - Arguments to find a Order_item
     * @example
     * // Get one Order_item
     * const order_item = await prisma.order_item.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends Order_itemFindUniqueOrThrowArgs>(args: SelectSubset<T, Order_itemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__Order_itemClient<$Result.GetResult<Prisma.$Order_itemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Order_item that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Order_itemFindFirstArgs} args - Arguments to find a Order_item
     * @example
     * // Get one Order_item
     * const order_item = await prisma.order_item.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends Order_itemFindFirstArgs>(args?: SelectSubset<T, Order_itemFindFirstArgs<ExtArgs>>): Prisma__Order_itemClient<$Result.GetResult<Prisma.$Order_itemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Order_item that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Order_itemFindFirstOrThrowArgs} args - Arguments to find a Order_item
     * @example
     * // Get one Order_item
     * const order_item = await prisma.order_item.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends Order_itemFindFirstOrThrowArgs>(args?: SelectSubset<T, Order_itemFindFirstOrThrowArgs<ExtArgs>>): Prisma__Order_itemClient<$Result.GetResult<Prisma.$Order_itemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Order_items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Order_itemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Order_items
     * const order_items = await prisma.order_item.findMany()
     * 
     * // Get first 10 Order_items
     * const order_items = await prisma.order_item.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const order_itemWithIdOnly = await prisma.order_item.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends Order_itemFindManyArgs>(args?: SelectSubset<T, Order_itemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Order_itemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Order_item.
     * @param {Order_itemCreateArgs} args - Arguments to create a Order_item.
     * @example
     * // Create one Order_item
     * const Order_item = await prisma.order_item.create({
     *   data: {
     *     // ... data to create a Order_item
     *   }
     * })
     * 
     */
    create<T extends Order_itemCreateArgs>(args: SelectSubset<T, Order_itemCreateArgs<ExtArgs>>): Prisma__Order_itemClient<$Result.GetResult<Prisma.$Order_itemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Order_items.
     * @param {Order_itemCreateManyArgs} args - Arguments to create many Order_items.
     * @example
     * // Create many Order_items
     * const order_item = await prisma.order_item.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends Order_itemCreateManyArgs>(args?: SelectSubset<T, Order_itemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Order_item.
     * @param {Order_itemDeleteArgs} args - Arguments to delete one Order_item.
     * @example
     * // Delete one Order_item
     * const Order_item = await prisma.order_item.delete({
     *   where: {
     *     // ... filter to delete one Order_item
     *   }
     * })
     * 
     */
    delete<T extends Order_itemDeleteArgs>(args: SelectSubset<T, Order_itemDeleteArgs<ExtArgs>>): Prisma__Order_itemClient<$Result.GetResult<Prisma.$Order_itemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Order_item.
     * @param {Order_itemUpdateArgs} args - Arguments to update one Order_item.
     * @example
     * // Update one Order_item
     * const order_item = await prisma.order_item.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends Order_itemUpdateArgs>(args: SelectSubset<T, Order_itemUpdateArgs<ExtArgs>>): Prisma__Order_itemClient<$Result.GetResult<Prisma.$Order_itemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Order_items.
     * @param {Order_itemDeleteManyArgs} args - Arguments to filter Order_items to delete.
     * @example
     * // Delete a few Order_items
     * const { count } = await prisma.order_item.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends Order_itemDeleteManyArgs>(args?: SelectSubset<T, Order_itemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Order_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Order_itemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Order_items
     * const order_item = await prisma.order_item.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends Order_itemUpdateManyArgs>(args: SelectSubset<T, Order_itemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Order_item.
     * @param {Order_itemUpsertArgs} args - Arguments to update or create a Order_item.
     * @example
     * // Update or create a Order_item
     * const order_item = await prisma.order_item.upsert({
     *   create: {
     *     // ... data to create a Order_item
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order_item we want to update
     *   }
     * })
     */
    upsert<T extends Order_itemUpsertArgs>(args: SelectSubset<T, Order_itemUpsertArgs<ExtArgs>>): Prisma__Order_itemClient<$Result.GetResult<Prisma.$Order_itemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Order_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Order_itemCountArgs} args - Arguments to filter Order_items to count.
     * @example
     * // Count the number of Order_items
     * const count = await prisma.order_item.count({
     *   where: {
     *     // ... the filter for the Order_items we want to count
     *   }
     * })
    **/
    count<T extends Order_itemCountArgs>(
      args?: Subset<T, Order_itemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Order_itemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order_item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Order_itemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Order_itemAggregateArgs>(args: Subset<T, Order_itemAggregateArgs>): Prisma.PrismaPromise<GetOrder_itemAggregateType<T>>

    /**
     * Group by Order_item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Order_itemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Order_itemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Order_itemGroupByArgs['orderBy'] }
        : { orderBy?: Order_itemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Order_itemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrder_itemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Order_item model
   */
  readonly fields: Order_itemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Order_item.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Order_itemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rel_order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Order_item model
   */
  interface Order_itemFieldRefs {
    readonly id: FieldRef<"Order_item", 'String'>
    readonly id_menu: FieldRef<"Order_item", 'String'>
    readonly name_menu: FieldRef<"Order_item", 'String'>
    readonly id_variant: FieldRef<"Order_item", 'String'>
    readonly name_variant: FieldRef<"Order_item", 'String'>
    readonly qty: FieldRef<"Order_item", 'Int'>
    readonly note: FieldRef<"Order_item", 'String'>
    readonly price: FieldRef<"Order_item", 'Decimal'>
    readonly id_order: FieldRef<"Order_item", 'String'>
    readonly created_at: FieldRef<"Order_item", 'DateTime'>
    readonly update_at: FieldRef<"Order_item", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Order_item findUnique
   */
  export type Order_itemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order_item
     */
    select?: Order_itemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order_item
     */
    omit?: Order_itemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Order_itemInclude<ExtArgs> | null
    /**
     * Filter, which Order_item to fetch.
     */
    where: Order_itemWhereUniqueInput
  }

  /**
   * Order_item findUniqueOrThrow
   */
  export type Order_itemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order_item
     */
    select?: Order_itemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order_item
     */
    omit?: Order_itemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Order_itemInclude<ExtArgs> | null
    /**
     * Filter, which Order_item to fetch.
     */
    where: Order_itemWhereUniqueInput
  }

  /**
   * Order_item findFirst
   */
  export type Order_itemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order_item
     */
    select?: Order_itemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order_item
     */
    omit?: Order_itemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Order_itemInclude<ExtArgs> | null
    /**
     * Filter, which Order_item to fetch.
     */
    where?: Order_itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Order_items to fetch.
     */
    orderBy?: Order_itemOrderByWithRelationInput | Order_itemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Order_items.
     */
    cursor?: Order_itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Order_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Order_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Order_items.
     */
    distinct?: Order_itemScalarFieldEnum | Order_itemScalarFieldEnum[]
  }

  /**
   * Order_item findFirstOrThrow
   */
  export type Order_itemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order_item
     */
    select?: Order_itemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order_item
     */
    omit?: Order_itemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Order_itemInclude<ExtArgs> | null
    /**
     * Filter, which Order_item to fetch.
     */
    where?: Order_itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Order_items to fetch.
     */
    orderBy?: Order_itemOrderByWithRelationInput | Order_itemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Order_items.
     */
    cursor?: Order_itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Order_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Order_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Order_items.
     */
    distinct?: Order_itemScalarFieldEnum | Order_itemScalarFieldEnum[]
  }

  /**
   * Order_item findMany
   */
  export type Order_itemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order_item
     */
    select?: Order_itemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order_item
     */
    omit?: Order_itemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Order_itemInclude<ExtArgs> | null
    /**
     * Filter, which Order_items to fetch.
     */
    where?: Order_itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Order_items to fetch.
     */
    orderBy?: Order_itemOrderByWithRelationInput | Order_itemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Order_items.
     */
    cursor?: Order_itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Order_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Order_items.
     */
    skip?: number
    distinct?: Order_itemScalarFieldEnum | Order_itemScalarFieldEnum[]
  }

  /**
   * Order_item create
   */
  export type Order_itemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order_item
     */
    select?: Order_itemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order_item
     */
    omit?: Order_itemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Order_itemInclude<ExtArgs> | null
    /**
     * The data needed to create a Order_item.
     */
    data: XOR<Order_itemCreateInput, Order_itemUncheckedCreateInput>
  }

  /**
   * Order_item createMany
   */
  export type Order_itemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Order_items.
     */
    data: Order_itemCreateManyInput | Order_itemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Order_item update
   */
  export type Order_itemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order_item
     */
    select?: Order_itemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order_item
     */
    omit?: Order_itemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Order_itemInclude<ExtArgs> | null
    /**
     * The data needed to update a Order_item.
     */
    data: XOR<Order_itemUpdateInput, Order_itemUncheckedUpdateInput>
    /**
     * Choose, which Order_item to update.
     */
    where: Order_itemWhereUniqueInput
  }

  /**
   * Order_item updateMany
   */
  export type Order_itemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Order_items.
     */
    data: XOR<Order_itemUpdateManyMutationInput, Order_itemUncheckedUpdateManyInput>
    /**
     * Filter which Order_items to update
     */
    where?: Order_itemWhereInput
    /**
     * Limit how many Order_items to update.
     */
    limit?: number
  }

  /**
   * Order_item upsert
   */
  export type Order_itemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order_item
     */
    select?: Order_itemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order_item
     */
    omit?: Order_itemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Order_itemInclude<ExtArgs> | null
    /**
     * The filter to search for the Order_item to update in case it exists.
     */
    where: Order_itemWhereUniqueInput
    /**
     * In case the Order_item found by the `where` argument doesn't exist, create a new Order_item with this data.
     */
    create: XOR<Order_itemCreateInput, Order_itemUncheckedCreateInput>
    /**
     * In case the Order_item was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Order_itemUpdateInput, Order_itemUncheckedUpdateInput>
  }

  /**
   * Order_item delete
   */
  export type Order_itemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order_item
     */
    select?: Order_itemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order_item
     */
    omit?: Order_itemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Order_itemInclude<ExtArgs> | null
    /**
     * Filter which Order_item to delete.
     */
    where: Order_itemWhereUniqueInput
  }

  /**
   * Order_item deleteMany
   */
  export type Order_itemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Order_items to delete
     */
    where?: Order_itemWhereInput
    /**
     * Limit how many Order_items to delete.
     */
    limit?: number
  }

  /**
   * Order_item without action
   */
  export type Order_itemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order_item
     */
    select?: Order_itemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order_item
     */
    omit?: Order_itemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Order_itemInclude<ExtArgs> | null
  }


  /**
   * Model Log_order
   */

  export type AggregateLog_order = {
    _count: Log_orderCountAggregateOutputType | null
    _avg: Log_orderAvgAggregateOutputType | null
    _sum: Log_orderSumAggregateOutputType | null
    _min: Log_orderMinAggregateOutputType | null
    _max: Log_orderMaxAggregateOutputType | null
  }

  export type Log_orderAvgAggregateOutputType = {
    id: number | null
    id_status: number | null
  }

  export type Log_orderSumAggregateOutputType = {
    id: number | null
    id_status: number | null
  }

  export type Log_orderMinAggregateOutputType = {
    id: number | null
    id_order: string | null
    id_status: number | null
    detail_status: string | null
    change_by: string | null
    id_changer: string | null
    time: Date | null
  }

  export type Log_orderMaxAggregateOutputType = {
    id: number | null
    id_order: string | null
    id_status: number | null
    detail_status: string | null
    change_by: string | null
    id_changer: string | null
    time: Date | null
  }

  export type Log_orderCountAggregateOutputType = {
    id: number
    id_order: number
    id_status: number
    detail_status: number
    change_by: number
    id_changer: number
    time: number
    _all: number
  }


  export type Log_orderAvgAggregateInputType = {
    id?: true
    id_status?: true
  }

  export type Log_orderSumAggregateInputType = {
    id?: true
    id_status?: true
  }

  export type Log_orderMinAggregateInputType = {
    id?: true
    id_order?: true
    id_status?: true
    detail_status?: true
    change_by?: true
    id_changer?: true
    time?: true
  }

  export type Log_orderMaxAggregateInputType = {
    id?: true
    id_order?: true
    id_status?: true
    detail_status?: true
    change_by?: true
    id_changer?: true
    time?: true
  }

  export type Log_orderCountAggregateInputType = {
    id?: true
    id_order?: true
    id_status?: true
    detail_status?: true
    change_by?: true
    id_changer?: true
    time?: true
    _all?: true
  }

  export type Log_orderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Log_order to aggregate.
     */
    where?: Log_orderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Log_orders to fetch.
     */
    orderBy?: Log_orderOrderByWithRelationInput | Log_orderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Log_orderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Log_orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Log_orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Log_orders
    **/
    _count?: true | Log_orderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Log_orderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Log_orderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Log_orderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Log_orderMaxAggregateInputType
  }

  export type GetLog_orderAggregateType<T extends Log_orderAggregateArgs> = {
        [P in keyof T & keyof AggregateLog_order]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLog_order[P]>
      : GetScalarType<T[P], AggregateLog_order[P]>
  }




  export type Log_orderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Log_orderWhereInput
    orderBy?: Log_orderOrderByWithAggregationInput | Log_orderOrderByWithAggregationInput[]
    by: Log_orderScalarFieldEnum[] | Log_orderScalarFieldEnum
    having?: Log_orderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Log_orderCountAggregateInputType | true
    _avg?: Log_orderAvgAggregateInputType
    _sum?: Log_orderSumAggregateInputType
    _min?: Log_orderMinAggregateInputType
    _max?: Log_orderMaxAggregateInputType
  }

  export type Log_orderGroupByOutputType = {
    id: number
    id_order: string
    id_status: number
    detail_status: string
    change_by: string
    id_changer: string
    time: Date
    _count: Log_orderCountAggregateOutputType | null
    _avg: Log_orderAvgAggregateOutputType | null
    _sum: Log_orderSumAggregateOutputType | null
    _min: Log_orderMinAggregateOutputType | null
    _max: Log_orderMaxAggregateOutputType | null
  }

  type GetLog_orderGroupByPayload<T extends Log_orderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Log_orderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Log_orderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Log_orderGroupByOutputType[P]>
            : GetScalarType<T[P], Log_orderGroupByOutputType[P]>
        }
      >
    >


  export type Log_orderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_order?: boolean
    id_status?: boolean
    detail_status?: boolean
    change_by?: boolean
    id_changer?: boolean
    time?: boolean
    rel_status?: boolean | Status_orderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["log_order"]>



  export type Log_orderSelectScalar = {
    id?: boolean
    id_order?: boolean
    id_status?: boolean
    detail_status?: boolean
    change_by?: boolean
    id_changer?: boolean
    time?: boolean
  }

  export type Log_orderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "id_order" | "id_status" | "detail_status" | "change_by" | "id_changer" | "time", ExtArgs["result"]["log_order"]>
  export type Log_orderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rel_status?: boolean | Status_orderDefaultArgs<ExtArgs>
  }

  export type $Log_orderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Log_order"
    objects: {
      rel_status: Prisma.$Status_orderPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      id_order: string
      id_status: number
      detail_status: string
      change_by: string
      id_changer: string
      time: Date
    }, ExtArgs["result"]["log_order"]>
    composites: {}
  }

  type Log_orderGetPayload<S extends boolean | null | undefined | Log_orderDefaultArgs> = $Result.GetResult<Prisma.$Log_orderPayload, S>

  type Log_orderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<Log_orderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Log_orderCountAggregateInputType | true
    }

  export interface Log_orderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Log_order'], meta: { name: 'Log_order' } }
    /**
     * Find zero or one Log_order that matches the filter.
     * @param {Log_orderFindUniqueArgs} args - Arguments to find a Log_order
     * @example
     * // Get one Log_order
     * const log_order = await prisma.log_order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends Log_orderFindUniqueArgs>(args: SelectSubset<T, Log_orderFindUniqueArgs<ExtArgs>>): Prisma__Log_orderClient<$Result.GetResult<Prisma.$Log_orderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Log_order that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {Log_orderFindUniqueOrThrowArgs} args - Arguments to find a Log_order
     * @example
     * // Get one Log_order
     * const log_order = await prisma.log_order.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends Log_orderFindUniqueOrThrowArgs>(args: SelectSubset<T, Log_orderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__Log_orderClient<$Result.GetResult<Prisma.$Log_orderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Log_order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Log_orderFindFirstArgs} args - Arguments to find a Log_order
     * @example
     * // Get one Log_order
     * const log_order = await prisma.log_order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends Log_orderFindFirstArgs>(args?: SelectSubset<T, Log_orderFindFirstArgs<ExtArgs>>): Prisma__Log_orderClient<$Result.GetResult<Prisma.$Log_orderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Log_order that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Log_orderFindFirstOrThrowArgs} args - Arguments to find a Log_order
     * @example
     * // Get one Log_order
     * const log_order = await prisma.log_order.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends Log_orderFindFirstOrThrowArgs>(args?: SelectSubset<T, Log_orderFindFirstOrThrowArgs<ExtArgs>>): Prisma__Log_orderClient<$Result.GetResult<Prisma.$Log_orderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Log_orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Log_orderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Log_orders
     * const log_orders = await prisma.log_order.findMany()
     * 
     * // Get first 10 Log_orders
     * const log_orders = await prisma.log_order.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const log_orderWithIdOnly = await prisma.log_order.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends Log_orderFindManyArgs>(args?: SelectSubset<T, Log_orderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Log_orderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Log_order.
     * @param {Log_orderCreateArgs} args - Arguments to create a Log_order.
     * @example
     * // Create one Log_order
     * const Log_order = await prisma.log_order.create({
     *   data: {
     *     // ... data to create a Log_order
     *   }
     * })
     * 
     */
    create<T extends Log_orderCreateArgs>(args: SelectSubset<T, Log_orderCreateArgs<ExtArgs>>): Prisma__Log_orderClient<$Result.GetResult<Prisma.$Log_orderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Log_orders.
     * @param {Log_orderCreateManyArgs} args - Arguments to create many Log_orders.
     * @example
     * // Create many Log_orders
     * const log_order = await prisma.log_order.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends Log_orderCreateManyArgs>(args?: SelectSubset<T, Log_orderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Log_order.
     * @param {Log_orderDeleteArgs} args - Arguments to delete one Log_order.
     * @example
     * // Delete one Log_order
     * const Log_order = await prisma.log_order.delete({
     *   where: {
     *     // ... filter to delete one Log_order
     *   }
     * })
     * 
     */
    delete<T extends Log_orderDeleteArgs>(args: SelectSubset<T, Log_orderDeleteArgs<ExtArgs>>): Prisma__Log_orderClient<$Result.GetResult<Prisma.$Log_orderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Log_order.
     * @param {Log_orderUpdateArgs} args - Arguments to update one Log_order.
     * @example
     * // Update one Log_order
     * const log_order = await prisma.log_order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends Log_orderUpdateArgs>(args: SelectSubset<T, Log_orderUpdateArgs<ExtArgs>>): Prisma__Log_orderClient<$Result.GetResult<Prisma.$Log_orderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Log_orders.
     * @param {Log_orderDeleteManyArgs} args - Arguments to filter Log_orders to delete.
     * @example
     * // Delete a few Log_orders
     * const { count } = await prisma.log_order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends Log_orderDeleteManyArgs>(args?: SelectSubset<T, Log_orderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Log_orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Log_orderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Log_orders
     * const log_order = await prisma.log_order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends Log_orderUpdateManyArgs>(args: SelectSubset<T, Log_orderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Log_order.
     * @param {Log_orderUpsertArgs} args - Arguments to update or create a Log_order.
     * @example
     * // Update or create a Log_order
     * const log_order = await prisma.log_order.upsert({
     *   create: {
     *     // ... data to create a Log_order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Log_order we want to update
     *   }
     * })
     */
    upsert<T extends Log_orderUpsertArgs>(args: SelectSubset<T, Log_orderUpsertArgs<ExtArgs>>): Prisma__Log_orderClient<$Result.GetResult<Prisma.$Log_orderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Log_orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Log_orderCountArgs} args - Arguments to filter Log_orders to count.
     * @example
     * // Count the number of Log_orders
     * const count = await prisma.log_order.count({
     *   where: {
     *     // ... the filter for the Log_orders we want to count
     *   }
     * })
    **/
    count<T extends Log_orderCountArgs>(
      args?: Subset<T, Log_orderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Log_orderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Log_order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Log_orderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Log_orderAggregateArgs>(args: Subset<T, Log_orderAggregateArgs>): Prisma.PrismaPromise<GetLog_orderAggregateType<T>>

    /**
     * Group by Log_order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Log_orderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Log_orderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Log_orderGroupByArgs['orderBy'] }
        : { orderBy?: Log_orderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Log_orderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLog_orderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Log_order model
   */
  readonly fields: Log_orderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Log_order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Log_orderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rel_status<T extends Status_orderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, Status_orderDefaultArgs<ExtArgs>>): Prisma__Status_orderClient<$Result.GetResult<Prisma.$Status_orderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Log_order model
   */
  interface Log_orderFieldRefs {
    readonly id: FieldRef<"Log_order", 'Int'>
    readonly id_order: FieldRef<"Log_order", 'String'>
    readonly id_status: FieldRef<"Log_order", 'Int'>
    readonly detail_status: FieldRef<"Log_order", 'String'>
    readonly change_by: FieldRef<"Log_order", 'String'>
    readonly id_changer: FieldRef<"Log_order", 'String'>
    readonly time: FieldRef<"Log_order", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Log_order findUnique
   */
  export type Log_orderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log_order
     */
    select?: Log_orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log_order
     */
    omit?: Log_orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Log_orderInclude<ExtArgs> | null
    /**
     * Filter, which Log_order to fetch.
     */
    where: Log_orderWhereUniqueInput
  }

  /**
   * Log_order findUniqueOrThrow
   */
  export type Log_orderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log_order
     */
    select?: Log_orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log_order
     */
    omit?: Log_orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Log_orderInclude<ExtArgs> | null
    /**
     * Filter, which Log_order to fetch.
     */
    where: Log_orderWhereUniqueInput
  }

  /**
   * Log_order findFirst
   */
  export type Log_orderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log_order
     */
    select?: Log_orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log_order
     */
    omit?: Log_orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Log_orderInclude<ExtArgs> | null
    /**
     * Filter, which Log_order to fetch.
     */
    where?: Log_orderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Log_orders to fetch.
     */
    orderBy?: Log_orderOrderByWithRelationInput | Log_orderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Log_orders.
     */
    cursor?: Log_orderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Log_orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Log_orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Log_orders.
     */
    distinct?: Log_orderScalarFieldEnum | Log_orderScalarFieldEnum[]
  }

  /**
   * Log_order findFirstOrThrow
   */
  export type Log_orderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log_order
     */
    select?: Log_orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log_order
     */
    omit?: Log_orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Log_orderInclude<ExtArgs> | null
    /**
     * Filter, which Log_order to fetch.
     */
    where?: Log_orderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Log_orders to fetch.
     */
    orderBy?: Log_orderOrderByWithRelationInput | Log_orderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Log_orders.
     */
    cursor?: Log_orderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Log_orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Log_orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Log_orders.
     */
    distinct?: Log_orderScalarFieldEnum | Log_orderScalarFieldEnum[]
  }

  /**
   * Log_order findMany
   */
  export type Log_orderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log_order
     */
    select?: Log_orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log_order
     */
    omit?: Log_orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Log_orderInclude<ExtArgs> | null
    /**
     * Filter, which Log_orders to fetch.
     */
    where?: Log_orderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Log_orders to fetch.
     */
    orderBy?: Log_orderOrderByWithRelationInput | Log_orderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Log_orders.
     */
    cursor?: Log_orderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Log_orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Log_orders.
     */
    skip?: number
    distinct?: Log_orderScalarFieldEnum | Log_orderScalarFieldEnum[]
  }

  /**
   * Log_order create
   */
  export type Log_orderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log_order
     */
    select?: Log_orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log_order
     */
    omit?: Log_orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Log_orderInclude<ExtArgs> | null
    /**
     * The data needed to create a Log_order.
     */
    data: XOR<Log_orderCreateInput, Log_orderUncheckedCreateInput>
  }

  /**
   * Log_order createMany
   */
  export type Log_orderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Log_orders.
     */
    data: Log_orderCreateManyInput | Log_orderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Log_order update
   */
  export type Log_orderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log_order
     */
    select?: Log_orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log_order
     */
    omit?: Log_orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Log_orderInclude<ExtArgs> | null
    /**
     * The data needed to update a Log_order.
     */
    data: XOR<Log_orderUpdateInput, Log_orderUncheckedUpdateInput>
    /**
     * Choose, which Log_order to update.
     */
    where: Log_orderWhereUniqueInput
  }

  /**
   * Log_order updateMany
   */
  export type Log_orderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Log_orders.
     */
    data: XOR<Log_orderUpdateManyMutationInput, Log_orderUncheckedUpdateManyInput>
    /**
     * Filter which Log_orders to update
     */
    where?: Log_orderWhereInput
    /**
     * Limit how many Log_orders to update.
     */
    limit?: number
  }

  /**
   * Log_order upsert
   */
  export type Log_orderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log_order
     */
    select?: Log_orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log_order
     */
    omit?: Log_orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Log_orderInclude<ExtArgs> | null
    /**
     * The filter to search for the Log_order to update in case it exists.
     */
    where: Log_orderWhereUniqueInput
    /**
     * In case the Log_order found by the `where` argument doesn't exist, create a new Log_order with this data.
     */
    create: XOR<Log_orderCreateInput, Log_orderUncheckedCreateInput>
    /**
     * In case the Log_order was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Log_orderUpdateInput, Log_orderUncheckedUpdateInput>
  }

  /**
   * Log_order delete
   */
  export type Log_orderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log_order
     */
    select?: Log_orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log_order
     */
    omit?: Log_orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Log_orderInclude<ExtArgs> | null
    /**
     * Filter which Log_order to delete.
     */
    where: Log_orderWhereUniqueInput
  }

  /**
   * Log_order deleteMany
   */
  export type Log_orderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Log_orders to delete
     */
    where?: Log_orderWhereInput
    /**
     * Limit how many Log_orders to delete.
     */
    limit?: number
  }

  /**
   * Log_order without action
   */
  export type Log_orderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log_order
     */
    select?: Log_orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log_order
     */
    omit?: Log_orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Log_orderInclude<ExtArgs> | null
  }


  /**
   * Model History_order
   */

  export type AggregateHistory_order = {
    _count: History_orderCountAggregateOutputType | null
    _avg: History_orderAvgAggregateOutputType | null
    _sum: History_orderSumAggregateOutputType | null
    _min: History_orderMinAggregateOutputType | null
    _max: History_orderMaxAggregateOutputType | null
  }

  export type History_orderAvgAggregateOutputType = {
    id_subd: number | null
    id_city: number | null
    id_prov: number | null
    shipping_cost: Decimal | null
  }

  export type History_orderSumAggregateOutputType = {
    id_subd: number | null
    id_city: number | null
    id_prov: number | null
    shipping_cost: Decimal | null
  }

  export type History_orderMinAggregateOutputType = {
    id: string | null
    id_user: string | null
    name_user: string | null
    id_merchant: string | null
    name_merchant: string | null
    id_courier: string | null
    name_courier: string | null
    destination: string | null
    id_subd: number | null
    name_subd: string | null
    id_city: number | null
    name_city: string | null
    id_prov: number | null
    name_prov: string | null
    shipping_cost: Decimal | null
    created_at: Date | null
    update_at: Date | null
  }

  export type History_orderMaxAggregateOutputType = {
    id: string | null
    id_user: string | null
    name_user: string | null
    id_merchant: string | null
    name_merchant: string | null
    id_courier: string | null
    name_courier: string | null
    destination: string | null
    id_subd: number | null
    name_subd: string | null
    id_city: number | null
    name_city: string | null
    id_prov: number | null
    name_prov: string | null
    shipping_cost: Decimal | null
    created_at: Date | null
    update_at: Date | null
  }

  export type History_orderCountAggregateOutputType = {
    id: number
    id_user: number
    name_user: number
    id_merchant: number
    name_merchant: number
    id_courier: number
    name_courier: number
    destination: number
    id_subd: number
    name_subd: number
    id_city: number
    name_city: number
    id_prov: number
    name_prov: number
    shipping_cost: number
    created_at: number
    update_at: number
    _all: number
  }


  export type History_orderAvgAggregateInputType = {
    id_subd?: true
    id_city?: true
    id_prov?: true
    shipping_cost?: true
  }

  export type History_orderSumAggregateInputType = {
    id_subd?: true
    id_city?: true
    id_prov?: true
    shipping_cost?: true
  }

  export type History_orderMinAggregateInputType = {
    id?: true
    id_user?: true
    name_user?: true
    id_merchant?: true
    name_merchant?: true
    id_courier?: true
    name_courier?: true
    destination?: true
    id_subd?: true
    name_subd?: true
    id_city?: true
    name_city?: true
    id_prov?: true
    name_prov?: true
    shipping_cost?: true
    created_at?: true
    update_at?: true
  }

  export type History_orderMaxAggregateInputType = {
    id?: true
    id_user?: true
    name_user?: true
    id_merchant?: true
    name_merchant?: true
    id_courier?: true
    name_courier?: true
    destination?: true
    id_subd?: true
    name_subd?: true
    id_city?: true
    name_city?: true
    id_prov?: true
    name_prov?: true
    shipping_cost?: true
    created_at?: true
    update_at?: true
  }

  export type History_orderCountAggregateInputType = {
    id?: true
    id_user?: true
    name_user?: true
    id_merchant?: true
    name_merchant?: true
    id_courier?: true
    name_courier?: true
    destination?: true
    id_subd?: true
    name_subd?: true
    id_city?: true
    name_city?: true
    id_prov?: true
    name_prov?: true
    shipping_cost?: true
    created_at?: true
    update_at?: true
    _all?: true
  }

  export type History_orderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which History_order to aggregate.
     */
    where?: History_orderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of History_orders to fetch.
     */
    orderBy?: History_orderOrderByWithRelationInput | History_orderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: History_orderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` History_orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` History_orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned History_orders
    **/
    _count?: true | History_orderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: History_orderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: History_orderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: History_orderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: History_orderMaxAggregateInputType
  }

  export type GetHistory_orderAggregateType<T extends History_orderAggregateArgs> = {
        [P in keyof T & keyof AggregateHistory_order]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHistory_order[P]>
      : GetScalarType<T[P], AggregateHistory_order[P]>
  }




  export type History_orderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: History_orderWhereInput
    orderBy?: History_orderOrderByWithAggregationInput | History_orderOrderByWithAggregationInput[]
    by: History_orderScalarFieldEnum[] | History_orderScalarFieldEnum
    having?: History_orderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: History_orderCountAggregateInputType | true
    _avg?: History_orderAvgAggregateInputType
    _sum?: History_orderSumAggregateInputType
    _min?: History_orderMinAggregateInputType
    _max?: History_orderMaxAggregateInputType
  }

  export type History_orderGroupByOutputType = {
    id: string
    id_user: string
    name_user: string
    id_merchant: string
    name_merchant: string
    id_courier: string
    name_courier: string
    destination: string
    id_subd: number
    name_subd: string
    id_city: number
    name_city: string
    id_prov: number
    name_prov: string
    shipping_cost: Decimal
    created_at: Date
    update_at: Date | null
    _count: History_orderCountAggregateOutputType | null
    _avg: History_orderAvgAggregateOutputType | null
    _sum: History_orderSumAggregateOutputType | null
    _min: History_orderMinAggregateOutputType | null
    _max: History_orderMaxAggregateOutputType | null
  }

  type GetHistory_orderGroupByPayload<T extends History_orderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<History_orderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof History_orderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], History_orderGroupByOutputType[P]>
            : GetScalarType<T[P], History_orderGroupByOutputType[P]>
        }
      >
    >


  export type History_orderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_user?: boolean
    name_user?: boolean
    id_merchant?: boolean
    name_merchant?: boolean
    id_courier?: boolean
    name_courier?: boolean
    destination?: boolean
    id_subd?: boolean
    name_subd?: boolean
    id_city?: boolean
    name_city?: boolean
    id_prov?: boolean
    name_prov?: boolean
    shipping_cost?: boolean
    created_at?: boolean
    update_at?: boolean
    rel_history_order_item?: boolean | History_order$rel_history_order_itemArgs<ExtArgs>
    _count?: boolean | History_orderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["history_order"]>



  export type History_orderSelectScalar = {
    id?: boolean
    id_user?: boolean
    name_user?: boolean
    id_merchant?: boolean
    name_merchant?: boolean
    id_courier?: boolean
    name_courier?: boolean
    destination?: boolean
    id_subd?: boolean
    name_subd?: boolean
    id_city?: boolean
    name_city?: boolean
    id_prov?: boolean
    name_prov?: boolean
    shipping_cost?: boolean
    created_at?: boolean
    update_at?: boolean
  }

  export type History_orderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "id_user" | "name_user" | "id_merchant" | "name_merchant" | "id_courier" | "name_courier" | "destination" | "id_subd" | "name_subd" | "id_city" | "name_city" | "id_prov" | "name_prov" | "shipping_cost" | "created_at" | "update_at", ExtArgs["result"]["history_order"]>
  export type History_orderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rel_history_order_item?: boolean | History_order$rel_history_order_itemArgs<ExtArgs>
    _count?: boolean | History_orderCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $History_orderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "History_order"
    objects: {
      rel_history_order_item: Prisma.$History_order_itemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      id_user: string
      name_user: string
      id_merchant: string
      name_merchant: string
      id_courier: string
      name_courier: string
      destination: string
      id_subd: number
      name_subd: string
      id_city: number
      name_city: string
      id_prov: number
      name_prov: string
      shipping_cost: Prisma.Decimal
      created_at: Date
      update_at: Date | null
    }, ExtArgs["result"]["history_order"]>
    composites: {}
  }

  type History_orderGetPayload<S extends boolean | null | undefined | History_orderDefaultArgs> = $Result.GetResult<Prisma.$History_orderPayload, S>

  type History_orderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<History_orderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: History_orderCountAggregateInputType | true
    }

  export interface History_orderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['History_order'], meta: { name: 'History_order' } }
    /**
     * Find zero or one History_order that matches the filter.
     * @param {History_orderFindUniqueArgs} args - Arguments to find a History_order
     * @example
     * // Get one History_order
     * const history_order = await prisma.history_order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends History_orderFindUniqueArgs>(args: SelectSubset<T, History_orderFindUniqueArgs<ExtArgs>>): Prisma__History_orderClient<$Result.GetResult<Prisma.$History_orderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one History_order that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {History_orderFindUniqueOrThrowArgs} args - Arguments to find a History_order
     * @example
     * // Get one History_order
     * const history_order = await prisma.history_order.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends History_orderFindUniqueOrThrowArgs>(args: SelectSubset<T, History_orderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__History_orderClient<$Result.GetResult<Prisma.$History_orderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first History_order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {History_orderFindFirstArgs} args - Arguments to find a History_order
     * @example
     * // Get one History_order
     * const history_order = await prisma.history_order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends History_orderFindFirstArgs>(args?: SelectSubset<T, History_orderFindFirstArgs<ExtArgs>>): Prisma__History_orderClient<$Result.GetResult<Prisma.$History_orderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first History_order that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {History_orderFindFirstOrThrowArgs} args - Arguments to find a History_order
     * @example
     * // Get one History_order
     * const history_order = await prisma.history_order.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends History_orderFindFirstOrThrowArgs>(args?: SelectSubset<T, History_orderFindFirstOrThrowArgs<ExtArgs>>): Prisma__History_orderClient<$Result.GetResult<Prisma.$History_orderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more History_orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {History_orderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all History_orders
     * const history_orders = await prisma.history_order.findMany()
     * 
     * // Get first 10 History_orders
     * const history_orders = await prisma.history_order.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const history_orderWithIdOnly = await prisma.history_order.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends History_orderFindManyArgs>(args?: SelectSubset<T, History_orderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$History_orderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a History_order.
     * @param {History_orderCreateArgs} args - Arguments to create a History_order.
     * @example
     * // Create one History_order
     * const History_order = await prisma.history_order.create({
     *   data: {
     *     // ... data to create a History_order
     *   }
     * })
     * 
     */
    create<T extends History_orderCreateArgs>(args: SelectSubset<T, History_orderCreateArgs<ExtArgs>>): Prisma__History_orderClient<$Result.GetResult<Prisma.$History_orderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many History_orders.
     * @param {History_orderCreateManyArgs} args - Arguments to create many History_orders.
     * @example
     * // Create many History_orders
     * const history_order = await prisma.history_order.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends History_orderCreateManyArgs>(args?: SelectSubset<T, History_orderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a History_order.
     * @param {History_orderDeleteArgs} args - Arguments to delete one History_order.
     * @example
     * // Delete one History_order
     * const History_order = await prisma.history_order.delete({
     *   where: {
     *     // ... filter to delete one History_order
     *   }
     * })
     * 
     */
    delete<T extends History_orderDeleteArgs>(args: SelectSubset<T, History_orderDeleteArgs<ExtArgs>>): Prisma__History_orderClient<$Result.GetResult<Prisma.$History_orderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one History_order.
     * @param {History_orderUpdateArgs} args - Arguments to update one History_order.
     * @example
     * // Update one History_order
     * const history_order = await prisma.history_order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends History_orderUpdateArgs>(args: SelectSubset<T, History_orderUpdateArgs<ExtArgs>>): Prisma__History_orderClient<$Result.GetResult<Prisma.$History_orderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more History_orders.
     * @param {History_orderDeleteManyArgs} args - Arguments to filter History_orders to delete.
     * @example
     * // Delete a few History_orders
     * const { count } = await prisma.history_order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends History_orderDeleteManyArgs>(args?: SelectSubset<T, History_orderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more History_orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {History_orderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many History_orders
     * const history_order = await prisma.history_order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends History_orderUpdateManyArgs>(args: SelectSubset<T, History_orderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one History_order.
     * @param {History_orderUpsertArgs} args - Arguments to update or create a History_order.
     * @example
     * // Update or create a History_order
     * const history_order = await prisma.history_order.upsert({
     *   create: {
     *     // ... data to create a History_order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the History_order we want to update
     *   }
     * })
     */
    upsert<T extends History_orderUpsertArgs>(args: SelectSubset<T, History_orderUpsertArgs<ExtArgs>>): Prisma__History_orderClient<$Result.GetResult<Prisma.$History_orderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of History_orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {History_orderCountArgs} args - Arguments to filter History_orders to count.
     * @example
     * // Count the number of History_orders
     * const count = await prisma.history_order.count({
     *   where: {
     *     // ... the filter for the History_orders we want to count
     *   }
     * })
    **/
    count<T extends History_orderCountArgs>(
      args?: Subset<T, History_orderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], History_orderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a History_order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {History_orderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends History_orderAggregateArgs>(args: Subset<T, History_orderAggregateArgs>): Prisma.PrismaPromise<GetHistory_orderAggregateType<T>>

    /**
     * Group by History_order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {History_orderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends History_orderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: History_orderGroupByArgs['orderBy'] }
        : { orderBy?: History_orderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, History_orderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHistory_orderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the History_order model
   */
  readonly fields: History_orderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for History_order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__History_orderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rel_history_order_item<T extends History_order$rel_history_order_itemArgs<ExtArgs> = {}>(args?: Subset<T, History_order$rel_history_order_itemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$History_order_itemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the History_order model
   */
  interface History_orderFieldRefs {
    readonly id: FieldRef<"History_order", 'String'>
    readonly id_user: FieldRef<"History_order", 'String'>
    readonly name_user: FieldRef<"History_order", 'String'>
    readonly id_merchant: FieldRef<"History_order", 'String'>
    readonly name_merchant: FieldRef<"History_order", 'String'>
    readonly id_courier: FieldRef<"History_order", 'String'>
    readonly name_courier: FieldRef<"History_order", 'String'>
    readonly destination: FieldRef<"History_order", 'String'>
    readonly id_subd: FieldRef<"History_order", 'Int'>
    readonly name_subd: FieldRef<"History_order", 'String'>
    readonly id_city: FieldRef<"History_order", 'Int'>
    readonly name_city: FieldRef<"History_order", 'String'>
    readonly id_prov: FieldRef<"History_order", 'Int'>
    readonly name_prov: FieldRef<"History_order", 'String'>
    readonly shipping_cost: FieldRef<"History_order", 'Decimal'>
    readonly created_at: FieldRef<"History_order", 'DateTime'>
    readonly update_at: FieldRef<"History_order", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * History_order findUnique
   */
  export type History_orderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History_order
     */
    select?: History_orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the History_order
     */
    omit?: History_orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: History_orderInclude<ExtArgs> | null
    /**
     * Filter, which History_order to fetch.
     */
    where: History_orderWhereUniqueInput
  }

  /**
   * History_order findUniqueOrThrow
   */
  export type History_orderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History_order
     */
    select?: History_orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the History_order
     */
    omit?: History_orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: History_orderInclude<ExtArgs> | null
    /**
     * Filter, which History_order to fetch.
     */
    where: History_orderWhereUniqueInput
  }

  /**
   * History_order findFirst
   */
  export type History_orderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History_order
     */
    select?: History_orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the History_order
     */
    omit?: History_orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: History_orderInclude<ExtArgs> | null
    /**
     * Filter, which History_order to fetch.
     */
    where?: History_orderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of History_orders to fetch.
     */
    orderBy?: History_orderOrderByWithRelationInput | History_orderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for History_orders.
     */
    cursor?: History_orderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` History_orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` History_orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of History_orders.
     */
    distinct?: History_orderScalarFieldEnum | History_orderScalarFieldEnum[]
  }

  /**
   * History_order findFirstOrThrow
   */
  export type History_orderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History_order
     */
    select?: History_orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the History_order
     */
    omit?: History_orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: History_orderInclude<ExtArgs> | null
    /**
     * Filter, which History_order to fetch.
     */
    where?: History_orderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of History_orders to fetch.
     */
    orderBy?: History_orderOrderByWithRelationInput | History_orderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for History_orders.
     */
    cursor?: History_orderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` History_orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` History_orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of History_orders.
     */
    distinct?: History_orderScalarFieldEnum | History_orderScalarFieldEnum[]
  }

  /**
   * History_order findMany
   */
  export type History_orderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History_order
     */
    select?: History_orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the History_order
     */
    omit?: History_orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: History_orderInclude<ExtArgs> | null
    /**
     * Filter, which History_orders to fetch.
     */
    where?: History_orderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of History_orders to fetch.
     */
    orderBy?: History_orderOrderByWithRelationInput | History_orderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing History_orders.
     */
    cursor?: History_orderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` History_orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` History_orders.
     */
    skip?: number
    distinct?: History_orderScalarFieldEnum | History_orderScalarFieldEnum[]
  }

  /**
   * History_order create
   */
  export type History_orderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History_order
     */
    select?: History_orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the History_order
     */
    omit?: History_orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: History_orderInclude<ExtArgs> | null
    /**
     * The data needed to create a History_order.
     */
    data: XOR<History_orderCreateInput, History_orderUncheckedCreateInput>
  }

  /**
   * History_order createMany
   */
  export type History_orderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many History_orders.
     */
    data: History_orderCreateManyInput | History_orderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * History_order update
   */
  export type History_orderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History_order
     */
    select?: History_orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the History_order
     */
    omit?: History_orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: History_orderInclude<ExtArgs> | null
    /**
     * The data needed to update a History_order.
     */
    data: XOR<History_orderUpdateInput, History_orderUncheckedUpdateInput>
    /**
     * Choose, which History_order to update.
     */
    where: History_orderWhereUniqueInput
  }

  /**
   * History_order updateMany
   */
  export type History_orderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update History_orders.
     */
    data: XOR<History_orderUpdateManyMutationInput, History_orderUncheckedUpdateManyInput>
    /**
     * Filter which History_orders to update
     */
    where?: History_orderWhereInput
    /**
     * Limit how many History_orders to update.
     */
    limit?: number
  }

  /**
   * History_order upsert
   */
  export type History_orderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History_order
     */
    select?: History_orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the History_order
     */
    omit?: History_orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: History_orderInclude<ExtArgs> | null
    /**
     * The filter to search for the History_order to update in case it exists.
     */
    where: History_orderWhereUniqueInput
    /**
     * In case the History_order found by the `where` argument doesn't exist, create a new History_order with this data.
     */
    create: XOR<History_orderCreateInput, History_orderUncheckedCreateInput>
    /**
     * In case the History_order was found with the provided `where` argument, update it with this data.
     */
    update: XOR<History_orderUpdateInput, History_orderUncheckedUpdateInput>
  }

  /**
   * History_order delete
   */
  export type History_orderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History_order
     */
    select?: History_orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the History_order
     */
    omit?: History_orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: History_orderInclude<ExtArgs> | null
    /**
     * Filter which History_order to delete.
     */
    where: History_orderWhereUniqueInput
  }

  /**
   * History_order deleteMany
   */
  export type History_orderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which History_orders to delete
     */
    where?: History_orderWhereInput
    /**
     * Limit how many History_orders to delete.
     */
    limit?: number
  }

  /**
   * History_order.rel_history_order_item
   */
  export type History_order$rel_history_order_itemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History_order_item
     */
    select?: History_order_itemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the History_order_item
     */
    omit?: History_order_itemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: History_order_itemInclude<ExtArgs> | null
    where?: History_order_itemWhereInput
    orderBy?: History_order_itemOrderByWithRelationInput | History_order_itemOrderByWithRelationInput[]
    cursor?: History_order_itemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: History_order_itemScalarFieldEnum | History_order_itemScalarFieldEnum[]
  }

  /**
   * History_order without action
   */
  export type History_orderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History_order
     */
    select?: History_orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the History_order
     */
    omit?: History_orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: History_orderInclude<ExtArgs> | null
  }


  /**
   * Model History_order_item
   */

  export type AggregateHistory_order_item = {
    _count: History_order_itemCountAggregateOutputType | null
    _avg: History_order_itemAvgAggregateOutputType | null
    _sum: History_order_itemSumAggregateOutputType | null
    _min: History_order_itemMinAggregateOutputType | null
    _max: History_order_itemMaxAggregateOutputType | null
  }

  export type History_order_itemAvgAggregateOutputType = {
    qty: number | null
    price: Decimal | null
  }

  export type History_order_itemSumAggregateOutputType = {
    qty: number | null
    price: Decimal | null
  }

  export type History_order_itemMinAggregateOutputType = {
    id: string | null
    id_menu: string | null
    name_menu: string | null
    id_variant: string | null
    name_variant: string | null
    qty: number | null
    note: string | null
    price: Decimal | null
    id_order: string | null
    created_at: Date | null
    update_at: Date | null
  }

  export type History_order_itemMaxAggregateOutputType = {
    id: string | null
    id_menu: string | null
    name_menu: string | null
    id_variant: string | null
    name_variant: string | null
    qty: number | null
    note: string | null
    price: Decimal | null
    id_order: string | null
    created_at: Date | null
    update_at: Date | null
  }

  export type History_order_itemCountAggregateOutputType = {
    id: number
    id_menu: number
    name_menu: number
    id_variant: number
    name_variant: number
    qty: number
    note: number
    price: number
    id_order: number
    created_at: number
    update_at: number
    _all: number
  }


  export type History_order_itemAvgAggregateInputType = {
    qty?: true
    price?: true
  }

  export type History_order_itemSumAggregateInputType = {
    qty?: true
    price?: true
  }

  export type History_order_itemMinAggregateInputType = {
    id?: true
    id_menu?: true
    name_menu?: true
    id_variant?: true
    name_variant?: true
    qty?: true
    note?: true
    price?: true
    id_order?: true
    created_at?: true
    update_at?: true
  }

  export type History_order_itemMaxAggregateInputType = {
    id?: true
    id_menu?: true
    name_menu?: true
    id_variant?: true
    name_variant?: true
    qty?: true
    note?: true
    price?: true
    id_order?: true
    created_at?: true
    update_at?: true
  }

  export type History_order_itemCountAggregateInputType = {
    id?: true
    id_menu?: true
    name_menu?: true
    id_variant?: true
    name_variant?: true
    qty?: true
    note?: true
    price?: true
    id_order?: true
    created_at?: true
    update_at?: true
    _all?: true
  }

  export type History_order_itemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which History_order_item to aggregate.
     */
    where?: History_order_itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of History_order_items to fetch.
     */
    orderBy?: History_order_itemOrderByWithRelationInput | History_order_itemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: History_order_itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` History_order_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` History_order_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned History_order_items
    **/
    _count?: true | History_order_itemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: History_order_itemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: History_order_itemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: History_order_itemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: History_order_itemMaxAggregateInputType
  }

  export type GetHistory_order_itemAggregateType<T extends History_order_itemAggregateArgs> = {
        [P in keyof T & keyof AggregateHistory_order_item]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHistory_order_item[P]>
      : GetScalarType<T[P], AggregateHistory_order_item[P]>
  }




  export type History_order_itemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: History_order_itemWhereInput
    orderBy?: History_order_itemOrderByWithAggregationInput | History_order_itemOrderByWithAggregationInput[]
    by: History_order_itemScalarFieldEnum[] | History_order_itemScalarFieldEnum
    having?: History_order_itemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: History_order_itemCountAggregateInputType | true
    _avg?: History_order_itemAvgAggregateInputType
    _sum?: History_order_itemSumAggregateInputType
    _min?: History_order_itemMinAggregateInputType
    _max?: History_order_itemMaxAggregateInputType
  }

  export type History_order_itemGroupByOutputType = {
    id: string
    id_menu: string
    name_menu: string
    id_variant: string
    name_variant: string
    qty: number
    note: string
    price: Decimal
    id_order: string
    created_at: Date
    update_at: Date | null
    _count: History_order_itemCountAggregateOutputType | null
    _avg: History_order_itemAvgAggregateOutputType | null
    _sum: History_order_itemSumAggregateOutputType | null
    _min: History_order_itemMinAggregateOutputType | null
    _max: History_order_itemMaxAggregateOutputType | null
  }

  type GetHistory_order_itemGroupByPayload<T extends History_order_itemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<History_order_itemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof History_order_itemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], History_order_itemGroupByOutputType[P]>
            : GetScalarType<T[P], History_order_itemGroupByOutputType[P]>
        }
      >
    >


  export type History_order_itemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_menu?: boolean
    name_menu?: boolean
    id_variant?: boolean
    name_variant?: boolean
    qty?: boolean
    note?: boolean
    price?: boolean
    id_order?: boolean
    created_at?: boolean
    update_at?: boolean
    rel_history_order?: boolean | History_orderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["history_order_item"]>



  export type History_order_itemSelectScalar = {
    id?: boolean
    id_menu?: boolean
    name_menu?: boolean
    id_variant?: boolean
    name_variant?: boolean
    qty?: boolean
    note?: boolean
    price?: boolean
    id_order?: boolean
    created_at?: boolean
    update_at?: boolean
  }

  export type History_order_itemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "id_menu" | "name_menu" | "id_variant" | "name_variant" | "qty" | "note" | "price" | "id_order" | "created_at" | "update_at", ExtArgs["result"]["history_order_item"]>
  export type History_order_itemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rel_history_order?: boolean | History_orderDefaultArgs<ExtArgs>
  }

  export type $History_order_itemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "History_order_item"
    objects: {
      rel_history_order: Prisma.$History_orderPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      id_menu: string
      name_menu: string
      id_variant: string
      name_variant: string
      qty: number
      note: string
      price: Prisma.Decimal
      id_order: string
      created_at: Date
      update_at: Date | null
    }, ExtArgs["result"]["history_order_item"]>
    composites: {}
  }

  type History_order_itemGetPayload<S extends boolean | null | undefined | History_order_itemDefaultArgs> = $Result.GetResult<Prisma.$History_order_itemPayload, S>

  type History_order_itemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<History_order_itemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: History_order_itemCountAggregateInputType | true
    }

  export interface History_order_itemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['History_order_item'], meta: { name: 'History_order_item' } }
    /**
     * Find zero or one History_order_item that matches the filter.
     * @param {History_order_itemFindUniqueArgs} args - Arguments to find a History_order_item
     * @example
     * // Get one History_order_item
     * const history_order_item = await prisma.history_order_item.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends History_order_itemFindUniqueArgs>(args: SelectSubset<T, History_order_itemFindUniqueArgs<ExtArgs>>): Prisma__History_order_itemClient<$Result.GetResult<Prisma.$History_order_itemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one History_order_item that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {History_order_itemFindUniqueOrThrowArgs} args - Arguments to find a History_order_item
     * @example
     * // Get one History_order_item
     * const history_order_item = await prisma.history_order_item.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends History_order_itemFindUniqueOrThrowArgs>(args: SelectSubset<T, History_order_itemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__History_order_itemClient<$Result.GetResult<Prisma.$History_order_itemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first History_order_item that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {History_order_itemFindFirstArgs} args - Arguments to find a History_order_item
     * @example
     * // Get one History_order_item
     * const history_order_item = await prisma.history_order_item.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends History_order_itemFindFirstArgs>(args?: SelectSubset<T, History_order_itemFindFirstArgs<ExtArgs>>): Prisma__History_order_itemClient<$Result.GetResult<Prisma.$History_order_itemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first History_order_item that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {History_order_itemFindFirstOrThrowArgs} args - Arguments to find a History_order_item
     * @example
     * // Get one History_order_item
     * const history_order_item = await prisma.history_order_item.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends History_order_itemFindFirstOrThrowArgs>(args?: SelectSubset<T, History_order_itemFindFirstOrThrowArgs<ExtArgs>>): Prisma__History_order_itemClient<$Result.GetResult<Prisma.$History_order_itemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more History_order_items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {History_order_itemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all History_order_items
     * const history_order_items = await prisma.history_order_item.findMany()
     * 
     * // Get first 10 History_order_items
     * const history_order_items = await prisma.history_order_item.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const history_order_itemWithIdOnly = await prisma.history_order_item.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends History_order_itemFindManyArgs>(args?: SelectSubset<T, History_order_itemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$History_order_itemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a History_order_item.
     * @param {History_order_itemCreateArgs} args - Arguments to create a History_order_item.
     * @example
     * // Create one History_order_item
     * const History_order_item = await prisma.history_order_item.create({
     *   data: {
     *     // ... data to create a History_order_item
     *   }
     * })
     * 
     */
    create<T extends History_order_itemCreateArgs>(args: SelectSubset<T, History_order_itemCreateArgs<ExtArgs>>): Prisma__History_order_itemClient<$Result.GetResult<Prisma.$History_order_itemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many History_order_items.
     * @param {History_order_itemCreateManyArgs} args - Arguments to create many History_order_items.
     * @example
     * // Create many History_order_items
     * const history_order_item = await prisma.history_order_item.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends History_order_itemCreateManyArgs>(args?: SelectSubset<T, History_order_itemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a History_order_item.
     * @param {History_order_itemDeleteArgs} args - Arguments to delete one History_order_item.
     * @example
     * // Delete one History_order_item
     * const History_order_item = await prisma.history_order_item.delete({
     *   where: {
     *     // ... filter to delete one History_order_item
     *   }
     * })
     * 
     */
    delete<T extends History_order_itemDeleteArgs>(args: SelectSubset<T, History_order_itemDeleteArgs<ExtArgs>>): Prisma__History_order_itemClient<$Result.GetResult<Prisma.$History_order_itemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one History_order_item.
     * @param {History_order_itemUpdateArgs} args - Arguments to update one History_order_item.
     * @example
     * // Update one History_order_item
     * const history_order_item = await prisma.history_order_item.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends History_order_itemUpdateArgs>(args: SelectSubset<T, History_order_itemUpdateArgs<ExtArgs>>): Prisma__History_order_itemClient<$Result.GetResult<Prisma.$History_order_itemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more History_order_items.
     * @param {History_order_itemDeleteManyArgs} args - Arguments to filter History_order_items to delete.
     * @example
     * // Delete a few History_order_items
     * const { count } = await prisma.history_order_item.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends History_order_itemDeleteManyArgs>(args?: SelectSubset<T, History_order_itemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more History_order_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {History_order_itemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many History_order_items
     * const history_order_item = await prisma.history_order_item.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends History_order_itemUpdateManyArgs>(args: SelectSubset<T, History_order_itemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one History_order_item.
     * @param {History_order_itemUpsertArgs} args - Arguments to update or create a History_order_item.
     * @example
     * // Update or create a History_order_item
     * const history_order_item = await prisma.history_order_item.upsert({
     *   create: {
     *     // ... data to create a History_order_item
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the History_order_item we want to update
     *   }
     * })
     */
    upsert<T extends History_order_itemUpsertArgs>(args: SelectSubset<T, History_order_itemUpsertArgs<ExtArgs>>): Prisma__History_order_itemClient<$Result.GetResult<Prisma.$History_order_itemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of History_order_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {History_order_itemCountArgs} args - Arguments to filter History_order_items to count.
     * @example
     * // Count the number of History_order_items
     * const count = await prisma.history_order_item.count({
     *   where: {
     *     // ... the filter for the History_order_items we want to count
     *   }
     * })
    **/
    count<T extends History_order_itemCountArgs>(
      args?: Subset<T, History_order_itemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], History_order_itemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a History_order_item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {History_order_itemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends History_order_itemAggregateArgs>(args: Subset<T, History_order_itemAggregateArgs>): Prisma.PrismaPromise<GetHistory_order_itemAggregateType<T>>

    /**
     * Group by History_order_item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {History_order_itemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends History_order_itemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: History_order_itemGroupByArgs['orderBy'] }
        : { orderBy?: History_order_itemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, History_order_itemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHistory_order_itemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the History_order_item model
   */
  readonly fields: History_order_itemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for History_order_item.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__History_order_itemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rel_history_order<T extends History_orderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, History_orderDefaultArgs<ExtArgs>>): Prisma__History_orderClient<$Result.GetResult<Prisma.$History_orderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the History_order_item model
   */
  interface History_order_itemFieldRefs {
    readonly id: FieldRef<"History_order_item", 'String'>
    readonly id_menu: FieldRef<"History_order_item", 'String'>
    readonly name_menu: FieldRef<"History_order_item", 'String'>
    readonly id_variant: FieldRef<"History_order_item", 'String'>
    readonly name_variant: FieldRef<"History_order_item", 'String'>
    readonly qty: FieldRef<"History_order_item", 'Int'>
    readonly note: FieldRef<"History_order_item", 'String'>
    readonly price: FieldRef<"History_order_item", 'Decimal'>
    readonly id_order: FieldRef<"History_order_item", 'String'>
    readonly created_at: FieldRef<"History_order_item", 'DateTime'>
    readonly update_at: FieldRef<"History_order_item", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * History_order_item findUnique
   */
  export type History_order_itemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History_order_item
     */
    select?: History_order_itemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the History_order_item
     */
    omit?: History_order_itemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: History_order_itemInclude<ExtArgs> | null
    /**
     * Filter, which History_order_item to fetch.
     */
    where: History_order_itemWhereUniqueInput
  }

  /**
   * History_order_item findUniqueOrThrow
   */
  export type History_order_itemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History_order_item
     */
    select?: History_order_itemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the History_order_item
     */
    omit?: History_order_itemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: History_order_itemInclude<ExtArgs> | null
    /**
     * Filter, which History_order_item to fetch.
     */
    where: History_order_itemWhereUniqueInput
  }

  /**
   * History_order_item findFirst
   */
  export type History_order_itemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History_order_item
     */
    select?: History_order_itemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the History_order_item
     */
    omit?: History_order_itemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: History_order_itemInclude<ExtArgs> | null
    /**
     * Filter, which History_order_item to fetch.
     */
    where?: History_order_itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of History_order_items to fetch.
     */
    orderBy?: History_order_itemOrderByWithRelationInput | History_order_itemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for History_order_items.
     */
    cursor?: History_order_itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` History_order_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` History_order_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of History_order_items.
     */
    distinct?: History_order_itemScalarFieldEnum | History_order_itemScalarFieldEnum[]
  }

  /**
   * History_order_item findFirstOrThrow
   */
  export type History_order_itemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History_order_item
     */
    select?: History_order_itemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the History_order_item
     */
    omit?: History_order_itemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: History_order_itemInclude<ExtArgs> | null
    /**
     * Filter, which History_order_item to fetch.
     */
    where?: History_order_itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of History_order_items to fetch.
     */
    orderBy?: History_order_itemOrderByWithRelationInput | History_order_itemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for History_order_items.
     */
    cursor?: History_order_itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` History_order_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` History_order_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of History_order_items.
     */
    distinct?: History_order_itemScalarFieldEnum | History_order_itemScalarFieldEnum[]
  }

  /**
   * History_order_item findMany
   */
  export type History_order_itemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History_order_item
     */
    select?: History_order_itemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the History_order_item
     */
    omit?: History_order_itemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: History_order_itemInclude<ExtArgs> | null
    /**
     * Filter, which History_order_items to fetch.
     */
    where?: History_order_itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of History_order_items to fetch.
     */
    orderBy?: History_order_itemOrderByWithRelationInput | History_order_itemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing History_order_items.
     */
    cursor?: History_order_itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` History_order_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` History_order_items.
     */
    skip?: number
    distinct?: History_order_itemScalarFieldEnum | History_order_itemScalarFieldEnum[]
  }

  /**
   * History_order_item create
   */
  export type History_order_itemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History_order_item
     */
    select?: History_order_itemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the History_order_item
     */
    omit?: History_order_itemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: History_order_itemInclude<ExtArgs> | null
    /**
     * The data needed to create a History_order_item.
     */
    data: XOR<History_order_itemCreateInput, History_order_itemUncheckedCreateInput>
  }

  /**
   * History_order_item createMany
   */
  export type History_order_itemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many History_order_items.
     */
    data: History_order_itemCreateManyInput | History_order_itemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * History_order_item update
   */
  export type History_order_itemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History_order_item
     */
    select?: History_order_itemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the History_order_item
     */
    omit?: History_order_itemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: History_order_itemInclude<ExtArgs> | null
    /**
     * The data needed to update a History_order_item.
     */
    data: XOR<History_order_itemUpdateInput, History_order_itemUncheckedUpdateInput>
    /**
     * Choose, which History_order_item to update.
     */
    where: History_order_itemWhereUniqueInput
  }

  /**
   * History_order_item updateMany
   */
  export type History_order_itemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update History_order_items.
     */
    data: XOR<History_order_itemUpdateManyMutationInput, History_order_itemUncheckedUpdateManyInput>
    /**
     * Filter which History_order_items to update
     */
    where?: History_order_itemWhereInput
    /**
     * Limit how many History_order_items to update.
     */
    limit?: number
  }

  /**
   * History_order_item upsert
   */
  export type History_order_itemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History_order_item
     */
    select?: History_order_itemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the History_order_item
     */
    omit?: History_order_itemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: History_order_itemInclude<ExtArgs> | null
    /**
     * The filter to search for the History_order_item to update in case it exists.
     */
    where: History_order_itemWhereUniqueInput
    /**
     * In case the History_order_item found by the `where` argument doesn't exist, create a new History_order_item with this data.
     */
    create: XOR<History_order_itemCreateInput, History_order_itemUncheckedCreateInput>
    /**
     * In case the History_order_item was found with the provided `where` argument, update it with this data.
     */
    update: XOR<History_order_itemUpdateInput, History_order_itemUncheckedUpdateInput>
  }

  /**
   * History_order_item delete
   */
  export type History_order_itemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History_order_item
     */
    select?: History_order_itemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the History_order_item
     */
    omit?: History_order_itemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: History_order_itemInclude<ExtArgs> | null
    /**
     * Filter which History_order_item to delete.
     */
    where: History_order_itemWhereUniqueInput
  }

  /**
   * History_order_item deleteMany
   */
  export type History_order_itemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which History_order_items to delete
     */
    where?: History_order_itemWhereInput
    /**
     * Limit how many History_order_items to delete.
     */
    limit?: number
  }

  /**
   * History_order_item without action
   */
  export type History_order_itemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History_order_item
     */
    select?: History_order_itemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the History_order_item
     */
    omit?: History_order_itemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: History_order_itemInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const StatusScalarFieldEnum: {
    id: 'id',
    name: 'name',
    created_at: 'created_at',
    update_at: 'update_at'
  };

  export type StatusScalarFieldEnum = (typeof StatusScalarFieldEnum)[keyof typeof StatusScalarFieldEnum]


  export const Status_orderScalarFieldEnum: {
    id: 'id',
    name: 'name',
    created_at: 'created_at',
    update_at: 'update_at'
  };

  export type Status_orderScalarFieldEnum = (typeof Status_orderScalarFieldEnum)[keyof typeof Status_orderScalarFieldEnum]


  export const BrandScalarFieldEnum: {
    id: 'id',
    name: 'name',
    brand: 'brand',
    created_at: 'created_at',
    update_at: 'update_at'
  };

  export type BrandScalarFieldEnum = (typeof BrandScalarFieldEnum)[keyof typeof BrandScalarFieldEnum]


  export const SubdistrictScalarFieldEnum: {
    id: 'id',
    name: 'name',
    id_city: 'id_city',
    created_at: 'created_at',
    update_at: 'update_at'
  };

  export type SubdistrictScalarFieldEnum = (typeof SubdistrictScalarFieldEnum)[keyof typeof SubdistrictScalarFieldEnum]


  export const CityScalarFieldEnum: {
    id: 'id',
    name: 'name',
    id_prov: 'id_prov',
    created_at: 'created_at',
    update_at: 'update_at'
  };

  export type CityScalarFieldEnum = (typeof CityScalarFieldEnum)[keyof typeof CityScalarFieldEnum]


  export const ProvinceScalarFieldEnum: {
    id: 'id',
    name: 'name',
    created_at: 'created_at',
    update_at: 'update_at'
  };

  export type ProvinceScalarFieldEnum = (typeof ProvinceScalarFieldEnum)[keyof typeof ProvinceScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    created_at: 'created_at',
    update_at: 'update_at'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password',
    name: 'name',
    email: 'email',
    phone: 'phone',
    poin: 'poin',
    id_status: 'id_status',
    created_at: 'created_at',
    update_at: 'update_at'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CourierScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password',
    name: 'name',
    email: 'email',
    phone: 'phone',
    number_plate: 'number_plate',
    id_brand: 'id_brand',
    color: 'color',
    is_active: 'is_active',
    id_status: 'id_status',
    created_at: 'created_at',
    update_at: 'update_at'
  };

  export type CourierScalarFieldEnum = (typeof CourierScalarFieldEnum)[keyof typeof CourierScalarFieldEnum]


  export const MerchantScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password',
    name: 'name',
    address: 'address',
    id_subd: 'id_subd',
    id_city: 'id_city',
    id_prov: 'id_prov',
    email: 'email',
    phone: 'phone',
    is_open: 'is_open',
    id_status: 'id_status',
    created_at: 'created_at',
    update_at: 'update_at'
  };

  export type MerchantScalarFieldEnum = (typeof MerchantScalarFieldEnum)[keyof typeof MerchantScalarFieldEnum]


  export const MenuScalarFieldEnum: {
    id: 'id',
    name: 'name',
    detail: 'detail',
    id_merchant: 'id_merchant',
    id_category: 'id_category',
    price: 'price',
    is_ready: 'is_ready',
    created_at: 'created_at',
    update_at: 'update_at'
  };

  export type MenuScalarFieldEnum = (typeof MenuScalarFieldEnum)[keyof typeof MenuScalarFieldEnum]


  export const VariantScalarFieldEnum: {
    id: 'id',
    name: 'name',
    id_menu: 'id_menu',
    created_at: 'created_at',
    update_at: 'update_at'
  };

  export type VariantScalarFieldEnum = (typeof VariantScalarFieldEnum)[keyof typeof VariantScalarFieldEnum]


  export const Variant_itemScalarFieldEnum: {
    id: 'id',
    name: 'name',
    id_variant: 'id_variant',
    price: 'price',
    created_at: 'created_at',
    update_at: 'update_at'
  };

  export type Variant_itemScalarFieldEnum = (typeof Variant_itemScalarFieldEnum)[keyof typeof Variant_itemScalarFieldEnum]


  export const OrderScalarFieldEnum: {
    id: 'id',
    id_user: 'id_user',
    name_user: 'name_user',
    id_merchant: 'id_merchant',
    name_merchant: 'name_merchant',
    id_courier: 'id_courier',
    name_courier: 'name_courier',
    destination: 'destination',
    id_subd: 'id_subd',
    name_subd: 'name_subd',
    id_city: 'id_city',
    name_city: 'name_city',
    id_prov: 'id_prov',
    name_prov: 'name_prov',
    shipping_cost: 'shipping_cost',
    created_at: 'created_at',
    update_at: 'update_at'
  };

  export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


  export const Order_itemScalarFieldEnum: {
    id: 'id',
    id_menu: 'id_menu',
    name_menu: 'name_menu',
    id_variant: 'id_variant',
    name_variant: 'name_variant',
    qty: 'qty',
    note: 'note',
    price: 'price',
    id_order: 'id_order',
    created_at: 'created_at',
    update_at: 'update_at'
  };

  export type Order_itemScalarFieldEnum = (typeof Order_itemScalarFieldEnum)[keyof typeof Order_itemScalarFieldEnum]


  export const Log_orderScalarFieldEnum: {
    id: 'id',
    id_order: 'id_order',
    id_status: 'id_status',
    detail_status: 'detail_status',
    change_by: 'change_by',
    id_changer: 'id_changer',
    time: 'time'
  };

  export type Log_orderScalarFieldEnum = (typeof Log_orderScalarFieldEnum)[keyof typeof Log_orderScalarFieldEnum]


  export const History_orderScalarFieldEnum: {
    id: 'id',
    id_user: 'id_user',
    name_user: 'name_user',
    id_merchant: 'id_merchant',
    name_merchant: 'name_merchant',
    id_courier: 'id_courier',
    name_courier: 'name_courier',
    destination: 'destination',
    id_subd: 'id_subd',
    name_subd: 'name_subd',
    id_city: 'id_city',
    name_city: 'name_city',
    id_prov: 'id_prov',
    name_prov: 'name_prov',
    shipping_cost: 'shipping_cost',
    created_at: 'created_at',
    update_at: 'update_at'
  };

  export type History_orderScalarFieldEnum = (typeof History_orderScalarFieldEnum)[keyof typeof History_orderScalarFieldEnum]


  export const History_order_itemScalarFieldEnum: {
    id: 'id',
    id_menu: 'id_menu',
    name_menu: 'name_menu',
    id_variant: 'id_variant',
    name_variant: 'name_variant',
    qty: 'qty',
    note: 'note',
    price: 'price',
    id_order: 'id_order',
    created_at: 'created_at',
    update_at: 'update_at'
  };

  export type History_order_itemScalarFieldEnum = (typeof History_order_itemScalarFieldEnum)[keyof typeof History_order_itemScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const StatusOrderByRelevanceFieldEnum: {
    name: 'name'
  };

  export type StatusOrderByRelevanceFieldEnum = (typeof StatusOrderByRelevanceFieldEnum)[keyof typeof StatusOrderByRelevanceFieldEnum]


  export const Status_orderOrderByRelevanceFieldEnum: {
    name: 'name'
  };

  export type Status_orderOrderByRelevanceFieldEnum = (typeof Status_orderOrderByRelevanceFieldEnum)[keyof typeof Status_orderOrderByRelevanceFieldEnum]


  export const BrandOrderByRelevanceFieldEnum: {
    name: 'name',
    brand: 'brand'
  };

  export type BrandOrderByRelevanceFieldEnum = (typeof BrandOrderByRelevanceFieldEnum)[keyof typeof BrandOrderByRelevanceFieldEnum]


  export const SubdistrictOrderByRelevanceFieldEnum: {
    name: 'name'
  };

  export type SubdistrictOrderByRelevanceFieldEnum = (typeof SubdistrictOrderByRelevanceFieldEnum)[keyof typeof SubdistrictOrderByRelevanceFieldEnum]


  export const CityOrderByRelevanceFieldEnum: {
    name: 'name'
  };

  export type CityOrderByRelevanceFieldEnum = (typeof CityOrderByRelevanceFieldEnum)[keyof typeof CityOrderByRelevanceFieldEnum]


  export const ProvinceOrderByRelevanceFieldEnum: {
    name: 'name'
  };

  export type ProvinceOrderByRelevanceFieldEnum = (typeof ProvinceOrderByRelevanceFieldEnum)[keyof typeof ProvinceOrderByRelevanceFieldEnum]


  export const CategoryOrderByRelevanceFieldEnum: {
    name: 'name'
  };

  export type CategoryOrderByRelevanceFieldEnum = (typeof CategoryOrderByRelevanceFieldEnum)[keyof typeof CategoryOrderByRelevanceFieldEnum]


  export const UserOrderByRelevanceFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password',
    name: 'name',
    email: 'email',
    phone: 'phone'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const CourierOrderByRelevanceFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password',
    name: 'name',
    email: 'email',
    phone: 'phone',
    number_plate: 'number_plate',
    color: 'color'
  };

  export type CourierOrderByRelevanceFieldEnum = (typeof CourierOrderByRelevanceFieldEnum)[keyof typeof CourierOrderByRelevanceFieldEnum]


  export const MerchantOrderByRelevanceFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password',
    name: 'name',
    address: 'address',
    email: 'email',
    phone: 'phone'
  };

  export type MerchantOrderByRelevanceFieldEnum = (typeof MerchantOrderByRelevanceFieldEnum)[keyof typeof MerchantOrderByRelevanceFieldEnum]


  export const MenuOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    detail: 'detail',
    id_merchant: 'id_merchant'
  };

  export type MenuOrderByRelevanceFieldEnum = (typeof MenuOrderByRelevanceFieldEnum)[keyof typeof MenuOrderByRelevanceFieldEnum]


  export const VariantOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    id_menu: 'id_menu'
  };

  export type VariantOrderByRelevanceFieldEnum = (typeof VariantOrderByRelevanceFieldEnum)[keyof typeof VariantOrderByRelevanceFieldEnum]


  export const Variant_itemOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    id_variant: 'id_variant'
  };

  export type Variant_itemOrderByRelevanceFieldEnum = (typeof Variant_itemOrderByRelevanceFieldEnum)[keyof typeof Variant_itemOrderByRelevanceFieldEnum]


  export const OrderOrderByRelevanceFieldEnum: {
    id: 'id',
    id_user: 'id_user',
    name_user: 'name_user',
    id_merchant: 'id_merchant',
    name_merchant: 'name_merchant',
    id_courier: 'id_courier',
    name_courier: 'name_courier',
    destination: 'destination',
    name_subd: 'name_subd',
    name_city: 'name_city',
    name_prov: 'name_prov'
  };

  export type OrderOrderByRelevanceFieldEnum = (typeof OrderOrderByRelevanceFieldEnum)[keyof typeof OrderOrderByRelevanceFieldEnum]


  export const Order_itemOrderByRelevanceFieldEnum: {
    id: 'id',
    id_menu: 'id_menu',
    name_menu: 'name_menu',
    id_variant: 'id_variant',
    name_variant: 'name_variant',
    note: 'note',
    id_order: 'id_order'
  };

  export type Order_itemOrderByRelevanceFieldEnum = (typeof Order_itemOrderByRelevanceFieldEnum)[keyof typeof Order_itemOrderByRelevanceFieldEnum]


  export const Log_orderOrderByRelevanceFieldEnum: {
    id_order: 'id_order',
    detail_status: 'detail_status',
    change_by: 'change_by',
    id_changer: 'id_changer'
  };

  export type Log_orderOrderByRelevanceFieldEnum = (typeof Log_orderOrderByRelevanceFieldEnum)[keyof typeof Log_orderOrderByRelevanceFieldEnum]


  export const History_orderOrderByRelevanceFieldEnum: {
    id: 'id',
    id_user: 'id_user',
    name_user: 'name_user',
    id_merchant: 'id_merchant',
    name_merchant: 'name_merchant',
    id_courier: 'id_courier',
    name_courier: 'name_courier',
    destination: 'destination',
    name_subd: 'name_subd',
    name_city: 'name_city',
    name_prov: 'name_prov'
  };

  export type History_orderOrderByRelevanceFieldEnum = (typeof History_orderOrderByRelevanceFieldEnum)[keyof typeof History_orderOrderByRelevanceFieldEnum]


  export const History_order_itemOrderByRelevanceFieldEnum: {
    id: 'id',
    id_menu: 'id_menu',
    name_menu: 'name_menu',
    id_variant: 'id_variant',
    name_variant: 'name_variant',
    note: 'note',
    id_order: 'id_order'
  };

  export type History_order_itemOrderByRelevanceFieldEnum = (typeof History_order_itemOrderByRelevanceFieldEnum)[keyof typeof History_order_itemOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type StatusWhereInput = {
    AND?: StatusWhereInput | StatusWhereInput[]
    OR?: StatusWhereInput[]
    NOT?: StatusWhereInput | StatusWhereInput[]
    id?: IntFilter<"Status"> | number
    name?: StringFilter<"Status"> | string
    created_at?: DateTimeFilter<"Status"> | Date | string
    update_at?: DateTimeNullableFilter<"Status"> | Date | string | null
    rel_user?: UserListRelationFilter
    rel_courier?: CourierListRelationFilter
    rel_merchant?: MerchantListRelationFilter
  }

  export type StatusOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrderInput | SortOrder
    rel_user?: UserOrderByRelationAggregateInput
    rel_courier?: CourierOrderByRelationAggregateInput
    rel_merchant?: MerchantOrderByRelationAggregateInput
    _relevance?: StatusOrderByRelevanceInput
  }

  export type StatusWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StatusWhereInput | StatusWhereInput[]
    OR?: StatusWhereInput[]
    NOT?: StatusWhereInput | StatusWhereInput[]
    name?: StringFilter<"Status"> | string
    created_at?: DateTimeFilter<"Status"> | Date | string
    update_at?: DateTimeNullableFilter<"Status"> | Date | string | null
    rel_user?: UserListRelationFilter
    rel_courier?: CourierListRelationFilter
    rel_merchant?: MerchantListRelationFilter
  }, "id">

  export type StatusOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrderInput | SortOrder
    _count?: StatusCountOrderByAggregateInput
    _avg?: StatusAvgOrderByAggregateInput
    _max?: StatusMaxOrderByAggregateInput
    _min?: StatusMinOrderByAggregateInput
    _sum?: StatusSumOrderByAggregateInput
  }

  export type StatusScalarWhereWithAggregatesInput = {
    AND?: StatusScalarWhereWithAggregatesInput | StatusScalarWhereWithAggregatesInput[]
    OR?: StatusScalarWhereWithAggregatesInput[]
    NOT?: StatusScalarWhereWithAggregatesInput | StatusScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Status"> | number
    name?: StringWithAggregatesFilter<"Status"> | string
    created_at?: DateTimeWithAggregatesFilter<"Status"> | Date | string
    update_at?: DateTimeNullableWithAggregatesFilter<"Status"> | Date | string | null
  }

  export type Status_orderWhereInput = {
    AND?: Status_orderWhereInput | Status_orderWhereInput[]
    OR?: Status_orderWhereInput[]
    NOT?: Status_orderWhereInput | Status_orderWhereInput[]
    id?: IntFilter<"Status_order"> | number
    name?: StringFilter<"Status_order"> | string
    created_at?: DateTimeFilter<"Status_order"> | Date | string
    update_at?: DateTimeNullableFilter<"Status_order"> | Date | string | null
    rel_log_order?: Log_orderListRelationFilter
  }

  export type Status_orderOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrderInput | SortOrder
    rel_log_order?: Log_orderOrderByRelationAggregateInput
    _relevance?: Status_orderOrderByRelevanceInput
  }

  export type Status_orderWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: Status_orderWhereInput | Status_orderWhereInput[]
    OR?: Status_orderWhereInput[]
    NOT?: Status_orderWhereInput | Status_orderWhereInput[]
    name?: StringFilter<"Status_order"> | string
    created_at?: DateTimeFilter<"Status_order"> | Date | string
    update_at?: DateTimeNullableFilter<"Status_order"> | Date | string | null
    rel_log_order?: Log_orderListRelationFilter
  }, "id">

  export type Status_orderOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrderInput | SortOrder
    _count?: Status_orderCountOrderByAggregateInput
    _avg?: Status_orderAvgOrderByAggregateInput
    _max?: Status_orderMaxOrderByAggregateInput
    _min?: Status_orderMinOrderByAggregateInput
    _sum?: Status_orderSumOrderByAggregateInput
  }

  export type Status_orderScalarWhereWithAggregatesInput = {
    AND?: Status_orderScalarWhereWithAggregatesInput | Status_orderScalarWhereWithAggregatesInput[]
    OR?: Status_orderScalarWhereWithAggregatesInput[]
    NOT?: Status_orderScalarWhereWithAggregatesInput | Status_orderScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Status_order"> | number
    name?: StringWithAggregatesFilter<"Status_order"> | string
    created_at?: DateTimeWithAggregatesFilter<"Status_order"> | Date | string
    update_at?: DateTimeNullableWithAggregatesFilter<"Status_order"> | Date | string | null
  }

  export type BrandWhereInput = {
    AND?: BrandWhereInput | BrandWhereInput[]
    OR?: BrandWhereInput[]
    NOT?: BrandWhereInput | BrandWhereInput[]
    id?: IntFilter<"Brand"> | number
    name?: StringFilter<"Brand"> | string
    brand?: StringFilter<"Brand"> | string
    created_at?: DateTimeFilter<"Brand"> | Date | string
    update_at?: DateTimeNullableFilter<"Brand"> | Date | string | null
    rel_courier?: CourierListRelationFilter
  }

  export type BrandOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrderInput | SortOrder
    rel_courier?: CourierOrderByRelationAggregateInput
    _relevance?: BrandOrderByRelevanceInput
  }

  export type BrandWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BrandWhereInput | BrandWhereInput[]
    OR?: BrandWhereInput[]
    NOT?: BrandWhereInput | BrandWhereInput[]
    name?: StringFilter<"Brand"> | string
    brand?: StringFilter<"Brand"> | string
    created_at?: DateTimeFilter<"Brand"> | Date | string
    update_at?: DateTimeNullableFilter<"Brand"> | Date | string | null
    rel_courier?: CourierListRelationFilter
  }, "id">

  export type BrandOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrderInput | SortOrder
    _count?: BrandCountOrderByAggregateInput
    _avg?: BrandAvgOrderByAggregateInput
    _max?: BrandMaxOrderByAggregateInput
    _min?: BrandMinOrderByAggregateInput
    _sum?: BrandSumOrderByAggregateInput
  }

  export type BrandScalarWhereWithAggregatesInput = {
    AND?: BrandScalarWhereWithAggregatesInput | BrandScalarWhereWithAggregatesInput[]
    OR?: BrandScalarWhereWithAggregatesInput[]
    NOT?: BrandScalarWhereWithAggregatesInput | BrandScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Brand"> | number
    name?: StringWithAggregatesFilter<"Brand"> | string
    brand?: StringWithAggregatesFilter<"Brand"> | string
    created_at?: DateTimeWithAggregatesFilter<"Brand"> | Date | string
    update_at?: DateTimeNullableWithAggregatesFilter<"Brand"> | Date | string | null
  }

  export type SubdistrictWhereInput = {
    AND?: SubdistrictWhereInput | SubdistrictWhereInput[]
    OR?: SubdistrictWhereInput[]
    NOT?: SubdistrictWhereInput | SubdistrictWhereInput[]
    id?: IntFilter<"Subdistrict"> | number
    name?: StringFilter<"Subdistrict"> | string
    id_city?: IntFilter<"Subdistrict"> | number
    created_at?: DateTimeFilter<"Subdistrict"> | Date | string
    update_at?: DateTimeNullableFilter<"Subdistrict"> | Date | string | null
    rel_merchant?: MerchantListRelationFilter
  }

  export type SubdistrictOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    id_city?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrderInput | SortOrder
    rel_merchant?: MerchantOrderByRelationAggregateInput
    _relevance?: SubdistrictOrderByRelevanceInput
  }

  export type SubdistrictWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SubdistrictWhereInput | SubdistrictWhereInput[]
    OR?: SubdistrictWhereInput[]
    NOT?: SubdistrictWhereInput | SubdistrictWhereInput[]
    name?: StringFilter<"Subdistrict"> | string
    id_city?: IntFilter<"Subdistrict"> | number
    created_at?: DateTimeFilter<"Subdistrict"> | Date | string
    update_at?: DateTimeNullableFilter<"Subdistrict"> | Date | string | null
    rel_merchant?: MerchantListRelationFilter
  }, "id">

  export type SubdistrictOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    id_city?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrderInput | SortOrder
    _count?: SubdistrictCountOrderByAggregateInput
    _avg?: SubdistrictAvgOrderByAggregateInput
    _max?: SubdistrictMaxOrderByAggregateInput
    _min?: SubdistrictMinOrderByAggregateInput
    _sum?: SubdistrictSumOrderByAggregateInput
  }

  export type SubdistrictScalarWhereWithAggregatesInput = {
    AND?: SubdistrictScalarWhereWithAggregatesInput | SubdistrictScalarWhereWithAggregatesInput[]
    OR?: SubdistrictScalarWhereWithAggregatesInput[]
    NOT?: SubdistrictScalarWhereWithAggregatesInput | SubdistrictScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Subdistrict"> | number
    name?: StringWithAggregatesFilter<"Subdistrict"> | string
    id_city?: IntWithAggregatesFilter<"Subdistrict"> | number
    created_at?: DateTimeWithAggregatesFilter<"Subdistrict"> | Date | string
    update_at?: DateTimeNullableWithAggregatesFilter<"Subdistrict"> | Date | string | null
  }

  export type CityWhereInput = {
    AND?: CityWhereInput | CityWhereInput[]
    OR?: CityWhereInput[]
    NOT?: CityWhereInput | CityWhereInput[]
    id?: IntFilter<"City"> | number
    name?: StringFilter<"City"> | string
    id_prov?: IntFilter<"City"> | number
    created_at?: DateTimeFilter<"City"> | Date | string
    update_at?: DateTimeNullableFilter<"City"> | Date | string | null
    rel_merchant?: MerchantListRelationFilter
  }

  export type CityOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    id_prov?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrderInput | SortOrder
    rel_merchant?: MerchantOrderByRelationAggregateInput
    _relevance?: CityOrderByRelevanceInput
  }

  export type CityWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CityWhereInput | CityWhereInput[]
    OR?: CityWhereInput[]
    NOT?: CityWhereInput | CityWhereInput[]
    name?: StringFilter<"City"> | string
    id_prov?: IntFilter<"City"> | number
    created_at?: DateTimeFilter<"City"> | Date | string
    update_at?: DateTimeNullableFilter<"City"> | Date | string | null
    rel_merchant?: MerchantListRelationFilter
  }, "id">

  export type CityOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    id_prov?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrderInput | SortOrder
    _count?: CityCountOrderByAggregateInput
    _avg?: CityAvgOrderByAggregateInput
    _max?: CityMaxOrderByAggregateInput
    _min?: CityMinOrderByAggregateInput
    _sum?: CitySumOrderByAggregateInput
  }

  export type CityScalarWhereWithAggregatesInput = {
    AND?: CityScalarWhereWithAggregatesInput | CityScalarWhereWithAggregatesInput[]
    OR?: CityScalarWhereWithAggregatesInput[]
    NOT?: CityScalarWhereWithAggregatesInput | CityScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"City"> | number
    name?: StringWithAggregatesFilter<"City"> | string
    id_prov?: IntWithAggregatesFilter<"City"> | number
    created_at?: DateTimeWithAggregatesFilter<"City"> | Date | string
    update_at?: DateTimeNullableWithAggregatesFilter<"City"> | Date | string | null
  }

  export type ProvinceWhereInput = {
    AND?: ProvinceWhereInput | ProvinceWhereInput[]
    OR?: ProvinceWhereInput[]
    NOT?: ProvinceWhereInput | ProvinceWhereInput[]
    id?: IntFilter<"Province"> | number
    name?: StringFilter<"Province"> | string
    created_at?: DateTimeFilter<"Province"> | Date | string
    update_at?: DateTimeNullableFilter<"Province"> | Date | string | null
    rel_merchant?: MerchantListRelationFilter
  }

  export type ProvinceOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrderInput | SortOrder
    rel_merchant?: MerchantOrderByRelationAggregateInput
    _relevance?: ProvinceOrderByRelevanceInput
  }

  export type ProvinceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProvinceWhereInput | ProvinceWhereInput[]
    OR?: ProvinceWhereInput[]
    NOT?: ProvinceWhereInput | ProvinceWhereInput[]
    name?: StringFilter<"Province"> | string
    created_at?: DateTimeFilter<"Province"> | Date | string
    update_at?: DateTimeNullableFilter<"Province"> | Date | string | null
    rel_merchant?: MerchantListRelationFilter
  }, "id">

  export type ProvinceOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrderInput | SortOrder
    _count?: ProvinceCountOrderByAggregateInput
    _avg?: ProvinceAvgOrderByAggregateInput
    _max?: ProvinceMaxOrderByAggregateInput
    _min?: ProvinceMinOrderByAggregateInput
    _sum?: ProvinceSumOrderByAggregateInput
  }

  export type ProvinceScalarWhereWithAggregatesInput = {
    AND?: ProvinceScalarWhereWithAggregatesInput | ProvinceScalarWhereWithAggregatesInput[]
    OR?: ProvinceScalarWhereWithAggregatesInput[]
    NOT?: ProvinceScalarWhereWithAggregatesInput | ProvinceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Province"> | number
    name?: StringWithAggregatesFilter<"Province"> | string
    created_at?: DateTimeWithAggregatesFilter<"Province"> | Date | string
    update_at?: DateTimeNullableWithAggregatesFilter<"Province"> | Date | string | null
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: IntFilter<"Category"> | number
    name?: StringFilter<"Category"> | string
    created_at?: DateTimeFilter<"Category"> | Date | string
    update_at?: DateTimeNullableFilter<"Category"> | Date | string | null
    rel_menu?: MenuListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrderInput | SortOrder
    rel_menu?: MenuOrderByRelationAggregateInput
    _relevance?: CategoryOrderByRelevanceInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    name?: StringFilter<"Category"> | string
    created_at?: DateTimeFilter<"Category"> | Date | string
    update_at?: DateTimeNullableFilter<"Category"> | Date | string | null
    rel_menu?: MenuListRelationFilter
  }, "id">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrderInput | SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _avg?: CategoryAvgOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
    _sum?: CategorySumOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Category"> | number
    name?: StringWithAggregatesFilter<"Category"> | string
    created_at?: DateTimeWithAggregatesFilter<"Category"> | Date | string
    update_at?: DateTimeNullableWithAggregatesFilter<"Category"> | Date | string | null
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    phone?: StringNullableFilter<"User"> | string | null
    poin?: IntFilter<"User"> | number
    id_status?: IntFilter<"User"> | number
    created_at?: DateTimeFilter<"User"> | Date | string
    update_at?: DateTimeNullableFilter<"User"> | Date | string | null
    rel_status?: XOR<StatusScalarRelationFilter, StatusWhereInput>
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    poin?: SortOrder
    id_status?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrderInput | SortOrder
    rel_status?: StatusOrderByWithRelationInput
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    phone?: StringNullableFilter<"User"> | string | null
    poin?: IntFilter<"User"> | number
    id_status?: IntFilter<"User"> | number
    created_at?: DateTimeFilter<"User"> | Date | string
    update_at?: DateTimeNullableFilter<"User"> | Date | string | null
    rel_status?: XOR<StatusScalarRelationFilter, StatusWhereInput>
  }, "id" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    poin?: SortOrder
    id_status?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    poin?: IntWithAggregatesFilter<"User"> | number
    id_status?: IntWithAggregatesFilter<"User"> | number
    created_at?: DateTimeWithAggregatesFilter<"User"> | Date | string
    update_at?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type CourierWhereInput = {
    AND?: CourierWhereInput | CourierWhereInput[]
    OR?: CourierWhereInput[]
    NOT?: CourierWhereInput | CourierWhereInput[]
    id?: StringFilter<"Courier"> | string
    username?: StringFilter<"Courier"> | string
    password?: StringFilter<"Courier"> | string
    name?: StringFilter<"Courier"> | string
    email?: StringFilter<"Courier"> | string
    phone?: StringNullableFilter<"Courier"> | string | null
    number_plate?: StringFilter<"Courier"> | string
    id_brand?: IntFilter<"Courier"> | number
    color?: StringFilter<"Courier"> | string
    is_active?: BoolFilter<"Courier"> | boolean
    id_status?: IntFilter<"Courier"> | number
    created_at?: DateTimeFilter<"Courier"> | Date | string
    update_at?: DateTimeNullableFilter<"Courier"> | Date | string | null
    rel_brand?: XOR<BrandScalarRelationFilter, BrandWhereInput>
    rel_status?: XOR<StatusScalarRelationFilter, StatusWhereInput>
  }

  export type CourierOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    number_plate?: SortOrder
    id_brand?: SortOrder
    color?: SortOrder
    is_active?: SortOrder
    id_status?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrderInput | SortOrder
    rel_brand?: BrandOrderByWithRelationInput
    rel_status?: StatusOrderByWithRelationInput
    _relevance?: CourierOrderByRelevanceInput
  }

  export type CourierWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    AND?: CourierWhereInput | CourierWhereInput[]
    OR?: CourierWhereInput[]
    NOT?: CourierWhereInput | CourierWhereInput[]
    password?: StringFilter<"Courier"> | string
    name?: StringFilter<"Courier"> | string
    email?: StringFilter<"Courier"> | string
    phone?: StringNullableFilter<"Courier"> | string | null
    number_plate?: StringFilter<"Courier"> | string
    id_brand?: IntFilter<"Courier"> | number
    color?: StringFilter<"Courier"> | string
    is_active?: BoolFilter<"Courier"> | boolean
    id_status?: IntFilter<"Courier"> | number
    created_at?: DateTimeFilter<"Courier"> | Date | string
    update_at?: DateTimeNullableFilter<"Courier"> | Date | string | null
    rel_brand?: XOR<BrandScalarRelationFilter, BrandWhereInput>
    rel_status?: XOR<StatusScalarRelationFilter, StatusWhereInput>
  }, "id" | "username">

  export type CourierOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    number_plate?: SortOrder
    id_brand?: SortOrder
    color?: SortOrder
    is_active?: SortOrder
    id_status?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrderInput | SortOrder
    _count?: CourierCountOrderByAggregateInput
    _avg?: CourierAvgOrderByAggregateInput
    _max?: CourierMaxOrderByAggregateInput
    _min?: CourierMinOrderByAggregateInput
    _sum?: CourierSumOrderByAggregateInput
  }

  export type CourierScalarWhereWithAggregatesInput = {
    AND?: CourierScalarWhereWithAggregatesInput | CourierScalarWhereWithAggregatesInput[]
    OR?: CourierScalarWhereWithAggregatesInput[]
    NOT?: CourierScalarWhereWithAggregatesInput | CourierScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Courier"> | string
    username?: StringWithAggregatesFilter<"Courier"> | string
    password?: StringWithAggregatesFilter<"Courier"> | string
    name?: StringWithAggregatesFilter<"Courier"> | string
    email?: StringWithAggregatesFilter<"Courier"> | string
    phone?: StringNullableWithAggregatesFilter<"Courier"> | string | null
    number_plate?: StringWithAggregatesFilter<"Courier"> | string
    id_brand?: IntWithAggregatesFilter<"Courier"> | number
    color?: StringWithAggregatesFilter<"Courier"> | string
    is_active?: BoolWithAggregatesFilter<"Courier"> | boolean
    id_status?: IntWithAggregatesFilter<"Courier"> | number
    created_at?: DateTimeWithAggregatesFilter<"Courier"> | Date | string
    update_at?: DateTimeNullableWithAggregatesFilter<"Courier"> | Date | string | null
  }

  export type MerchantWhereInput = {
    AND?: MerchantWhereInput | MerchantWhereInput[]
    OR?: MerchantWhereInput[]
    NOT?: MerchantWhereInput | MerchantWhereInput[]
    id?: StringFilter<"Merchant"> | string
    username?: StringFilter<"Merchant"> | string
    password?: StringFilter<"Merchant"> | string
    name?: StringFilter<"Merchant"> | string
    address?: StringFilter<"Merchant"> | string
    id_subd?: IntFilter<"Merchant"> | number
    id_city?: IntFilter<"Merchant"> | number
    id_prov?: IntFilter<"Merchant"> | number
    email?: StringFilter<"Merchant"> | string
    phone?: StringNullableFilter<"Merchant"> | string | null
    is_open?: BoolFilter<"Merchant"> | boolean
    id_status?: IntFilter<"Merchant"> | number
    created_at?: DateTimeFilter<"Merchant"> | Date | string
    update_at?: DateTimeNullableFilter<"Merchant"> | Date | string | null
    rel_menu?: MenuListRelationFilter
    rel_subd?: XOR<SubdistrictScalarRelationFilter, SubdistrictWhereInput>
    rel_city?: XOR<CityScalarRelationFilter, CityWhereInput>
    rel_prov?: XOR<ProvinceScalarRelationFilter, ProvinceWhereInput>
    rel_status?: XOR<StatusScalarRelationFilter, StatusWhereInput>
  }

  export type MerchantOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    address?: SortOrder
    id_subd?: SortOrder
    id_city?: SortOrder
    id_prov?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    is_open?: SortOrder
    id_status?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrderInput | SortOrder
    rel_menu?: MenuOrderByRelationAggregateInput
    rel_subd?: SubdistrictOrderByWithRelationInput
    rel_city?: CityOrderByWithRelationInput
    rel_prov?: ProvinceOrderByWithRelationInput
    rel_status?: StatusOrderByWithRelationInput
    _relevance?: MerchantOrderByRelevanceInput
  }

  export type MerchantWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    AND?: MerchantWhereInput | MerchantWhereInput[]
    OR?: MerchantWhereInput[]
    NOT?: MerchantWhereInput | MerchantWhereInput[]
    password?: StringFilter<"Merchant"> | string
    name?: StringFilter<"Merchant"> | string
    address?: StringFilter<"Merchant"> | string
    id_subd?: IntFilter<"Merchant"> | number
    id_city?: IntFilter<"Merchant"> | number
    id_prov?: IntFilter<"Merchant"> | number
    email?: StringFilter<"Merchant"> | string
    phone?: StringNullableFilter<"Merchant"> | string | null
    is_open?: BoolFilter<"Merchant"> | boolean
    id_status?: IntFilter<"Merchant"> | number
    created_at?: DateTimeFilter<"Merchant"> | Date | string
    update_at?: DateTimeNullableFilter<"Merchant"> | Date | string | null
    rel_menu?: MenuListRelationFilter
    rel_subd?: XOR<SubdistrictScalarRelationFilter, SubdistrictWhereInput>
    rel_city?: XOR<CityScalarRelationFilter, CityWhereInput>
    rel_prov?: XOR<ProvinceScalarRelationFilter, ProvinceWhereInput>
    rel_status?: XOR<StatusScalarRelationFilter, StatusWhereInput>
  }, "id" | "username">

  export type MerchantOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    address?: SortOrder
    id_subd?: SortOrder
    id_city?: SortOrder
    id_prov?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    is_open?: SortOrder
    id_status?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrderInput | SortOrder
    _count?: MerchantCountOrderByAggregateInput
    _avg?: MerchantAvgOrderByAggregateInput
    _max?: MerchantMaxOrderByAggregateInput
    _min?: MerchantMinOrderByAggregateInput
    _sum?: MerchantSumOrderByAggregateInput
  }

  export type MerchantScalarWhereWithAggregatesInput = {
    AND?: MerchantScalarWhereWithAggregatesInput | MerchantScalarWhereWithAggregatesInput[]
    OR?: MerchantScalarWhereWithAggregatesInput[]
    NOT?: MerchantScalarWhereWithAggregatesInput | MerchantScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Merchant"> | string
    username?: StringWithAggregatesFilter<"Merchant"> | string
    password?: StringWithAggregatesFilter<"Merchant"> | string
    name?: StringWithAggregatesFilter<"Merchant"> | string
    address?: StringWithAggregatesFilter<"Merchant"> | string
    id_subd?: IntWithAggregatesFilter<"Merchant"> | number
    id_city?: IntWithAggregatesFilter<"Merchant"> | number
    id_prov?: IntWithAggregatesFilter<"Merchant"> | number
    email?: StringWithAggregatesFilter<"Merchant"> | string
    phone?: StringNullableWithAggregatesFilter<"Merchant"> | string | null
    is_open?: BoolWithAggregatesFilter<"Merchant"> | boolean
    id_status?: IntWithAggregatesFilter<"Merchant"> | number
    created_at?: DateTimeWithAggregatesFilter<"Merchant"> | Date | string
    update_at?: DateTimeNullableWithAggregatesFilter<"Merchant"> | Date | string | null
  }

  export type MenuWhereInput = {
    AND?: MenuWhereInput | MenuWhereInput[]
    OR?: MenuWhereInput[]
    NOT?: MenuWhereInput | MenuWhereInput[]
    id?: StringFilter<"Menu"> | string
    name?: StringFilter<"Menu"> | string
    detail?: StringNullableFilter<"Menu"> | string | null
    id_merchant?: StringFilter<"Menu"> | string
    id_category?: IntFilter<"Menu"> | number
    price?: DecimalFilter<"Menu"> | Decimal | DecimalJsLike | number | string
    is_ready?: BoolFilter<"Menu"> | boolean
    created_at?: DateTimeFilter<"Menu"> | Date | string
    update_at?: DateTimeNullableFilter<"Menu"> | Date | string | null
    rel_variant?: VariantListRelationFilter
    rel_merchant?: XOR<MerchantScalarRelationFilter, MerchantWhereInput>
    rel_category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
  }

  export type MenuOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    detail?: SortOrderInput | SortOrder
    id_merchant?: SortOrder
    id_category?: SortOrder
    price?: SortOrder
    is_ready?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrderInput | SortOrder
    rel_variant?: VariantOrderByRelationAggregateInput
    rel_merchant?: MerchantOrderByWithRelationInput
    rel_category?: CategoryOrderByWithRelationInput
    _relevance?: MenuOrderByRelevanceInput
  }

  export type MenuWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MenuWhereInput | MenuWhereInput[]
    OR?: MenuWhereInput[]
    NOT?: MenuWhereInput | MenuWhereInput[]
    name?: StringFilter<"Menu"> | string
    detail?: StringNullableFilter<"Menu"> | string | null
    id_merchant?: StringFilter<"Menu"> | string
    id_category?: IntFilter<"Menu"> | number
    price?: DecimalFilter<"Menu"> | Decimal | DecimalJsLike | number | string
    is_ready?: BoolFilter<"Menu"> | boolean
    created_at?: DateTimeFilter<"Menu"> | Date | string
    update_at?: DateTimeNullableFilter<"Menu"> | Date | string | null
    rel_variant?: VariantListRelationFilter
    rel_merchant?: XOR<MerchantScalarRelationFilter, MerchantWhereInput>
    rel_category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
  }, "id">

  export type MenuOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    detail?: SortOrderInput | SortOrder
    id_merchant?: SortOrder
    id_category?: SortOrder
    price?: SortOrder
    is_ready?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrderInput | SortOrder
    _count?: MenuCountOrderByAggregateInput
    _avg?: MenuAvgOrderByAggregateInput
    _max?: MenuMaxOrderByAggregateInput
    _min?: MenuMinOrderByAggregateInput
    _sum?: MenuSumOrderByAggregateInput
  }

  export type MenuScalarWhereWithAggregatesInput = {
    AND?: MenuScalarWhereWithAggregatesInput | MenuScalarWhereWithAggregatesInput[]
    OR?: MenuScalarWhereWithAggregatesInput[]
    NOT?: MenuScalarWhereWithAggregatesInput | MenuScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Menu"> | string
    name?: StringWithAggregatesFilter<"Menu"> | string
    detail?: StringNullableWithAggregatesFilter<"Menu"> | string | null
    id_merchant?: StringWithAggregatesFilter<"Menu"> | string
    id_category?: IntWithAggregatesFilter<"Menu"> | number
    price?: DecimalWithAggregatesFilter<"Menu"> | Decimal | DecimalJsLike | number | string
    is_ready?: BoolWithAggregatesFilter<"Menu"> | boolean
    created_at?: DateTimeWithAggregatesFilter<"Menu"> | Date | string
    update_at?: DateTimeNullableWithAggregatesFilter<"Menu"> | Date | string | null
  }

  export type VariantWhereInput = {
    AND?: VariantWhereInput | VariantWhereInput[]
    OR?: VariantWhereInput[]
    NOT?: VariantWhereInput | VariantWhereInput[]
    id?: StringFilter<"Variant"> | string
    name?: StringFilter<"Variant"> | string
    id_menu?: StringFilter<"Variant"> | string
    created_at?: DateTimeFilter<"Variant"> | Date | string
    update_at?: DateTimeNullableFilter<"Variant"> | Date | string | null
    rel_variant_item?: Variant_itemListRelationFilter
    rel_menu?: XOR<MenuScalarRelationFilter, MenuWhereInput>
  }

  export type VariantOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    id_menu?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrderInput | SortOrder
    rel_variant_item?: Variant_itemOrderByRelationAggregateInput
    rel_menu?: MenuOrderByWithRelationInput
    _relevance?: VariantOrderByRelevanceInput
  }

  export type VariantWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VariantWhereInput | VariantWhereInput[]
    OR?: VariantWhereInput[]
    NOT?: VariantWhereInput | VariantWhereInput[]
    name?: StringFilter<"Variant"> | string
    id_menu?: StringFilter<"Variant"> | string
    created_at?: DateTimeFilter<"Variant"> | Date | string
    update_at?: DateTimeNullableFilter<"Variant"> | Date | string | null
    rel_variant_item?: Variant_itemListRelationFilter
    rel_menu?: XOR<MenuScalarRelationFilter, MenuWhereInput>
  }, "id">

  export type VariantOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    id_menu?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrderInput | SortOrder
    _count?: VariantCountOrderByAggregateInput
    _max?: VariantMaxOrderByAggregateInput
    _min?: VariantMinOrderByAggregateInput
  }

  export type VariantScalarWhereWithAggregatesInput = {
    AND?: VariantScalarWhereWithAggregatesInput | VariantScalarWhereWithAggregatesInput[]
    OR?: VariantScalarWhereWithAggregatesInput[]
    NOT?: VariantScalarWhereWithAggregatesInput | VariantScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Variant"> | string
    name?: StringWithAggregatesFilter<"Variant"> | string
    id_menu?: StringWithAggregatesFilter<"Variant"> | string
    created_at?: DateTimeWithAggregatesFilter<"Variant"> | Date | string
    update_at?: DateTimeNullableWithAggregatesFilter<"Variant"> | Date | string | null
  }

  export type Variant_itemWhereInput = {
    AND?: Variant_itemWhereInput | Variant_itemWhereInput[]
    OR?: Variant_itemWhereInput[]
    NOT?: Variant_itemWhereInput | Variant_itemWhereInput[]
    id?: StringFilter<"Variant_item"> | string
    name?: StringFilter<"Variant_item"> | string
    id_variant?: StringFilter<"Variant_item"> | string
    price?: DecimalFilter<"Variant_item"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFilter<"Variant_item"> | Date | string
    update_at?: DateTimeNullableFilter<"Variant_item"> | Date | string | null
    rel_variant?: XOR<VariantScalarRelationFilter, VariantWhereInput>
  }

  export type Variant_itemOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    id_variant?: SortOrder
    price?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrderInput | SortOrder
    rel_variant?: VariantOrderByWithRelationInput
    _relevance?: Variant_itemOrderByRelevanceInput
  }

  export type Variant_itemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: Variant_itemWhereInput | Variant_itemWhereInput[]
    OR?: Variant_itemWhereInput[]
    NOT?: Variant_itemWhereInput | Variant_itemWhereInput[]
    name?: StringFilter<"Variant_item"> | string
    id_variant?: StringFilter<"Variant_item"> | string
    price?: DecimalFilter<"Variant_item"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFilter<"Variant_item"> | Date | string
    update_at?: DateTimeNullableFilter<"Variant_item"> | Date | string | null
    rel_variant?: XOR<VariantScalarRelationFilter, VariantWhereInput>
  }, "id">

  export type Variant_itemOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    id_variant?: SortOrder
    price?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrderInput | SortOrder
    _count?: Variant_itemCountOrderByAggregateInput
    _avg?: Variant_itemAvgOrderByAggregateInput
    _max?: Variant_itemMaxOrderByAggregateInput
    _min?: Variant_itemMinOrderByAggregateInput
    _sum?: Variant_itemSumOrderByAggregateInput
  }

  export type Variant_itemScalarWhereWithAggregatesInput = {
    AND?: Variant_itemScalarWhereWithAggregatesInput | Variant_itemScalarWhereWithAggregatesInput[]
    OR?: Variant_itemScalarWhereWithAggregatesInput[]
    NOT?: Variant_itemScalarWhereWithAggregatesInput | Variant_itemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Variant_item"> | string
    name?: StringWithAggregatesFilter<"Variant_item"> | string
    id_variant?: StringWithAggregatesFilter<"Variant_item"> | string
    price?: DecimalWithAggregatesFilter<"Variant_item"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeWithAggregatesFilter<"Variant_item"> | Date | string
    update_at?: DateTimeNullableWithAggregatesFilter<"Variant_item"> | Date | string | null
  }

  export type OrderWhereInput = {
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    id?: StringFilter<"Order"> | string
    id_user?: StringFilter<"Order"> | string
    name_user?: StringFilter<"Order"> | string
    id_merchant?: StringFilter<"Order"> | string
    name_merchant?: StringFilter<"Order"> | string
    id_courier?: StringFilter<"Order"> | string
    name_courier?: StringFilter<"Order"> | string
    destination?: StringFilter<"Order"> | string
    id_subd?: IntFilter<"Order"> | number
    name_subd?: StringFilter<"Order"> | string
    id_city?: IntFilter<"Order"> | number
    name_city?: StringFilter<"Order"> | string
    id_prov?: IntFilter<"Order"> | number
    name_prov?: StringFilter<"Order"> | string
    shipping_cost?: DecimalFilter<"Order"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFilter<"Order"> | Date | string
    update_at?: DateTimeNullableFilter<"Order"> | Date | string | null
    rel_order_item?: Order_itemListRelationFilter
  }

  export type OrderOrderByWithRelationInput = {
    id?: SortOrder
    id_user?: SortOrder
    name_user?: SortOrder
    id_merchant?: SortOrder
    name_merchant?: SortOrder
    id_courier?: SortOrder
    name_courier?: SortOrder
    destination?: SortOrder
    id_subd?: SortOrder
    name_subd?: SortOrder
    id_city?: SortOrder
    name_city?: SortOrder
    id_prov?: SortOrder
    name_prov?: SortOrder
    shipping_cost?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrderInput | SortOrder
    rel_order_item?: Order_itemOrderByRelationAggregateInput
    _relevance?: OrderOrderByRelevanceInput
  }

  export type OrderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    id_user?: StringFilter<"Order"> | string
    name_user?: StringFilter<"Order"> | string
    id_merchant?: StringFilter<"Order"> | string
    name_merchant?: StringFilter<"Order"> | string
    id_courier?: StringFilter<"Order"> | string
    name_courier?: StringFilter<"Order"> | string
    destination?: StringFilter<"Order"> | string
    id_subd?: IntFilter<"Order"> | number
    name_subd?: StringFilter<"Order"> | string
    id_city?: IntFilter<"Order"> | number
    name_city?: StringFilter<"Order"> | string
    id_prov?: IntFilter<"Order"> | number
    name_prov?: StringFilter<"Order"> | string
    shipping_cost?: DecimalFilter<"Order"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFilter<"Order"> | Date | string
    update_at?: DateTimeNullableFilter<"Order"> | Date | string | null
    rel_order_item?: Order_itemListRelationFilter
  }, "id">

  export type OrderOrderByWithAggregationInput = {
    id?: SortOrder
    id_user?: SortOrder
    name_user?: SortOrder
    id_merchant?: SortOrder
    name_merchant?: SortOrder
    id_courier?: SortOrder
    name_courier?: SortOrder
    destination?: SortOrder
    id_subd?: SortOrder
    name_subd?: SortOrder
    id_city?: SortOrder
    name_city?: SortOrder
    id_prov?: SortOrder
    name_prov?: SortOrder
    shipping_cost?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrderInput | SortOrder
    _count?: OrderCountOrderByAggregateInput
    _avg?: OrderAvgOrderByAggregateInput
    _max?: OrderMaxOrderByAggregateInput
    _min?: OrderMinOrderByAggregateInput
    _sum?: OrderSumOrderByAggregateInput
  }

  export type OrderScalarWhereWithAggregatesInput = {
    AND?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    OR?: OrderScalarWhereWithAggregatesInput[]
    NOT?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Order"> | string
    id_user?: StringWithAggregatesFilter<"Order"> | string
    name_user?: StringWithAggregatesFilter<"Order"> | string
    id_merchant?: StringWithAggregatesFilter<"Order"> | string
    name_merchant?: StringWithAggregatesFilter<"Order"> | string
    id_courier?: StringWithAggregatesFilter<"Order"> | string
    name_courier?: StringWithAggregatesFilter<"Order"> | string
    destination?: StringWithAggregatesFilter<"Order"> | string
    id_subd?: IntWithAggregatesFilter<"Order"> | number
    name_subd?: StringWithAggregatesFilter<"Order"> | string
    id_city?: IntWithAggregatesFilter<"Order"> | number
    name_city?: StringWithAggregatesFilter<"Order"> | string
    id_prov?: IntWithAggregatesFilter<"Order"> | number
    name_prov?: StringWithAggregatesFilter<"Order"> | string
    shipping_cost?: DecimalWithAggregatesFilter<"Order"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeWithAggregatesFilter<"Order"> | Date | string
    update_at?: DateTimeNullableWithAggregatesFilter<"Order"> | Date | string | null
  }

  export type Order_itemWhereInput = {
    AND?: Order_itemWhereInput | Order_itemWhereInput[]
    OR?: Order_itemWhereInput[]
    NOT?: Order_itemWhereInput | Order_itemWhereInput[]
    id?: StringFilter<"Order_item"> | string
    id_menu?: StringFilter<"Order_item"> | string
    name_menu?: StringFilter<"Order_item"> | string
    id_variant?: StringFilter<"Order_item"> | string
    name_variant?: StringFilter<"Order_item"> | string
    qty?: IntFilter<"Order_item"> | number
    note?: StringFilter<"Order_item"> | string
    price?: DecimalFilter<"Order_item"> | Decimal | DecimalJsLike | number | string
    id_order?: StringFilter<"Order_item"> | string
    created_at?: DateTimeFilter<"Order_item"> | Date | string
    update_at?: DateTimeNullableFilter<"Order_item"> | Date | string | null
    rel_order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
  }

  export type Order_itemOrderByWithRelationInput = {
    id?: SortOrder
    id_menu?: SortOrder
    name_menu?: SortOrder
    id_variant?: SortOrder
    name_variant?: SortOrder
    qty?: SortOrder
    note?: SortOrder
    price?: SortOrder
    id_order?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrderInput | SortOrder
    rel_order?: OrderOrderByWithRelationInput
    _relevance?: Order_itemOrderByRelevanceInput
  }

  export type Order_itemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: Order_itemWhereInput | Order_itemWhereInput[]
    OR?: Order_itemWhereInput[]
    NOT?: Order_itemWhereInput | Order_itemWhereInput[]
    id_menu?: StringFilter<"Order_item"> | string
    name_menu?: StringFilter<"Order_item"> | string
    id_variant?: StringFilter<"Order_item"> | string
    name_variant?: StringFilter<"Order_item"> | string
    qty?: IntFilter<"Order_item"> | number
    note?: StringFilter<"Order_item"> | string
    price?: DecimalFilter<"Order_item"> | Decimal | DecimalJsLike | number | string
    id_order?: StringFilter<"Order_item"> | string
    created_at?: DateTimeFilter<"Order_item"> | Date | string
    update_at?: DateTimeNullableFilter<"Order_item"> | Date | string | null
    rel_order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
  }, "id">

  export type Order_itemOrderByWithAggregationInput = {
    id?: SortOrder
    id_menu?: SortOrder
    name_menu?: SortOrder
    id_variant?: SortOrder
    name_variant?: SortOrder
    qty?: SortOrder
    note?: SortOrder
    price?: SortOrder
    id_order?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrderInput | SortOrder
    _count?: Order_itemCountOrderByAggregateInput
    _avg?: Order_itemAvgOrderByAggregateInput
    _max?: Order_itemMaxOrderByAggregateInput
    _min?: Order_itemMinOrderByAggregateInput
    _sum?: Order_itemSumOrderByAggregateInput
  }

  export type Order_itemScalarWhereWithAggregatesInput = {
    AND?: Order_itemScalarWhereWithAggregatesInput | Order_itemScalarWhereWithAggregatesInput[]
    OR?: Order_itemScalarWhereWithAggregatesInput[]
    NOT?: Order_itemScalarWhereWithAggregatesInput | Order_itemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Order_item"> | string
    id_menu?: StringWithAggregatesFilter<"Order_item"> | string
    name_menu?: StringWithAggregatesFilter<"Order_item"> | string
    id_variant?: StringWithAggregatesFilter<"Order_item"> | string
    name_variant?: StringWithAggregatesFilter<"Order_item"> | string
    qty?: IntWithAggregatesFilter<"Order_item"> | number
    note?: StringWithAggregatesFilter<"Order_item"> | string
    price?: DecimalWithAggregatesFilter<"Order_item"> | Decimal | DecimalJsLike | number | string
    id_order?: StringWithAggregatesFilter<"Order_item"> | string
    created_at?: DateTimeWithAggregatesFilter<"Order_item"> | Date | string
    update_at?: DateTimeNullableWithAggregatesFilter<"Order_item"> | Date | string | null
  }

  export type Log_orderWhereInput = {
    AND?: Log_orderWhereInput | Log_orderWhereInput[]
    OR?: Log_orderWhereInput[]
    NOT?: Log_orderWhereInput | Log_orderWhereInput[]
    id?: IntFilter<"Log_order"> | number
    id_order?: StringFilter<"Log_order"> | string
    id_status?: IntFilter<"Log_order"> | number
    detail_status?: StringFilter<"Log_order"> | string
    change_by?: StringFilter<"Log_order"> | string
    id_changer?: StringFilter<"Log_order"> | string
    time?: DateTimeFilter<"Log_order"> | Date | string
    rel_status?: XOR<Status_orderScalarRelationFilter, Status_orderWhereInput>
  }

  export type Log_orderOrderByWithRelationInput = {
    id?: SortOrder
    id_order?: SortOrder
    id_status?: SortOrder
    detail_status?: SortOrder
    change_by?: SortOrder
    id_changer?: SortOrder
    time?: SortOrder
    rel_status?: Status_orderOrderByWithRelationInput
    _relevance?: Log_orderOrderByRelevanceInput
  }

  export type Log_orderWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: Log_orderWhereInput | Log_orderWhereInput[]
    OR?: Log_orderWhereInput[]
    NOT?: Log_orderWhereInput | Log_orderWhereInput[]
    id_order?: StringFilter<"Log_order"> | string
    id_status?: IntFilter<"Log_order"> | number
    detail_status?: StringFilter<"Log_order"> | string
    change_by?: StringFilter<"Log_order"> | string
    id_changer?: StringFilter<"Log_order"> | string
    time?: DateTimeFilter<"Log_order"> | Date | string
    rel_status?: XOR<Status_orderScalarRelationFilter, Status_orderWhereInput>
  }, "id">

  export type Log_orderOrderByWithAggregationInput = {
    id?: SortOrder
    id_order?: SortOrder
    id_status?: SortOrder
    detail_status?: SortOrder
    change_by?: SortOrder
    id_changer?: SortOrder
    time?: SortOrder
    _count?: Log_orderCountOrderByAggregateInput
    _avg?: Log_orderAvgOrderByAggregateInput
    _max?: Log_orderMaxOrderByAggregateInput
    _min?: Log_orderMinOrderByAggregateInput
    _sum?: Log_orderSumOrderByAggregateInput
  }

  export type Log_orderScalarWhereWithAggregatesInput = {
    AND?: Log_orderScalarWhereWithAggregatesInput | Log_orderScalarWhereWithAggregatesInput[]
    OR?: Log_orderScalarWhereWithAggregatesInput[]
    NOT?: Log_orderScalarWhereWithAggregatesInput | Log_orderScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Log_order"> | number
    id_order?: StringWithAggregatesFilter<"Log_order"> | string
    id_status?: IntWithAggregatesFilter<"Log_order"> | number
    detail_status?: StringWithAggregatesFilter<"Log_order"> | string
    change_by?: StringWithAggregatesFilter<"Log_order"> | string
    id_changer?: StringWithAggregatesFilter<"Log_order"> | string
    time?: DateTimeWithAggregatesFilter<"Log_order"> | Date | string
  }

  export type History_orderWhereInput = {
    AND?: History_orderWhereInput | History_orderWhereInput[]
    OR?: History_orderWhereInput[]
    NOT?: History_orderWhereInput | History_orderWhereInput[]
    id?: StringFilter<"History_order"> | string
    id_user?: StringFilter<"History_order"> | string
    name_user?: StringFilter<"History_order"> | string
    id_merchant?: StringFilter<"History_order"> | string
    name_merchant?: StringFilter<"History_order"> | string
    id_courier?: StringFilter<"History_order"> | string
    name_courier?: StringFilter<"History_order"> | string
    destination?: StringFilter<"History_order"> | string
    id_subd?: IntFilter<"History_order"> | number
    name_subd?: StringFilter<"History_order"> | string
    id_city?: IntFilter<"History_order"> | number
    name_city?: StringFilter<"History_order"> | string
    id_prov?: IntFilter<"History_order"> | number
    name_prov?: StringFilter<"History_order"> | string
    shipping_cost?: DecimalFilter<"History_order"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFilter<"History_order"> | Date | string
    update_at?: DateTimeNullableFilter<"History_order"> | Date | string | null
    rel_history_order_item?: History_order_itemListRelationFilter
  }

  export type History_orderOrderByWithRelationInput = {
    id?: SortOrder
    id_user?: SortOrder
    name_user?: SortOrder
    id_merchant?: SortOrder
    name_merchant?: SortOrder
    id_courier?: SortOrder
    name_courier?: SortOrder
    destination?: SortOrder
    id_subd?: SortOrder
    name_subd?: SortOrder
    id_city?: SortOrder
    name_city?: SortOrder
    id_prov?: SortOrder
    name_prov?: SortOrder
    shipping_cost?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrderInput | SortOrder
    rel_history_order_item?: History_order_itemOrderByRelationAggregateInput
    _relevance?: History_orderOrderByRelevanceInput
  }

  export type History_orderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: History_orderWhereInput | History_orderWhereInput[]
    OR?: History_orderWhereInput[]
    NOT?: History_orderWhereInput | History_orderWhereInput[]
    id_user?: StringFilter<"History_order"> | string
    name_user?: StringFilter<"History_order"> | string
    id_merchant?: StringFilter<"History_order"> | string
    name_merchant?: StringFilter<"History_order"> | string
    id_courier?: StringFilter<"History_order"> | string
    name_courier?: StringFilter<"History_order"> | string
    destination?: StringFilter<"History_order"> | string
    id_subd?: IntFilter<"History_order"> | number
    name_subd?: StringFilter<"History_order"> | string
    id_city?: IntFilter<"History_order"> | number
    name_city?: StringFilter<"History_order"> | string
    id_prov?: IntFilter<"History_order"> | number
    name_prov?: StringFilter<"History_order"> | string
    shipping_cost?: DecimalFilter<"History_order"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFilter<"History_order"> | Date | string
    update_at?: DateTimeNullableFilter<"History_order"> | Date | string | null
    rel_history_order_item?: History_order_itemListRelationFilter
  }, "id">

  export type History_orderOrderByWithAggregationInput = {
    id?: SortOrder
    id_user?: SortOrder
    name_user?: SortOrder
    id_merchant?: SortOrder
    name_merchant?: SortOrder
    id_courier?: SortOrder
    name_courier?: SortOrder
    destination?: SortOrder
    id_subd?: SortOrder
    name_subd?: SortOrder
    id_city?: SortOrder
    name_city?: SortOrder
    id_prov?: SortOrder
    name_prov?: SortOrder
    shipping_cost?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrderInput | SortOrder
    _count?: History_orderCountOrderByAggregateInput
    _avg?: History_orderAvgOrderByAggregateInput
    _max?: History_orderMaxOrderByAggregateInput
    _min?: History_orderMinOrderByAggregateInput
    _sum?: History_orderSumOrderByAggregateInput
  }

  export type History_orderScalarWhereWithAggregatesInput = {
    AND?: History_orderScalarWhereWithAggregatesInput | History_orderScalarWhereWithAggregatesInput[]
    OR?: History_orderScalarWhereWithAggregatesInput[]
    NOT?: History_orderScalarWhereWithAggregatesInput | History_orderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"History_order"> | string
    id_user?: StringWithAggregatesFilter<"History_order"> | string
    name_user?: StringWithAggregatesFilter<"History_order"> | string
    id_merchant?: StringWithAggregatesFilter<"History_order"> | string
    name_merchant?: StringWithAggregatesFilter<"History_order"> | string
    id_courier?: StringWithAggregatesFilter<"History_order"> | string
    name_courier?: StringWithAggregatesFilter<"History_order"> | string
    destination?: StringWithAggregatesFilter<"History_order"> | string
    id_subd?: IntWithAggregatesFilter<"History_order"> | number
    name_subd?: StringWithAggregatesFilter<"History_order"> | string
    id_city?: IntWithAggregatesFilter<"History_order"> | number
    name_city?: StringWithAggregatesFilter<"History_order"> | string
    id_prov?: IntWithAggregatesFilter<"History_order"> | number
    name_prov?: StringWithAggregatesFilter<"History_order"> | string
    shipping_cost?: DecimalWithAggregatesFilter<"History_order"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeWithAggregatesFilter<"History_order"> | Date | string
    update_at?: DateTimeNullableWithAggregatesFilter<"History_order"> | Date | string | null
  }

  export type History_order_itemWhereInput = {
    AND?: History_order_itemWhereInput | History_order_itemWhereInput[]
    OR?: History_order_itemWhereInput[]
    NOT?: History_order_itemWhereInput | History_order_itemWhereInput[]
    id?: StringFilter<"History_order_item"> | string
    id_menu?: StringFilter<"History_order_item"> | string
    name_menu?: StringFilter<"History_order_item"> | string
    id_variant?: StringFilter<"History_order_item"> | string
    name_variant?: StringFilter<"History_order_item"> | string
    qty?: IntFilter<"History_order_item"> | number
    note?: StringFilter<"History_order_item"> | string
    price?: DecimalFilter<"History_order_item"> | Decimal | DecimalJsLike | number | string
    id_order?: StringFilter<"History_order_item"> | string
    created_at?: DateTimeFilter<"History_order_item"> | Date | string
    update_at?: DateTimeNullableFilter<"History_order_item"> | Date | string | null
    rel_history_order?: XOR<History_orderScalarRelationFilter, History_orderWhereInput>
  }

  export type History_order_itemOrderByWithRelationInput = {
    id?: SortOrder
    id_menu?: SortOrder
    name_menu?: SortOrder
    id_variant?: SortOrder
    name_variant?: SortOrder
    qty?: SortOrder
    note?: SortOrder
    price?: SortOrder
    id_order?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrderInput | SortOrder
    rel_history_order?: History_orderOrderByWithRelationInput
    _relevance?: History_order_itemOrderByRelevanceInput
  }

  export type History_order_itemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: History_order_itemWhereInput | History_order_itemWhereInput[]
    OR?: History_order_itemWhereInput[]
    NOT?: History_order_itemWhereInput | History_order_itemWhereInput[]
    id_menu?: StringFilter<"History_order_item"> | string
    name_menu?: StringFilter<"History_order_item"> | string
    id_variant?: StringFilter<"History_order_item"> | string
    name_variant?: StringFilter<"History_order_item"> | string
    qty?: IntFilter<"History_order_item"> | number
    note?: StringFilter<"History_order_item"> | string
    price?: DecimalFilter<"History_order_item"> | Decimal | DecimalJsLike | number | string
    id_order?: StringFilter<"History_order_item"> | string
    created_at?: DateTimeFilter<"History_order_item"> | Date | string
    update_at?: DateTimeNullableFilter<"History_order_item"> | Date | string | null
    rel_history_order?: XOR<History_orderScalarRelationFilter, History_orderWhereInput>
  }, "id">

  export type History_order_itemOrderByWithAggregationInput = {
    id?: SortOrder
    id_menu?: SortOrder
    name_menu?: SortOrder
    id_variant?: SortOrder
    name_variant?: SortOrder
    qty?: SortOrder
    note?: SortOrder
    price?: SortOrder
    id_order?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrderInput | SortOrder
    _count?: History_order_itemCountOrderByAggregateInput
    _avg?: History_order_itemAvgOrderByAggregateInput
    _max?: History_order_itemMaxOrderByAggregateInput
    _min?: History_order_itemMinOrderByAggregateInput
    _sum?: History_order_itemSumOrderByAggregateInput
  }

  export type History_order_itemScalarWhereWithAggregatesInput = {
    AND?: History_order_itemScalarWhereWithAggregatesInput | History_order_itemScalarWhereWithAggregatesInput[]
    OR?: History_order_itemScalarWhereWithAggregatesInput[]
    NOT?: History_order_itemScalarWhereWithAggregatesInput | History_order_itemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"History_order_item"> | string
    id_menu?: StringWithAggregatesFilter<"History_order_item"> | string
    name_menu?: StringWithAggregatesFilter<"History_order_item"> | string
    id_variant?: StringWithAggregatesFilter<"History_order_item"> | string
    name_variant?: StringWithAggregatesFilter<"History_order_item"> | string
    qty?: IntWithAggregatesFilter<"History_order_item"> | number
    note?: StringWithAggregatesFilter<"History_order_item"> | string
    price?: DecimalWithAggregatesFilter<"History_order_item"> | Decimal | DecimalJsLike | number | string
    id_order?: StringWithAggregatesFilter<"History_order_item"> | string
    created_at?: DateTimeWithAggregatesFilter<"History_order_item"> | Date | string
    update_at?: DateTimeNullableWithAggregatesFilter<"History_order_item"> | Date | string | null
  }

  export type StatusCreateInput = {
    name: string
    created_at?: Date | string
    update_at?: Date | string | null
    rel_user?: UserCreateNestedManyWithoutRel_statusInput
    rel_courier?: CourierCreateNestedManyWithoutRel_statusInput
    rel_merchant?: MerchantCreateNestedManyWithoutRel_statusInput
  }

  export type StatusUncheckedCreateInput = {
    id?: number
    name: string
    created_at?: Date | string
    update_at?: Date | string | null
    rel_user?: UserUncheckedCreateNestedManyWithoutRel_statusInput
    rel_courier?: CourierUncheckedCreateNestedManyWithoutRel_statusInput
    rel_merchant?: MerchantUncheckedCreateNestedManyWithoutRel_statusInput
  }

  export type StatusUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_user?: UserUpdateManyWithoutRel_statusNestedInput
    rel_courier?: CourierUpdateManyWithoutRel_statusNestedInput
    rel_merchant?: MerchantUpdateManyWithoutRel_statusNestedInput
  }

  export type StatusUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_user?: UserUncheckedUpdateManyWithoutRel_statusNestedInput
    rel_courier?: CourierUncheckedUpdateManyWithoutRel_statusNestedInput
    rel_merchant?: MerchantUncheckedUpdateManyWithoutRel_statusNestedInput
  }

  export type StatusCreateManyInput = {
    id?: number
    name: string
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type StatusUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StatusUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type Status_orderCreateInput = {
    name: string
    created_at?: Date | string
    update_at?: Date | string | null
    rel_log_order?: Log_orderCreateNestedManyWithoutRel_statusInput
  }

  export type Status_orderUncheckedCreateInput = {
    id?: number
    name: string
    created_at?: Date | string
    update_at?: Date | string | null
    rel_log_order?: Log_orderUncheckedCreateNestedManyWithoutRel_statusInput
  }

  export type Status_orderUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_log_order?: Log_orderUpdateManyWithoutRel_statusNestedInput
  }

  export type Status_orderUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_log_order?: Log_orderUncheckedUpdateManyWithoutRel_statusNestedInput
  }

  export type Status_orderCreateManyInput = {
    id?: number
    name: string
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type Status_orderUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type Status_orderUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BrandCreateInput = {
    name: string
    brand: string
    created_at?: Date | string
    update_at?: Date | string | null
    rel_courier?: CourierCreateNestedManyWithoutRel_brandInput
  }

  export type BrandUncheckedCreateInput = {
    id?: number
    name: string
    brand: string
    created_at?: Date | string
    update_at?: Date | string | null
    rel_courier?: CourierUncheckedCreateNestedManyWithoutRel_brandInput
  }

  export type BrandUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_courier?: CourierUpdateManyWithoutRel_brandNestedInput
  }

  export type BrandUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_courier?: CourierUncheckedUpdateManyWithoutRel_brandNestedInput
  }

  export type BrandCreateManyInput = {
    id?: number
    name: string
    brand: string
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type BrandUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BrandUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SubdistrictCreateInput = {
    name: string
    id_city: number
    created_at?: Date | string
    update_at?: Date | string | null
    rel_merchant?: MerchantCreateNestedManyWithoutRel_subdInput
  }

  export type SubdistrictUncheckedCreateInput = {
    id?: number
    name: string
    id_city: number
    created_at?: Date | string
    update_at?: Date | string | null
    rel_merchant?: MerchantUncheckedCreateNestedManyWithoutRel_subdInput
  }

  export type SubdistrictUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    id_city?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_merchant?: MerchantUpdateManyWithoutRel_subdNestedInput
  }

  export type SubdistrictUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    id_city?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_merchant?: MerchantUncheckedUpdateManyWithoutRel_subdNestedInput
  }

  export type SubdistrictCreateManyInput = {
    id?: number
    name: string
    id_city: number
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type SubdistrictUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    id_city?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SubdistrictUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    id_city?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CityCreateInput = {
    name: string
    id_prov: number
    created_at?: Date | string
    update_at?: Date | string | null
    rel_merchant?: MerchantCreateNestedManyWithoutRel_cityInput
  }

  export type CityUncheckedCreateInput = {
    id?: number
    name: string
    id_prov: number
    created_at?: Date | string
    update_at?: Date | string | null
    rel_merchant?: MerchantUncheckedCreateNestedManyWithoutRel_cityInput
  }

  export type CityUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    id_prov?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_merchant?: MerchantUpdateManyWithoutRel_cityNestedInput
  }

  export type CityUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    id_prov?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_merchant?: MerchantUncheckedUpdateManyWithoutRel_cityNestedInput
  }

  export type CityCreateManyInput = {
    id?: number
    name: string
    id_prov: number
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type CityUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    id_prov?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CityUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    id_prov?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProvinceCreateInput = {
    name: string
    created_at?: Date | string
    update_at?: Date | string | null
    rel_merchant?: MerchantCreateNestedManyWithoutRel_provInput
  }

  export type ProvinceUncheckedCreateInput = {
    id?: number
    name: string
    created_at?: Date | string
    update_at?: Date | string | null
    rel_merchant?: MerchantUncheckedCreateNestedManyWithoutRel_provInput
  }

  export type ProvinceUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_merchant?: MerchantUpdateManyWithoutRel_provNestedInput
  }

  export type ProvinceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_merchant?: MerchantUncheckedUpdateManyWithoutRel_provNestedInput
  }

  export type ProvinceCreateManyInput = {
    id?: number
    name: string
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type ProvinceUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProvinceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CategoryCreateInput = {
    name: string
    created_at?: Date | string
    update_at?: Date | string | null
    rel_menu?: MenuCreateNestedManyWithoutRel_categoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: number
    name: string
    created_at?: Date | string
    update_at?: Date | string | null
    rel_menu?: MenuUncheckedCreateNestedManyWithoutRel_categoryInput
  }

  export type CategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_menu?: MenuUpdateManyWithoutRel_categoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_menu?: MenuUncheckedUpdateManyWithoutRel_categoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: number
    name: string
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type CategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateInput = {
    id: string
    username: string
    password: string
    name: string
    email: string
    phone?: string | null
    poin: number
    created_at?: Date | string
    update_at?: Date | string | null
    rel_status: StatusCreateNestedOneWithoutRel_userInput
  }

  export type UserUncheckedCreateInput = {
    id: string
    username: string
    password: string
    name: string
    email: string
    phone?: string | null
    poin: number
    id_status: number
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    poin?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_status?: StatusUpdateOneRequiredWithoutRel_userNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    poin?: IntFieldUpdateOperationsInput | number
    id_status?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateManyInput = {
    id: string
    username: string
    password: string
    name: string
    email: string
    phone?: string | null
    poin: number
    id_status: number
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    poin?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    poin?: IntFieldUpdateOperationsInput | number
    id_status?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CourierCreateInput = {
    id: string
    username: string
    password: string
    name: string
    email: string
    phone?: string | null
    number_plate: string
    color: string
    is_active?: boolean
    created_at?: Date | string
    update_at?: Date | string | null
    rel_brand: BrandCreateNestedOneWithoutRel_courierInput
    rel_status: StatusCreateNestedOneWithoutRel_courierInput
  }

  export type CourierUncheckedCreateInput = {
    id: string
    username: string
    password: string
    name: string
    email: string
    phone?: string | null
    number_plate: string
    id_brand: number
    color: string
    is_active?: boolean
    id_status: number
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type CourierUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    number_plate?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_brand?: BrandUpdateOneRequiredWithoutRel_courierNestedInput
    rel_status?: StatusUpdateOneRequiredWithoutRel_courierNestedInput
  }

  export type CourierUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    number_plate?: StringFieldUpdateOperationsInput | string
    id_brand?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    id_status?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CourierCreateManyInput = {
    id: string
    username: string
    password: string
    name: string
    email: string
    phone?: string | null
    number_plate: string
    id_brand: number
    color: string
    is_active?: boolean
    id_status: number
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type CourierUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    number_plate?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CourierUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    number_plate?: StringFieldUpdateOperationsInput | string
    id_brand?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    id_status?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MerchantCreateInput = {
    id: string
    username: string
    password: string
    name: string
    address: string
    email: string
    phone?: string | null
    is_open?: boolean
    created_at?: Date | string
    update_at?: Date | string | null
    rel_menu?: MenuCreateNestedManyWithoutRel_merchantInput
    rel_subd: SubdistrictCreateNestedOneWithoutRel_merchantInput
    rel_city: CityCreateNestedOneWithoutRel_merchantInput
    rel_prov: ProvinceCreateNestedOneWithoutRel_merchantInput
    rel_status: StatusCreateNestedOneWithoutRel_merchantInput
  }

  export type MerchantUncheckedCreateInput = {
    id: string
    username: string
    password: string
    name: string
    address: string
    id_subd: number
    id_city: number
    id_prov: number
    email: string
    phone?: string | null
    is_open?: boolean
    id_status: number
    created_at?: Date | string
    update_at?: Date | string | null
    rel_menu?: MenuUncheckedCreateNestedManyWithoutRel_merchantInput
  }

  export type MerchantUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    is_open?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_menu?: MenuUpdateManyWithoutRel_merchantNestedInput
    rel_subd?: SubdistrictUpdateOneRequiredWithoutRel_merchantNestedInput
    rel_city?: CityUpdateOneRequiredWithoutRel_merchantNestedInput
    rel_prov?: ProvinceUpdateOneRequiredWithoutRel_merchantNestedInput
    rel_status?: StatusUpdateOneRequiredWithoutRel_merchantNestedInput
  }

  export type MerchantUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    id_subd?: IntFieldUpdateOperationsInput | number
    id_city?: IntFieldUpdateOperationsInput | number
    id_prov?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    is_open?: BoolFieldUpdateOperationsInput | boolean
    id_status?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_menu?: MenuUncheckedUpdateManyWithoutRel_merchantNestedInput
  }

  export type MerchantCreateManyInput = {
    id: string
    username: string
    password: string
    name: string
    address: string
    id_subd: number
    id_city: number
    id_prov: number
    email: string
    phone?: string | null
    is_open?: boolean
    id_status: number
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type MerchantUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    is_open?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MerchantUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    id_subd?: IntFieldUpdateOperationsInput | number
    id_city?: IntFieldUpdateOperationsInput | number
    id_prov?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    is_open?: BoolFieldUpdateOperationsInput | boolean
    id_status?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MenuCreateInput = {
    id: string
    name: string
    detail?: string | null
    price: Decimal | DecimalJsLike | number | string
    is_ready?: boolean
    created_at?: Date | string
    update_at?: Date | string | null
    rel_variant?: VariantCreateNestedManyWithoutRel_menuInput
    rel_merchant: MerchantCreateNestedOneWithoutRel_menuInput
    rel_category: CategoryCreateNestedOneWithoutRel_menuInput
  }

  export type MenuUncheckedCreateInput = {
    id: string
    name: string
    detail?: string | null
    id_merchant: string
    id_category: number
    price: Decimal | DecimalJsLike | number | string
    is_ready?: boolean
    created_at?: Date | string
    update_at?: Date | string | null
    rel_variant?: VariantUncheckedCreateNestedManyWithoutRel_menuInput
  }

  export type MenuUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_ready?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_variant?: VariantUpdateManyWithoutRel_menuNestedInput
    rel_merchant?: MerchantUpdateOneRequiredWithoutRel_menuNestedInput
    rel_category?: CategoryUpdateOneRequiredWithoutRel_menuNestedInput
  }

  export type MenuUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    id_merchant?: StringFieldUpdateOperationsInput | string
    id_category?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_ready?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_variant?: VariantUncheckedUpdateManyWithoutRel_menuNestedInput
  }

  export type MenuCreateManyInput = {
    id: string
    name: string
    detail?: string | null
    id_merchant: string
    id_category: number
    price: Decimal | DecimalJsLike | number | string
    is_ready?: boolean
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type MenuUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_ready?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MenuUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    id_merchant?: StringFieldUpdateOperationsInput | string
    id_category?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_ready?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type VariantCreateInput = {
    id: string
    name: string
    created_at?: Date | string
    update_at?: Date | string | null
    rel_variant_item?: Variant_itemCreateNestedManyWithoutRel_variantInput
    rel_menu: MenuCreateNestedOneWithoutRel_variantInput
  }

  export type VariantUncheckedCreateInput = {
    id: string
    name: string
    id_menu: string
    created_at?: Date | string
    update_at?: Date | string | null
    rel_variant_item?: Variant_itemUncheckedCreateNestedManyWithoutRel_variantInput
  }

  export type VariantUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_variant_item?: Variant_itemUpdateManyWithoutRel_variantNestedInput
    rel_menu?: MenuUpdateOneRequiredWithoutRel_variantNestedInput
  }

  export type VariantUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    id_menu?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_variant_item?: Variant_itemUncheckedUpdateManyWithoutRel_variantNestedInput
  }

  export type VariantCreateManyInput = {
    id: string
    name: string
    id_menu: string
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type VariantUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type VariantUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    id_menu?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type Variant_itemCreateInput = {
    id: string
    name: string
    price: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    update_at?: Date | string | null
    rel_variant: VariantCreateNestedOneWithoutRel_variant_itemInput
  }

  export type Variant_itemUncheckedCreateInput = {
    id: string
    name: string
    id_variant: string
    price: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type Variant_itemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_variant?: VariantUpdateOneRequiredWithoutRel_variant_itemNestedInput
  }

  export type Variant_itemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    id_variant?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type Variant_itemCreateManyInput = {
    id: string
    name: string
    id_variant: string
    price: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type Variant_itemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type Variant_itemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    id_variant?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrderCreateInput = {
    id: string
    id_user: string
    name_user: string
    id_merchant: string
    name_merchant: string
    id_courier: string
    name_courier: string
    destination: string
    id_subd: number
    name_subd: string
    id_city: number
    name_city: string
    id_prov: number
    name_prov: string
    shipping_cost: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    update_at?: Date | string | null
    rel_order_item?: Order_itemCreateNestedManyWithoutRel_orderInput
  }

  export type OrderUncheckedCreateInput = {
    id: string
    id_user: string
    name_user: string
    id_merchant: string
    name_merchant: string
    id_courier: string
    name_courier: string
    destination: string
    id_subd: number
    name_subd: string
    id_city: number
    name_city: string
    id_prov: number
    name_prov: string
    shipping_cost: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    update_at?: Date | string | null
    rel_order_item?: Order_itemUncheckedCreateNestedManyWithoutRel_orderInput
  }

  export type OrderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_user?: StringFieldUpdateOperationsInput | string
    name_user?: StringFieldUpdateOperationsInput | string
    id_merchant?: StringFieldUpdateOperationsInput | string
    name_merchant?: StringFieldUpdateOperationsInput | string
    id_courier?: StringFieldUpdateOperationsInput | string
    name_courier?: StringFieldUpdateOperationsInput | string
    destination?: StringFieldUpdateOperationsInput | string
    id_subd?: IntFieldUpdateOperationsInput | number
    name_subd?: StringFieldUpdateOperationsInput | string
    id_city?: IntFieldUpdateOperationsInput | number
    name_city?: StringFieldUpdateOperationsInput | string
    id_prov?: IntFieldUpdateOperationsInput | number
    name_prov?: StringFieldUpdateOperationsInput | string
    shipping_cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_order_item?: Order_itemUpdateManyWithoutRel_orderNestedInput
  }

  export type OrderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_user?: StringFieldUpdateOperationsInput | string
    name_user?: StringFieldUpdateOperationsInput | string
    id_merchant?: StringFieldUpdateOperationsInput | string
    name_merchant?: StringFieldUpdateOperationsInput | string
    id_courier?: StringFieldUpdateOperationsInput | string
    name_courier?: StringFieldUpdateOperationsInput | string
    destination?: StringFieldUpdateOperationsInput | string
    id_subd?: IntFieldUpdateOperationsInput | number
    name_subd?: StringFieldUpdateOperationsInput | string
    id_city?: IntFieldUpdateOperationsInput | number
    name_city?: StringFieldUpdateOperationsInput | string
    id_prov?: IntFieldUpdateOperationsInput | number
    name_prov?: StringFieldUpdateOperationsInput | string
    shipping_cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_order_item?: Order_itemUncheckedUpdateManyWithoutRel_orderNestedInput
  }

  export type OrderCreateManyInput = {
    id: string
    id_user: string
    name_user: string
    id_merchant: string
    name_merchant: string
    id_courier: string
    name_courier: string
    destination: string
    id_subd: number
    name_subd: string
    id_city: number
    name_city: string
    id_prov: number
    name_prov: string
    shipping_cost: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type OrderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_user?: StringFieldUpdateOperationsInput | string
    name_user?: StringFieldUpdateOperationsInput | string
    id_merchant?: StringFieldUpdateOperationsInput | string
    name_merchant?: StringFieldUpdateOperationsInput | string
    id_courier?: StringFieldUpdateOperationsInput | string
    name_courier?: StringFieldUpdateOperationsInput | string
    destination?: StringFieldUpdateOperationsInput | string
    id_subd?: IntFieldUpdateOperationsInput | number
    name_subd?: StringFieldUpdateOperationsInput | string
    id_city?: IntFieldUpdateOperationsInput | number
    name_city?: StringFieldUpdateOperationsInput | string
    id_prov?: IntFieldUpdateOperationsInput | number
    name_prov?: StringFieldUpdateOperationsInput | string
    shipping_cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_user?: StringFieldUpdateOperationsInput | string
    name_user?: StringFieldUpdateOperationsInput | string
    id_merchant?: StringFieldUpdateOperationsInput | string
    name_merchant?: StringFieldUpdateOperationsInput | string
    id_courier?: StringFieldUpdateOperationsInput | string
    name_courier?: StringFieldUpdateOperationsInput | string
    destination?: StringFieldUpdateOperationsInput | string
    id_subd?: IntFieldUpdateOperationsInput | number
    name_subd?: StringFieldUpdateOperationsInput | string
    id_city?: IntFieldUpdateOperationsInput | number
    name_city?: StringFieldUpdateOperationsInput | string
    id_prov?: IntFieldUpdateOperationsInput | number
    name_prov?: StringFieldUpdateOperationsInput | string
    shipping_cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type Order_itemCreateInput = {
    id: string
    id_menu: string
    name_menu: string
    id_variant: string
    name_variant: string
    qty: number
    note: string
    price: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    update_at?: Date | string | null
    rel_order: OrderCreateNestedOneWithoutRel_order_itemInput
  }

  export type Order_itemUncheckedCreateInput = {
    id: string
    id_menu: string
    name_menu: string
    id_variant: string
    name_variant: string
    qty: number
    note: string
    price: Decimal | DecimalJsLike | number | string
    id_order: string
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type Order_itemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_menu?: StringFieldUpdateOperationsInput | string
    name_menu?: StringFieldUpdateOperationsInput | string
    id_variant?: StringFieldUpdateOperationsInput | string
    name_variant?: StringFieldUpdateOperationsInput | string
    qty?: IntFieldUpdateOperationsInput | number
    note?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_order?: OrderUpdateOneRequiredWithoutRel_order_itemNestedInput
  }

  export type Order_itemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_menu?: StringFieldUpdateOperationsInput | string
    name_menu?: StringFieldUpdateOperationsInput | string
    id_variant?: StringFieldUpdateOperationsInput | string
    name_variant?: StringFieldUpdateOperationsInput | string
    qty?: IntFieldUpdateOperationsInput | number
    note?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    id_order?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type Order_itemCreateManyInput = {
    id: string
    id_menu: string
    name_menu: string
    id_variant: string
    name_variant: string
    qty: number
    note: string
    price: Decimal | DecimalJsLike | number | string
    id_order: string
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type Order_itemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_menu?: StringFieldUpdateOperationsInput | string
    name_menu?: StringFieldUpdateOperationsInput | string
    id_variant?: StringFieldUpdateOperationsInput | string
    name_variant?: StringFieldUpdateOperationsInput | string
    qty?: IntFieldUpdateOperationsInput | number
    note?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type Order_itemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_menu?: StringFieldUpdateOperationsInput | string
    name_menu?: StringFieldUpdateOperationsInput | string
    id_variant?: StringFieldUpdateOperationsInput | string
    name_variant?: StringFieldUpdateOperationsInput | string
    qty?: IntFieldUpdateOperationsInput | number
    note?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    id_order?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type Log_orderCreateInput = {
    id_order: string
    detail_status: string
    change_by: string
    id_changer: string
    time?: Date | string
    rel_status: Status_orderCreateNestedOneWithoutRel_log_orderInput
  }

  export type Log_orderUncheckedCreateInput = {
    id?: number
    id_order: string
    id_status: number
    detail_status: string
    change_by: string
    id_changer: string
    time?: Date | string
  }

  export type Log_orderUpdateInput = {
    id_order?: StringFieldUpdateOperationsInput | string
    detail_status?: StringFieldUpdateOperationsInput | string
    change_by?: StringFieldUpdateOperationsInput | string
    id_changer?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    rel_status?: Status_orderUpdateOneRequiredWithoutRel_log_orderNestedInput
  }

  export type Log_orderUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_order?: StringFieldUpdateOperationsInput | string
    id_status?: IntFieldUpdateOperationsInput | number
    detail_status?: StringFieldUpdateOperationsInput | string
    change_by?: StringFieldUpdateOperationsInput | string
    id_changer?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Log_orderCreateManyInput = {
    id?: number
    id_order: string
    id_status: number
    detail_status: string
    change_by: string
    id_changer: string
    time?: Date | string
  }

  export type Log_orderUpdateManyMutationInput = {
    id_order?: StringFieldUpdateOperationsInput | string
    detail_status?: StringFieldUpdateOperationsInput | string
    change_by?: StringFieldUpdateOperationsInput | string
    id_changer?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Log_orderUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_order?: StringFieldUpdateOperationsInput | string
    id_status?: IntFieldUpdateOperationsInput | number
    detail_status?: StringFieldUpdateOperationsInput | string
    change_by?: StringFieldUpdateOperationsInput | string
    id_changer?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type History_orderCreateInput = {
    id: string
    id_user: string
    name_user: string
    id_merchant: string
    name_merchant: string
    id_courier: string
    name_courier: string
    destination: string
    id_subd: number
    name_subd: string
    id_city: number
    name_city: string
    id_prov: number
    name_prov: string
    shipping_cost: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    update_at?: Date | string | null
    rel_history_order_item?: History_order_itemCreateNestedManyWithoutRel_history_orderInput
  }

  export type History_orderUncheckedCreateInput = {
    id: string
    id_user: string
    name_user: string
    id_merchant: string
    name_merchant: string
    id_courier: string
    name_courier: string
    destination: string
    id_subd: number
    name_subd: string
    id_city: number
    name_city: string
    id_prov: number
    name_prov: string
    shipping_cost: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    update_at?: Date | string | null
    rel_history_order_item?: History_order_itemUncheckedCreateNestedManyWithoutRel_history_orderInput
  }

  export type History_orderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_user?: StringFieldUpdateOperationsInput | string
    name_user?: StringFieldUpdateOperationsInput | string
    id_merchant?: StringFieldUpdateOperationsInput | string
    name_merchant?: StringFieldUpdateOperationsInput | string
    id_courier?: StringFieldUpdateOperationsInput | string
    name_courier?: StringFieldUpdateOperationsInput | string
    destination?: StringFieldUpdateOperationsInput | string
    id_subd?: IntFieldUpdateOperationsInput | number
    name_subd?: StringFieldUpdateOperationsInput | string
    id_city?: IntFieldUpdateOperationsInput | number
    name_city?: StringFieldUpdateOperationsInput | string
    id_prov?: IntFieldUpdateOperationsInput | number
    name_prov?: StringFieldUpdateOperationsInput | string
    shipping_cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_history_order_item?: History_order_itemUpdateManyWithoutRel_history_orderNestedInput
  }

  export type History_orderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_user?: StringFieldUpdateOperationsInput | string
    name_user?: StringFieldUpdateOperationsInput | string
    id_merchant?: StringFieldUpdateOperationsInput | string
    name_merchant?: StringFieldUpdateOperationsInput | string
    id_courier?: StringFieldUpdateOperationsInput | string
    name_courier?: StringFieldUpdateOperationsInput | string
    destination?: StringFieldUpdateOperationsInput | string
    id_subd?: IntFieldUpdateOperationsInput | number
    name_subd?: StringFieldUpdateOperationsInput | string
    id_city?: IntFieldUpdateOperationsInput | number
    name_city?: StringFieldUpdateOperationsInput | string
    id_prov?: IntFieldUpdateOperationsInput | number
    name_prov?: StringFieldUpdateOperationsInput | string
    shipping_cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_history_order_item?: History_order_itemUncheckedUpdateManyWithoutRel_history_orderNestedInput
  }

  export type History_orderCreateManyInput = {
    id: string
    id_user: string
    name_user: string
    id_merchant: string
    name_merchant: string
    id_courier: string
    name_courier: string
    destination: string
    id_subd: number
    name_subd: string
    id_city: number
    name_city: string
    id_prov: number
    name_prov: string
    shipping_cost: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type History_orderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_user?: StringFieldUpdateOperationsInput | string
    name_user?: StringFieldUpdateOperationsInput | string
    id_merchant?: StringFieldUpdateOperationsInput | string
    name_merchant?: StringFieldUpdateOperationsInput | string
    id_courier?: StringFieldUpdateOperationsInput | string
    name_courier?: StringFieldUpdateOperationsInput | string
    destination?: StringFieldUpdateOperationsInput | string
    id_subd?: IntFieldUpdateOperationsInput | number
    name_subd?: StringFieldUpdateOperationsInput | string
    id_city?: IntFieldUpdateOperationsInput | number
    name_city?: StringFieldUpdateOperationsInput | string
    id_prov?: IntFieldUpdateOperationsInput | number
    name_prov?: StringFieldUpdateOperationsInput | string
    shipping_cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type History_orderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_user?: StringFieldUpdateOperationsInput | string
    name_user?: StringFieldUpdateOperationsInput | string
    id_merchant?: StringFieldUpdateOperationsInput | string
    name_merchant?: StringFieldUpdateOperationsInput | string
    id_courier?: StringFieldUpdateOperationsInput | string
    name_courier?: StringFieldUpdateOperationsInput | string
    destination?: StringFieldUpdateOperationsInput | string
    id_subd?: IntFieldUpdateOperationsInput | number
    name_subd?: StringFieldUpdateOperationsInput | string
    id_city?: IntFieldUpdateOperationsInput | number
    name_city?: StringFieldUpdateOperationsInput | string
    id_prov?: IntFieldUpdateOperationsInput | number
    name_prov?: StringFieldUpdateOperationsInput | string
    shipping_cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type History_order_itemCreateInput = {
    id: string
    id_menu: string
    name_menu: string
    id_variant: string
    name_variant: string
    qty: number
    note: string
    price: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    update_at?: Date | string | null
    rel_history_order: History_orderCreateNestedOneWithoutRel_history_order_itemInput
  }

  export type History_order_itemUncheckedCreateInput = {
    id: string
    id_menu: string
    name_menu: string
    id_variant: string
    name_variant: string
    qty: number
    note: string
    price: Decimal | DecimalJsLike | number | string
    id_order: string
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type History_order_itemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_menu?: StringFieldUpdateOperationsInput | string
    name_menu?: StringFieldUpdateOperationsInput | string
    id_variant?: StringFieldUpdateOperationsInput | string
    name_variant?: StringFieldUpdateOperationsInput | string
    qty?: IntFieldUpdateOperationsInput | number
    note?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_history_order?: History_orderUpdateOneRequiredWithoutRel_history_order_itemNestedInput
  }

  export type History_order_itemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_menu?: StringFieldUpdateOperationsInput | string
    name_menu?: StringFieldUpdateOperationsInput | string
    id_variant?: StringFieldUpdateOperationsInput | string
    name_variant?: StringFieldUpdateOperationsInput | string
    qty?: IntFieldUpdateOperationsInput | number
    note?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    id_order?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type History_order_itemCreateManyInput = {
    id: string
    id_menu: string
    name_menu: string
    id_variant: string
    name_variant: string
    qty: number
    note: string
    price: Decimal | DecimalJsLike | number | string
    id_order: string
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type History_order_itemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_menu?: StringFieldUpdateOperationsInput | string
    name_menu?: StringFieldUpdateOperationsInput | string
    id_variant?: StringFieldUpdateOperationsInput | string
    name_variant?: StringFieldUpdateOperationsInput | string
    qty?: IntFieldUpdateOperationsInput | number
    note?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type History_order_itemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_menu?: StringFieldUpdateOperationsInput | string
    name_menu?: StringFieldUpdateOperationsInput | string
    id_variant?: StringFieldUpdateOperationsInput | string
    name_variant?: StringFieldUpdateOperationsInput | string
    qty?: IntFieldUpdateOperationsInput | number
    note?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    id_order?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type CourierListRelationFilter = {
    every?: CourierWhereInput
    some?: CourierWhereInput
    none?: CourierWhereInput
  }

  export type MerchantListRelationFilter = {
    every?: MerchantWhereInput
    some?: MerchantWhereInput
    none?: MerchantWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CourierOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MerchantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StatusOrderByRelevanceInput = {
    fields: StatusOrderByRelevanceFieldEnum | StatusOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type StatusCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type StatusAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StatusMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type StatusMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type StatusSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type Log_orderListRelationFilter = {
    every?: Log_orderWhereInput
    some?: Log_orderWhereInput
    none?: Log_orderWhereInput
  }

  export type Log_orderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type Status_orderOrderByRelevanceInput = {
    fields: Status_orderOrderByRelevanceFieldEnum | Status_orderOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type Status_orderCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type Status_orderAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type Status_orderMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type Status_orderMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type Status_orderSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BrandOrderByRelevanceInput = {
    fields: BrandOrderByRelevanceFieldEnum | BrandOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type BrandCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type BrandAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BrandMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type BrandMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type BrandSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SubdistrictOrderByRelevanceInput = {
    fields: SubdistrictOrderByRelevanceFieldEnum | SubdistrictOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SubdistrictCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    id_city?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type SubdistrictAvgOrderByAggregateInput = {
    id?: SortOrder
    id_city?: SortOrder
  }

  export type SubdistrictMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    id_city?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type SubdistrictMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    id_city?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type SubdistrictSumOrderByAggregateInput = {
    id?: SortOrder
    id_city?: SortOrder
  }

  export type CityOrderByRelevanceInput = {
    fields: CityOrderByRelevanceFieldEnum | CityOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CityCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    id_prov?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type CityAvgOrderByAggregateInput = {
    id?: SortOrder
    id_prov?: SortOrder
  }

  export type CityMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    id_prov?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type CityMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    id_prov?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type CitySumOrderByAggregateInput = {
    id?: SortOrder
    id_prov?: SortOrder
  }

  export type ProvinceOrderByRelevanceInput = {
    fields: ProvinceOrderByRelevanceFieldEnum | ProvinceOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ProvinceCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type ProvinceAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProvinceMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type ProvinceMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type ProvinceSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MenuListRelationFilter = {
    every?: MenuWhereInput
    some?: MenuWhereInput
    none?: MenuWhereInput
  }

  export type MenuOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryOrderByRelevanceInput = {
    fields: CategoryOrderByRelevanceFieldEnum | CategoryOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type CategoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type CategorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type StatusScalarRelationFilter = {
    is?: StatusWhereInput
    isNot?: StatusWhereInput
  }

  export type UserOrderByRelevanceInput = {
    fields: UserOrderByRelevanceFieldEnum | UserOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    poin?: SortOrder
    id_status?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    poin?: SortOrder
    id_status?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    poin?: SortOrder
    id_status?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    poin?: SortOrder
    id_status?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    poin?: SortOrder
    id_status?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type BrandScalarRelationFilter = {
    is?: BrandWhereInput
    isNot?: BrandWhereInput
  }

  export type CourierOrderByRelevanceInput = {
    fields: CourierOrderByRelevanceFieldEnum | CourierOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CourierCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    number_plate?: SortOrder
    id_brand?: SortOrder
    color?: SortOrder
    is_active?: SortOrder
    id_status?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type CourierAvgOrderByAggregateInput = {
    id_brand?: SortOrder
    id_status?: SortOrder
  }

  export type CourierMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    number_plate?: SortOrder
    id_brand?: SortOrder
    color?: SortOrder
    is_active?: SortOrder
    id_status?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type CourierMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    number_plate?: SortOrder
    id_brand?: SortOrder
    color?: SortOrder
    is_active?: SortOrder
    id_status?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type CourierSumOrderByAggregateInput = {
    id_brand?: SortOrder
    id_status?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type SubdistrictScalarRelationFilter = {
    is?: SubdistrictWhereInput
    isNot?: SubdistrictWhereInput
  }

  export type CityScalarRelationFilter = {
    is?: CityWhereInput
    isNot?: CityWhereInput
  }

  export type ProvinceScalarRelationFilter = {
    is?: ProvinceWhereInput
    isNot?: ProvinceWhereInput
  }

  export type MerchantOrderByRelevanceInput = {
    fields: MerchantOrderByRelevanceFieldEnum | MerchantOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type MerchantCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    address?: SortOrder
    id_subd?: SortOrder
    id_city?: SortOrder
    id_prov?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    is_open?: SortOrder
    id_status?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type MerchantAvgOrderByAggregateInput = {
    id_subd?: SortOrder
    id_city?: SortOrder
    id_prov?: SortOrder
    id_status?: SortOrder
  }

  export type MerchantMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    address?: SortOrder
    id_subd?: SortOrder
    id_city?: SortOrder
    id_prov?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    is_open?: SortOrder
    id_status?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type MerchantMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    address?: SortOrder
    id_subd?: SortOrder
    id_city?: SortOrder
    id_prov?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    is_open?: SortOrder
    id_status?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type MerchantSumOrderByAggregateInput = {
    id_subd?: SortOrder
    id_city?: SortOrder
    id_prov?: SortOrder
    id_status?: SortOrder
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type VariantListRelationFilter = {
    every?: VariantWhereInput
    some?: VariantWhereInput
    none?: VariantWhereInput
  }

  export type MerchantScalarRelationFilter = {
    is?: MerchantWhereInput
    isNot?: MerchantWhereInput
  }

  export type CategoryScalarRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type VariantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MenuOrderByRelevanceInput = {
    fields: MenuOrderByRelevanceFieldEnum | MenuOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type MenuCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    detail?: SortOrder
    id_merchant?: SortOrder
    id_category?: SortOrder
    price?: SortOrder
    is_ready?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type MenuAvgOrderByAggregateInput = {
    id_category?: SortOrder
    price?: SortOrder
  }

  export type MenuMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    detail?: SortOrder
    id_merchant?: SortOrder
    id_category?: SortOrder
    price?: SortOrder
    is_ready?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type MenuMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    detail?: SortOrder
    id_merchant?: SortOrder
    id_category?: SortOrder
    price?: SortOrder
    is_ready?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type MenuSumOrderByAggregateInput = {
    id_category?: SortOrder
    price?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type Variant_itemListRelationFilter = {
    every?: Variant_itemWhereInput
    some?: Variant_itemWhereInput
    none?: Variant_itemWhereInput
  }

  export type MenuScalarRelationFilter = {
    is?: MenuWhereInput
    isNot?: MenuWhereInput
  }

  export type Variant_itemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VariantOrderByRelevanceInput = {
    fields: VariantOrderByRelevanceFieldEnum | VariantOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type VariantCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    id_menu?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type VariantMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    id_menu?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type VariantMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    id_menu?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type VariantScalarRelationFilter = {
    is?: VariantWhereInput
    isNot?: VariantWhereInput
  }

  export type Variant_itemOrderByRelevanceInput = {
    fields: Variant_itemOrderByRelevanceFieldEnum | Variant_itemOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type Variant_itemCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    id_variant?: SortOrder
    price?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type Variant_itemAvgOrderByAggregateInput = {
    price?: SortOrder
  }

  export type Variant_itemMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    id_variant?: SortOrder
    price?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type Variant_itemMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    id_variant?: SortOrder
    price?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type Variant_itemSumOrderByAggregateInput = {
    price?: SortOrder
  }

  export type Order_itemListRelationFilter = {
    every?: Order_itemWhereInput
    some?: Order_itemWhereInput
    none?: Order_itemWhereInput
  }

  export type Order_itemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrderOrderByRelevanceInput = {
    fields: OrderOrderByRelevanceFieldEnum | OrderOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type OrderCountOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    name_user?: SortOrder
    id_merchant?: SortOrder
    name_merchant?: SortOrder
    id_courier?: SortOrder
    name_courier?: SortOrder
    destination?: SortOrder
    id_subd?: SortOrder
    name_subd?: SortOrder
    id_city?: SortOrder
    name_city?: SortOrder
    id_prov?: SortOrder
    name_prov?: SortOrder
    shipping_cost?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type OrderAvgOrderByAggregateInput = {
    id_subd?: SortOrder
    id_city?: SortOrder
    id_prov?: SortOrder
    shipping_cost?: SortOrder
  }

  export type OrderMaxOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    name_user?: SortOrder
    id_merchant?: SortOrder
    name_merchant?: SortOrder
    id_courier?: SortOrder
    name_courier?: SortOrder
    destination?: SortOrder
    id_subd?: SortOrder
    name_subd?: SortOrder
    id_city?: SortOrder
    name_city?: SortOrder
    id_prov?: SortOrder
    name_prov?: SortOrder
    shipping_cost?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type OrderMinOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    name_user?: SortOrder
    id_merchant?: SortOrder
    name_merchant?: SortOrder
    id_courier?: SortOrder
    name_courier?: SortOrder
    destination?: SortOrder
    id_subd?: SortOrder
    name_subd?: SortOrder
    id_city?: SortOrder
    name_city?: SortOrder
    id_prov?: SortOrder
    name_prov?: SortOrder
    shipping_cost?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type OrderSumOrderByAggregateInput = {
    id_subd?: SortOrder
    id_city?: SortOrder
    id_prov?: SortOrder
    shipping_cost?: SortOrder
  }

  export type OrderScalarRelationFilter = {
    is?: OrderWhereInput
    isNot?: OrderWhereInput
  }

  export type Order_itemOrderByRelevanceInput = {
    fields: Order_itemOrderByRelevanceFieldEnum | Order_itemOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type Order_itemCountOrderByAggregateInput = {
    id?: SortOrder
    id_menu?: SortOrder
    name_menu?: SortOrder
    id_variant?: SortOrder
    name_variant?: SortOrder
    qty?: SortOrder
    note?: SortOrder
    price?: SortOrder
    id_order?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type Order_itemAvgOrderByAggregateInput = {
    qty?: SortOrder
    price?: SortOrder
  }

  export type Order_itemMaxOrderByAggregateInput = {
    id?: SortOrder
    id_menu?: SortOrder
    name_menu?: SortOrder
    id_variant?: SortOrder
    name_variant?: SortOrder
    qty?: SortOrder
    note?: SortOrder
    price?: SortOrder
    id_order?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type Order_itemMinOrderByAggregateInput = {
    id?: SortOrder
    id_menu?: SortOrder
    name_menu?: SortOrder
    id_variant?: SortOrder
    name_variant?: SortOrder
    qty?: SortOrder
    note?: SortOrder
    price?: SortOrder
    id_order?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type Order_itemSumOrderByAggregateInput = {
    qty?: SortOrder
    price?: SortOrder
  }

  export type Status_orderScalarRelationFilter = {
    is?: Status_orderWhereInput
    isNot?: Status_orderWhereInput
  }

  export type Log_orderOrderByRelevanceInput = {
    fields: Log_orderOrderByRelevanceFieldEnum | Log_orderOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type Log_orderCountOrderByAggregateInput = {
    id?: SortOrder
    id_order?: SortOrder
    id_status?: SortOrder
    detail_status?: SortOrder
    change_by?: SortOrder
    id_changer?: SortOrder
    time?: SortOrder
  }

  export type Log_orderAvgOrderByAggregateInput = {
    id?: SortOrder
    id_status?: SortOrder
  }

  export type Log_orderMaxOrderByAggregateInput = {
    id?: SortOrder
    id_order?: SortOrder
    id_status?: SortOrder
    detail_status?: SortOrder
    change_by?: SortOrder
    id_changer?: SortOrder
    time?: SortOrder
  }

  export type Log_orderMinOrderByAggregateInput = {
    id?: SortOrder
    id_order?: SortOrder
    id_status?: SortOrder
    detail_status?: SortOrder
    change_by?: SortOrder
    id_changer?: SortOrder
    time?: SortOrder
  }

  export type Log_orderSumOrderByAggregateInput = {
    id?: SortOrder
    id_status?: SortOrder
  }

  export type History_order_itemListRelationFilter = {
    every?: History_order_itemWhereInput
    some?: History_order_itemWhereInput
    none?: History_order_itemWhereInput
  }

  export type History_order_itemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type History_orderOrderByRelevanceInput = {
    fields: History_orderOrderByRelevanceFieldEnum | History_orderOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type History_orderCountOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    name_user?: SortOrder
    id_merchant?: SortOrder
    name_merchant?: SortOrder
    id_courier?: SortOrder
    name_courier?: SortOrder
    destination?: SortOrder
    id_subd?: SortOrder
    name_subd?: SortOrder
    id_city?: SortOrder
    name_city?: SortOrder
    id_prov?: SortOrder
    name_prov?: SortOrder
    shipping_cost?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type History_orderAvgOrderByAggregateInput = {
    id_subd?: SortOrder
    id_city?: SortOrder
    id_prov?: SortOrder
    shipping_cost?: SortOrder
  }

  export type History_orderMaxOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    name_user?: SortOrder
    id_merchant?: SortOrder
    name_merchant?: SortOrder
    id_courier?: SortOrder
    name_courier?: SortOrder
    destination?: SortOrder
    id_subd?: SortOrder
    name_subd?: SortOrder
    id_city?: SortOrder
    name_city?: SortOrder
    id_prov?: SortOrder
    name_prov?: SortOrder
    shipping_cost?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type History_orderMinOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    name_user?: SortOrder
    id_merchant?: SortOrder
    name_merchant?: SortOrder
    id_courier?: SortOrder
    name_courier?: SortOrder
    destination?: SortOrder
    id_subd?: SortOrder
    name_subd?: SortOrder
    id_city?: SortOrder
    name_city?: SortOrder
    id_prov?: SortOrder
    name_prov?: SortOrder
    shipping_cost?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type History_orderSumOrderByAggregateInput = {
    id_subd?: SortOrder
    id_city?: SortOrder
    id_prov?: SortOrder
    shipping_cost?: SortOrder
  }

  export type History_orderScalarRelationFilter = {
    is?: History_orderWhereInput
    isNot?: History_orderWhereInput
  }

  export type History_order_itemOrderByRelevanceInput = {
    fields: History_order_itemOrderByRelevanceFieldEnum | History_order_itemOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type History_order_itemCountOrderByAggregateInput = {
    id?: SortOrder
    id_menu?: SortOrder
    name_menu?: SortOrder
    id_variant?: SortOrder
    name_variant?: SortOrder
    qty?: SortOrder
    note?: SortOrder
    price?: SortOrder
    id_order?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type History_order_itemAvgOrderByAggregateInput = {
    qty?: SortOrder
    price?: SortOrder
  }

  export type History_order_itemMaxOrderByAggregateInput = {
    id?: SortOrder
    id_menu?: SortOrder
    name_menu?: SortOrder
    id_variant?: SortOrder
    name_variant?: SortOrder
    qty?: SortOrder
    note?: SortOrder
    price?: SortOrder
    id_order?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type History_order_itemMinOrderByAggregateInput = {
    id?: SortOrder
    id_menu?: SortOrder
    name_menu?: SortOrder
    id_variant?: SortOrder
    name_variant?: SortOrder
    qty?: SortOrder
    note?: SortOrder
    price?: SortOrder
    id_order?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type History_order_itemSumOrderByAggregateInput = {
    qty?: SortOrder
    price?: SortOrder
  }

  export type UserCreateNestedManyWithoutRel_statusInput = {
    create?: XOR<UserCreateWithoutRel_statusInput, UserUncheckedCreateWithoutRel_statusInput> | UserCreateWithoutRel_statusInput[] | UserUncheckedCreateWithoutRel_statusInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRel_statusInput | UserCreateOrConnectWithoutRel_statusInput[]
    createMany?: UserCreateManyRel_statusInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type CourierCreateNestedManyWithoutRel_statusInput = {
    create?: XOR<CourierCreateWithoutRel_statusInput, CourierUncheckedCreateWithoutRel_statusInput> | CourierCreateWithoutRel_statusInput[] | CourierUncheckedCreateWithoutRel_statusInput[]
    connectOrCreate?: CourierCreateOrConnectWithoutRel_statusInput | CourierCreateOrConnectWithoutRel_statusInput[]
    createMany?: CourierCreateManyRel_statusInputEnvelope
    connect?: CourierWhereUniqueInput | CourierWhereUniqueInput[]
  }

  export type MerchantCreateNestedManyWithoutRel_statusInput = {
    create?: XOR<MerchantCreateWithoutRel_statusInput, MerchantUncheckedCreateWithoutRel_statusInput> | MerchantCreateWithoutRel_statusInput[] | MerchantUncheckedCreateWithoutRel_statusInput[]
    connectOrCreate?: MerchantCreateOrConnectWithoutRel_statusInput | MerchantCreateOrConnectWithoutRel_statusInput[]
    createMany?: MerchantCreateManyRel_statusInputEnvelope
    connect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutRel_statusInput = {
    create?: XOR<UserCreateWithoutRel_statusInput, UserUncheckedCreateWithoutRel_statusInput> | UserCreateWithoutRel_statusInput[] | UserUncheckedCreateWithoutRel_statusInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRel_statusInput | UserCreateOrConnectWithoutRel_statusInput[]
    createMany?: UserCreateManyRel_statusInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type CourierUncheckedCreateNestedManyWithoutRel_statusInput = {
    create?: XOR<CourierCreateWithoutRel_statusInput, CourierUncheckedCreateWithoutRel_statusInput> | CourierCreateWithoutRel_statusInput[] | CourierUncheckedCreateWithoutRel_statusInput[]
    connectOrCreate?: CourierCreateOrConnectWithoutRel_statusInput | CourierCreateOrConnectWithoutRel_statusInput[]
    createMany?: CourierCreateManyRel_statusInputEnvelope
    connect?: CourierWhereUniqueInput | CourierWhereUniqueInput[]
  }

  export type MerchantUncheckedCreateNestedManyWithoutRel_statusInput = {
    create?: XOR<MerchantCreateWithoutRel_statusInput, MerchantUncheckedCreateWithoutRel_statusInput> | MerchantCreateWithoutRel_statusInput[] | MerchantUncheckedCreateWithoutRel_statusInput[]
    connectOrCreate?: MerchantCreateOrConnectWithoutRel_statusInput | MerchantCreateOrConnectWithoutRel_statusInput[]
    createMany?: MerchantCreateManyRel_statusInputEnvelope
    connect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateManyWithoutRel_statusNestedInput = {
    create?: XOR<UserCreateWithoutRel_statusInput, UserUncheckedCreateWithoutRel_statusInput> | UserCreateWithoutRel_statusInput[] | UserUncheckedCreateWithoutRel_statusInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRel_statusInput | UserCreateOrConnectWithoutRel_statusInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRel_statusInput | UserUpsertWithWhereUniqueWithoutRel_statusInput[]
    createMany?: UserCreateManyRel_statusInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRel_statusInput | UserUpdateWithWhereUniqueWithoutRel_statusInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRel_statusInput | UserUpdateManyWithWhereWithoutRel_statusInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type CourierUpdateManyWithoutRel_statusNestedInput = {
    create?: XOR<CourierCreateWithoutRel_statusInput, CourierUncheckedCreateWithoutRel_statusInput> | CourierCreateWithoutRel_statusInput[] | CourierUncheckedCreateWithoutRel_statusInput[]
    connectOrCreate?: CourierCreateOrConnectWithoutRel_statusInput | CourierCreateOrConnectWithoutRel_statusInput[]
    upsert?: CourierUpsertWithWhereUniqueWithoutRel_statusInput | CourierUpsertWithWhereUniqueWithoutRel_statusInput[]
    createMany?: CourierCreateManyRel_statusInputEnvelope
    set?: CourierWhereUniqueInput | CourierWhereUniqueInput[]
    disconnect?: CourierWhereUniqueInput | CourierWhereUniqueInput[]
    delete?: CourierWhereUniqueInput | CourierWhereUniqueInput[]
    connect?: CourierWhereUniqueInput | CourierWhereUniqueInput[]
    update?: CourierUpdateWithWhereUniqueWithoutRel_statusInput | CourierUpdateWithWhereUniqueWithoutRel_statusInput[]
    updateMany?: CourierUpdateManyWithWhereWithoutRel_statusInput | CourierUpdateManyWithWhereWithoutRel_statusInput[]
    deleteMany?: CourierScalarWhereInput | CourierScalarWhereInput[]
  }

  export type MerchantUpdateManyWithoutRel_statusNestedInput = {
    create?: XOR<MerchantCreateWithoutRel_statusInput, MerchantUncheckedCreateWithoutRel_statusInput> | MerchantCreateWithoutRel_statusInput[] | MerchantUncheckedCreateWithoutRel_statusInput[]
    connectOrCreate?: MerchantCreateOrConnectWithoutRel_statusInput | MerchantCreateOrConnectWithoutRel_statusInput[]
    upsert?: MerchantUpsertWithWhereUniqueWithoutRel_statusInput | MerchantUpsertWithWhereUniqueWithoutRel_statusInput[]
    createMany?: MerchantCreateManyRel_statusInputEnvelope
    set?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    disconnect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    delete?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    connect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    update?: MerchantUpdateWithWhereUniqueWithoutRel_statusInput | MerchantUpdateWithWhereUniqueWithoutRel_statusInput[]
    updateMany?: MerchantUpdateManyWithWhereWithoutRel_statusInput | MerchantUpdateManyWithWhereWithoutRel_statusInput[]
    deleteMany?: MerchantScalarWhereInput | MerchantScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUncheckedUpdateManyWithoutRel_statusNestedInput = {
    create?: XOR<UserCreateWithoutRel_statusInput, UserUncheckedCreateWithoutRel_statusInput> | UserCreateWithoutRel_statusInput[] | UserUncheckedCreateWithoutRel_statusInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRel_statusInput | UserCreateOrConnectWithoutRel_statusInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRel_statusInput | UserUpsertWithWhereUniqueWithoutRel_statusInput[]
    createMany?: UserCreateManyRel_statusInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRel_statusInput | UserUpdateWithWhereUniqueWithoutRel_statusInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRel_statusInput | UserUpdateManyWithWhereWithoutRel_statusInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type CourierUncheckedUpdateManyWithoutRel_statusNestedInput = {
    create?: XOR<CourierCreateWithoutRel_statusInput, CourierUncheckedCreateWithoutRel_statusInput> | CourierCreateWithoutRel_statusInput[] | CourierUncheckedCreateWithoutRel_statusInput[]
    connectOrCreate?: CourierCreateOrConnectWithoutRel_statusInput | CourierCreateOrConnectWithoutRel_statusInput[]
    upsert?: CourierUpsertWithWhereUniqueWithoutRel_statusInput | CourierUpsertWithWhereUniqueWithoutRel_statusInput[]
    createMany?: CourierCreateManyRel_statusInputEnvelope
    set?: CourierWhereUniqueInput | CourierWhereUniqueInput[]
    disconnect?: CourierWhereUniqueInput | CourierWhereUniqueInput[]
    delete?: CourierWhereUniqueInput | CourierWhereUniqueInput[]
    connect?: CourierWhereUniqueInput | CourierWhereUniqueInput[]
    update?: CourierUpdateWithWhereUniqueWithoutRel_statusInput | CourierUpdateWithWhereUniqueWithoutRel_statusInput[]
    updateMany?: CourierUpdateManyWithWhereWithoutRel_statusInput | CourierUpdateManyWithWhereWithoutRel_statusInput[]
    deleteMany?: CourierScalarWhereInput | CourierScalarWhereInput[]
  }

  export type MerchantUncheckedUpdateManyWithoutRel_statusNestedInput = {
    create?: XOR<MerchantCreateWithoutRel_statusInput, MerchantUncheckedCreateWithoutRel_statusInput> | MerchantCreateWithoutRel_statusInput[] | MerchantUncheckedCreateWithoutRel_statusInput[]
    connectOrCreate?: MerchantCreateOrConnectWithoutRel_statusInput | MerchantCreateOrConnectWithoutRel_statusInput[]
    upsert?: MerchantUpsertWithWhereUniqueWithoutRel_statusInput | MerchantUpsertWithWhereUniqueWithoutRel_statusInput[]
    createMany?: MerchantCreateManyRel_statusInputEnvelope
    set?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    disconnect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    delete?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    connect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    update?: MerchantUpdateWithWhereUniqueWithoutRel_statusInput | MerchantUpdateWithWhereUniqueWithoutRel_statusInput[]
    updateMany?: MerchantUpdateManyWithWhereWithoutRel_statusInput | MerchantUpdateManyWithWhereWithoutRel_statusInput[]
    deleteMany?: MerchantScalarWhereInput | MerchantScalarWhereInput[]
  }

  export type Log_orderCreateNestedManyWithoutRel_statusInput = {
    create?: XOR<Log_orderCreateWithoutRel_statusInput, Log_orderUncheckedCreateWithoutRel_statusInput> | Log_orderCreateWithoutRel_statusInput[] | Log_orderUncheckedCreateWithoutRel_statusInput[]
    connectOrCreate?: Log_orderCreateOrConnectWithoutRel_statusInput | Log_orderCreateOrConnectWithoutRel_statusInput[]
    createMany?: Log_orderCreateManyRel_statusInputEnvelope
    connect?: Log_orderWhereUniqueInput | Log_orderWhereUniqueInput[]
  }

  export type Log_orderUncheckedCreateNestedManyWithoutRel_statusInput = {
    create?: XOR<Log_orderCreateWithoutRel_statusInput, Log_orderUncheckedCreateWithoutRel_statusInput> | Log_orderCreateWithoutRel_statusInput[] | Log_orderUncheckedCreateWithoutRel_statusInput[]
    connectOrCreate?: Log_orderCreateOrConnectWithoutRel_statusInput | Log_orderCreateOrConnectWithoutRel_statusInput[]
    createMany?: Log_orderCreateManyRel_statusInputEnvelope
    connect?: Log_orderWhereUniqueInput | Log_orderWhereUniqueInput[]
  }

  export type Log_orderUpdateManyWithoutRel_statusNestedInput = {
    create?: XOR<Log_orderCreateWithoutRel_statusInput, Log_orderUncheckedCreateWithoutRel_statusInput> | Log_orderCreateWithoutRel_statusInput[] | Log_orderUncheckedCreateWithoutRel_statusInput[]
    connectOrCreate?: Log_orderCreateOrConnectWithoutRel_statusInput | Log_orderCreateOrConnectWithoutRel_statusInput[]
    upsert?: Log_orderUpsertWithWhereUniqueWithoutRel_statusInput | Log_orderUpsertWithWhereUniqueWithoutRel_statusInput[]
    createMany?: Log_orderCreateManyRel_statusInputEnvelope
    set?: Log_orderWhereUniqueInput | Log_orderWhereUniqueInput[]
    disconnect?: Log_orderWhereUniqueInput | Log_orderWhereUniqueInput[]
    delete?: Log_orderWhereUniqueInput | Log_orderWhereUniqueInput[]
    connect?: Log_orderWhereUniqueInput | Log_orderWhereUniqueInput[]
    update?: Log_orderUpdateWithWhereUniqueWithoutRel_statusInput | Log_orderUpdateWithWhereUniqueWithoutRel_statusInput[]
    updateMany?: Log_orderUpdateManyWithWhereWithoutRel_statusInput | Log_orderUpdateManyWithWhereWithoutRel_statusInput[]
    deleteMany?: Log_orderScalarWhereInput | Log_orderScalarWhereInput[]
  }

  export type Log_orderUncheckedUpdateManyWithoutRel_statusNestedInput = {
    create?: XOR<Log_orderCreateWithoutRel_statusInput, Log_orderUncheckedCreateWithoutRel_statusInput> | Log_orderCreateWithoutRel_statusInput[] | Log_orderUncheckedCreateWithoutRel_statusInput[]
    connectOrCreate?: Log_orderCreateOrConnectWithoutRel_statusInput | Log_orderCreateOrConnectWithoutRel_statusInput[]
    upsert?: Log_orderUpsertWithWhereUniqueWithoutRel_statusInput | Log_orderUpsertWithWhereUniqueWithoutRel_statusInput[]
    createMany?: Log_orderCreateManyRel_statusInputEnvelope
    set?: Log_orderWhereUniqueInput | Log_orderWhereUniqueInput[]
    disconnect?: Log_orderWhereUniqueInput | Log_orderWhereUniqueInput[]
    delete?: Log_orderWhereUniqueInput | Log_orderWhereUniqueInput[]
    connect?: Log_orderWhereUniqueInput | Log_orderWhereUniqueInput[]
    update?: Log_orderUpdateWithWhereUniqueWithoutRel_statusInput | Log_orderUpdateWithWhereUniqueWithoutRel_statusInput[]
    updateMany?: Log_orderUpdateManyWithWhereWithoutRel_statusInput | Log_orderUpdateManyWithWhereWithoutRel_statusInput[]
    deleteMany?: Log_orderScalarWhereInput | Log_orderScalarWhereInput[]
  }

  export type CourierCreateNestedManyWithoutRel_brandInput = {
    create?: XOR<CourierCreateWithoutRel_brandInput, CourierUncheckedCreateWithoutRel_brandInput> | CourierCreateWithoutRel_brandInput[] | CourierUncheckedCreateWithoutRel_brandInput[]
    connectOrCreate?: CourierCreateOrConnectWithoutRel_brandInput | CourierCreateOrConnectWithoutRel_brandInput[]
    createMany?: CourierCreateManyRel_brandInputEnvelope
    connect?: CourierWhereUniqueInput | CourierWhereUniqueInput[]
  }

  export type CourierUncheckedCreateNestedManyWithoutRel_brandInput = {
    create?: XOR<CourierCreateWithoutRel_brandInput, CourierUncheckedCreateWithoutRel_brandInput> | CourierCreateWithoutRel_brandInput[] | CourierUncheckedCreateWithoutRel_brandInput[]
    connectOrCreate?: CourierCreateOrConnectWithoutRel_brandInput | CourierCreateOrConnectWithoutRel_brandInput[]
    createMany?: CourierCreateManyRel_brandInputEnvelope
    connect?: CourierWhereUniqueInput | CourierWhereUniqueInput[]
  }

  export type CourierUpdateManyWithoutRel_brandNestedInput = {
    create?: XOR<CourierCreateWithoutRel_brandInput, CourierUncheckedCreateWithoutRel_brandInput> | CourierCreateWithoutRel_brandInput[] | CourierUncheckedCreateWithoutRel_brandInput[]
    connectOrCreate?: CourierCreateOrConnectWithoutRel_brandInput | CourierCreateOrConnectWithoutRel_brandInput[]
    upsert?: CourierUpsertWithWhereUniqueWithoutRel_brandInput | CourierUpsertWithWhereUniqueWithoutRel_brandInput[]
    createMany?: CourierCreateManyRel_brandInputEnvelope
    set?: CourierWhereUniqueInput | CourierWhereUniqueInput[]
    disconnect?: CourierWhereUniqueInput | CourierWhereUniqueInput[]
    delete?: CourierWhereUniqueInput | CourierWhereUniqueInput[]
    connect?: CourierWhereUniqueInput | CourierWhereUniqueInput[]
    update?: CourierUpdateWithWhereUniqueWithoutRel_brandInput | CourierUpdateWithWhereUniqueWithoutRel_brandInput[]
    updateMany?: CourierUpdateManyWithWhereWithoutRel_brandInput | CourierUpdateManyWithWhereWithoutRel_brandInput[]
    deleteMany?: CourierScalarWhereInput | CourierScalarWhereInput[]
  }

  export type CourierUncheckedUpdateManyWithoutRel_brandNestedInput = {
    create?: XOR<CourierCreateWithoutRel_brandInput, CourierUncheckedCreateWithoutRel_brandInput> | CourierCreateWithoutRel_brandInput[] | CourierUncheckedCreateWithoutRel_brandInput[]
    connectOrCreate?: CourierCreateOrConnectWithoutRel_brandInput | CourierCreateOrConnectWithoutRel_brandInput[]
    upsert?: CourierUpsertWithWhereUniqueWithoutRel_brandInput | CourierUpsertWithWhereUniqueWithoutRel_brandInput[]
    createMany?: CourierCreateManyRel_brandInputEnvelope
    set?: CourierWhereUniqueInput | CourierWhereUniqueInput[]
    disconnect?: CourierWhereUniqueInput | CourierWhereUniqueInput[]
    delete?: CourierWhereUniqueInput | CourierWhereUniqueInput[]
    connect?: CourierWhereUniqueInput | CourierWhereUniqueInput[]
    update?: CourierUpdateWithWhereUniqueWithoutRel_brandInput | CourierUpdateWithWhereUniqueWithoutRel_brandInput[]
    updateMany?: CourierUpdateManyWithWhereWithoutRel_brandInput | CourierUpdateManyWithWhereWithoutRel_brandInput[]
    deleteMany?: CourierScalarWhereInput | CourierScalarWhereInput[]
  }

  export type MerchantCreateNestedManyWithoutRel_subdInput = {
    create?: XOR<MerchantCreateWithoutRel_subdInput, MerchantUncheckedCreateWithoutRel_subdInput> | MerchantCreateWithoutRel_subdInput[] | MerchantUncheckedCreateWithoutRel_subdInput[]
    connectOrCreate?: MerchantCreateOrConnectWithoutRel_subdInput | MerchantCreateOrConnectWithoutRel_subdInput[]
    createMany?: MerchantCreateManyRel_subdInputEnvelope
    connect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
  }

  export type MerchantUncheckedCreateNestedManyWithoutRel_subdInput = {
    create?: XOR<MerchantCreateWithoutRel_subdInput, MerchantUncheckedCreateWithoutRel_subdInput> | MerchantCreateWithoutRel_subdInput[] | MerchantUncheckedCreateWithoutRel_subdInput[]
    connectOrCreate?: MerchantCreateOrConnectWithoutRel_subdInput | MerchantCreateOrConnectWithoutRel_subdInput[]
    createMany?: MerchantCreateManyRel_subdInputEnvelope
    connect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
  }

  export type MerchantUpdateManyWithoutRel_subdNestedInput = {
    create?: XOR<MerchantCreateWithoutRel_subdInput, MerchantUncheckedCreateWithoutRel_subdInput> | MerchantCreateWithoutRel_subdInput[] | MerchantUncheckedCreateWithoutRel_subdInput[]
    connectOrCreate?: MerchantCreateOrConnectWithoutRel_subdInput | MerchantCreateOrConnectWithoutRel_subdInput[]
    upsert?: MerchantUpsertWithWhereUniqueWithoutRel_subdInput | MerchantUpsertWithWhereUniqueWithoutRel_subdInput[]
    createMany?: MerchantCreateManyRel_subdInputEnvelope
    set?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    disconnect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    delete?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    connect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    update?: MerchantUpdateWithWhereUniqueWithoutRel_subdInput | MerchantUpdateWithWhereUniqueWithoutRel_subdInput[]
    updateMany?: MerchantUpdateManyWithWhereWithoutRel_subdInput | MerchantUpdateManyWithWhereWithoutRel_subdInput[]
    deleteMany?: MerchantScalarWhereInput | MerchantScalarWhereInput[]
  }

  export type MerchantUncheckedUpdateManyWithoutRel_subdNestedInput = {
    create?: XOR<MerchantCreateWithoutRel_subdInput, MerchantUncheckedCreateWithoutRel_subdInput> | MerchantCreateWithoutRel_subdInput[] | MerchantUncheckedCreateWithoutRel_subdInput[]
    connectOrCreate?: MerchantCreateOrConnectWithoutRel_subdInput | MerchantCreateOrConnectWithoutRel_subdInput[]
    upsert?: MerchantUpsertWithWhereUniqueWithoutRel_subdInput | MerchantUpsertWithWhereUniqueWithoutRel_subdInput[]
    createMany?: MerchantCreateManyRel_subdInputEnvelope
    set?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    disconnect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    delete?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    connect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    update?: MerchantUpdateWithWhereUniqueWithoutRel_subdInput | MerchantUpdateWithWhereUniqueWithoutRel_subdInput[]
    updateMany?: MerchantUpdateManyWithWhereWithoutRel_subdInput | MerchantUpdateManyWithWhereWithoutRel_subdInput[]
    deleteMany?: MerchantScalarWhereInput | MerchantScalarWhereInput[]
  }

  export type MerchantCreateNestedManyWithoutRel_cityInput = {
    create?: XOR<MerchantCreateWithoutRel_cityInput, MerchantUncheckedCreateWithoutRel_cityInput> | MerchantCreateWithoutRel_cityInput[] | MerchantUncheckedCreateWithoutRel_cityInput[]
    connectOrCreate?: MerchantCreateOrConnectWithoutRel_cityInput | MerchantCreateOrConnectWithoutRel_cityInput[]
    createMany?: MerchantCreateManyRel_cityInputEnvelope
    connect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
  }

  export type MerchantUncheckedCreateNestedManyWithoutRel_cityInput = {
    create?: XOR<MerchantCreateWithoutRel_cityInput, MerchantUncheckedCreateWithoutRel_cityInput> | MerchantCreateWithoutRel_cityInput[] | MerchantUncheckedCreateWithoutRel_cityInput[]
    connectOrCreate?: MerchantCreateOrConnectWithoutRel_cityInput | MerchantCreateOrConnectWithoutRel_cityInput[]
    createMany?: MerchantCreateManyRel_cityInputEnvelope
    connect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
  }

  export type MerchantUpdateManyWithoutRel_cityNestedInput = {
    create?: XOR<MerchantCreateWithoutRel_cityInput, MerchantUncheckedCreateWithoutRel_cityInput> | MerchantCreateWithoutRel_cityInput[] | MerchantUncheckedCreateWithoutRel_cityInput[]
    connectOrCreate?: MerchantCreateOrConnectWithoutRel_cityInput | MerchantCreateOrConnectWithoutRel_cityInput[]
    upsert?: MerchantUpsertWithWhereUniqueWithoutRel_cityInput | MerchantUpsertWithWhereUniqueWithoutRel_cityInput[]
    createMany?: MerchantCreateManyRel_cityInputEnvelope
    set?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    disconnect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    delete?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    connect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    update?: MerchantUpdateWithWhereUniqueWithoutRel_cityInput | MerchantUpdateWithWhereUniqueWithoutRel_cityInput[]
    updateMany?: MerchantUpdateManyWithWhereWithoutRel_cityInput | MerchantUpdateManyWithWhereWithoutRel_cityInput[]
    deleteMany?: MerchantScalarWhereInput | MerchantScalarWhereInput[]
  }

  export type MerchantUncheckedUpdateManyWithoutRel_cityNestedInput = {
    create?: XOR<MerchantCreateWithoutRel_cityInput, MerchantUncheckedCreateWithoutRel_cityInput> | MerchantCreateWithoutRel_cityInput[] | MerchantUncheckedCreateWithoutRel_cityInput[]
    connectOrCreate?: MerchantCreateOrConnectWithoutRel_cityInput | MerchantCreateOrConnectWithoutRel_cityInput[]
    upsert?: MerchantUpsertWithWhereUniqueWithoutRel_cityInput | MerchantUpsertWithWhereUniqueWithoutRel_cityInput[]
    createMany?: MerchantCreateManyRel_cityInputEnvelope
    set?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    disconnect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    delete?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    connect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    update?: MerchantUpdateWithWhereUniqueWithoutRel_cityInput | MerchantUpdateWithWhereUniqueWithoutRel_cityInput[]
    updateMany?: MerchantUpdateManyWithWhereWithoutRel_cityInput | MerchantUpdateManyWithWhereWithoutRel_cityInput[]
    deleteMany?: MerchantScalarWhereInput | MerchantScalarWhereInput[]
  }

  export type MerchantCreateNestedManyWithoutRel_provInput = {
    create?: XOR<MerchantCreateWithoutRel_provInput, MerchantUncheckedCreateWithoutRel_provInput> | MerchantCreateWithoutRel_provInput[] | MerchantUncheckedCreateWithoutRel_provInput[]
    connectOrCreate?: MerchantCreateOrConnectWithoutRel_provInput | MerchantCreateOrConnectWithoutRel_provInput[]
    createMany?: MerchantCreateManyRel_provInputEnvelope
    connect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
  }

  export type MerchantUncheckedCreateNestedManyWithoutRel_provInput = {
    create?: XOR<MerchantCreateWithoutRel_provInput, MerchantUncheckedCreateWithoutRel_provInput> | MerchantCreateWithoutRel_provInput[] | MerchantUncheckedCreateWithoutRel_provInput[]
    connectOrCreate?: MerchantCreateOrConnectWithoutRel_provInput | MerchantCreateOrConnectWithoutRel_provInput[]
    createMany?: MerchantCreateManyRel_provInputEnvelope
    connect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
  }

  export type MerchantUpdateManyWithoutRel_provNestedInput = {
    create?: XOR<MerchantCreateWithoutRel_provInput, MerchantUncheckedCreateWithoutRel_provInput> | MerchantCreateWithoutRel_provInput[] | MerchantUncheckedCreateWithoutRel_provInput[]
    connectOrCreate?: MerchantCreateOrConnectWithoutRel_provInput | MerchantCreateOrConnectWithoutRel_provInput[]
    upsert?: MerchantUpsertWithWhereUniqueWithoutRel_provInput | MerchantUpsertWithWhereUniqueWithoutRel_provInput[]
    createMany?: MerchantCreateManyRel_provInputEnvelope
    set?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    disconnect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    delete?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    connect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    update?: MerchantUpdateWithWhereUniqueWithoutRel_provInput | MerchantUpdateWithWhereUniqueWithoutRel_provInput[]
    updateMany?: MerchantUpdateManyWithWhereWithoutRel_provInput | MerchantUpdateManyWithWhereWithoutRel_provInput[]
    deleteMany?: MerchantScalarWhereInput | MerchantScalarWhereInput[]
  }

  export type MerchantUncheckedUpdateManyWithoutRel_provNestedInput = {
    create?: XOR<MerchantCreateWithoutRel_provInput, MerchantUncheckedCreateWithoutRel_provInput> | MerchantCreateWithoutRel_provInput[] | MerchantUncheckedCreateWithoutRel_provInput[]
    connectOrCreate?: MerchantCreateOrConnectWithoutRel_provInput | MerchantCreateOrConnectWithoutRel_provInput[]
    upsert?: MerchantUpsertWithWhereUniqueWithoutRel_provInput | MerchantUpsertWithWhereUniqueWithoutRel_provInput[]
    createMany?: MerchantCreateManyRel_provInputEnvelope
    set?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    disconnect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    delete?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    connect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    update?: MerchantUpdateWithWhereUniqueWithoutRel_provInput | MerchantUpdateWithWhereUniqueWithoutRel_provInput[]
    updateMany?: MerchantUpdateManyWithWhereWithoutRel_provInput | MerchantUpdateManyWithWhereWithoutRel_provInput[]
    deleteMany?: MerchantScalarWhereInput | MerchantScalarWhereInput[]
  }

  export type MenuCreateNestedManyWithoutRel_categoryInput = {
    create?: XOR<MenuCreateWithoutRel_categoryInput, MenuUncheckedCreateWithoutRel_categoryInput> | MenuCreateWithoutRel_categoryInput[] | MenuUncheckedCreateWithoutRel_categoryInput[]
    connectOrCreate?: MenuCreateOrConnectWithoutRel_categoryInput | MenuCreateOrConnectWithoutRel_categoryInput[]
    createMany?: MenuCreateManyRel_categoryInputEnvelope
    connect?: MenuWhereUniqueInput | MenuWhereUniqueInput[]
  }

  export type MenuUncheckedCreateNestedManyWithoutRel_categoryInput = {
    create?: XOR<MenuCreateWithoutRel_categoryInput, MenuUncheckedCreateWithoutRel_categoryInput> | MenuCreateWithoutRel_categoryInput[] | MenuUncheckedCreateWithoutRel_categoryInput[]
    connectOrCreate?: MenuCreateOrConnectWithoutRel_categoryInput | MenuCreateOrConnectWithoutRel_categoryInput[]
    createMany?: MenuCreateManyRel_categoryInputEnvelope
    connect?: MenuWhereUniqueInput | MenuWhereUniqueInput[]
  }

  export type MenuUpdateManyWithoutRel_categoryNestedInput = {
    create?: XOR<MenuCreateWithoutRel_categoryInput, MenuUncheckedCreateWithoutRel_categoryInput> | MenuCreateWithoutRel_categoryInput[] | MenuUncheckedCreateWithoutRel_categoryInput[]
    connectOrCreate?: MenuCreateOrConnectWithoutRel_categoryInput | MenuCreateOrConnectWithoutRel_categoryInput[]
    upsert?: MenuUpsertWithWhereUniqueWithoutRel_categoryInput | MenuUpsertWithWhereUniqueWithoutRel_categoryInput[]
    createMany?: MenuCreateManyRel_categoryInputEnvelope
    set?: MenuWhereUniqueInput | MenuWhereUniqueInput[]
    disconnect?: MenuWhereUniqueInput | MenuWhereUniqueInput[]
    delete?: MenuWhereUniqueInput | MenuWhereUniqueInput[]
    connect?: MenuWhereUniqueInput | MenuWhereUniqueInput[]
    update?: MenuUpdateWithWhereUniqueWithoutRel_categoryInput | MenuUpdateWithWhereUniqueWithoutRel_categoryInput[]
    updateMany?: MenuUpdateManyWithWhereWithoutRel_categoryInput | MenuUpdateManyWithWhereWithoutRel_categoryInput[]
    deleteMany?: MenuScalarWhereInput | MenuScalarWhereInput[]
  }

  export type MenuUncheckedUpdateManyWithoutRel_categoryNestedInput = {
    create?: XOR<MenuCreateWithoutRel_categoryInput, MenuUncheckedCreateWithoutRel_categoryInput> | MenuCreateWithoutRel_categoryInput[] | MenuUncheckedCreateWithoutRel_categoryInput[]
    connectOrCreate?: MenuCreateOrConnectWithoutRel_categoryInput | MenuCreateOrConnectWithoutRel_categoryInput[]
    upsert?: MenuUpsertWithWhereUniqueWithoutRel_categoryInput | MenuUpsertWithWhereUniqueWithoutRel_categoryInput[]
    createMany?: MenuCreateManyRel_categoryInputEnvelope
    set?: MenuWhereUniqueInput | MenuWhereUniqueInput[]
    disconnect?: MenuWhereUniqueInput | MenuWhereUniqueInput[]
    delete?: MenuWhereUniqueInput | MenuWhereUniqueInput[]
    connect?: MenuWhereUniqueInput | MenuWhereUniqueInput[]
    update?: MenuUpdateWithWhereUniqueWithoutRel_categoryInput | MenuUpdateWithWhereUniqueWithoutRel_categoryInput[]
    updateMany?: MenuUpdateManyWithWhereWithoutRel_categoryInput | MenuUpdateManyWithWhereWithoutRel_categoryInput[]
    deleteMany?: MenuScalarWhereInput | MenuScalarWhereInput[]
  }

  export type StatusCreateNestedOneWithoutRel_userInput = {
    create?: XOR<StatusCreateWithoutRel_userInput, StatusUncheckedCreateWithoutRel_userInput>
    connectOrCreate?: StatusCreateOrConnectWithoutRel_userInput
    connect?: StatusWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type StatusUpdateOneRequiredWithoutRel_userNestedInput = {
    create?: XOR<StatusCreateWithoutRel_userInput, StatusUncheckedCreateWithoutRel_userInput>
    connectOrCreate?: StatusCreateOrConnectWithoutRel_userInput
    upsert?: StatusUpsertWithoutRel_userInput
    connect?: StatusWhereUniqueInput
    update?: XOR<XOR<StatusUpdateToOneWithWhereWithoutRel_userInput, StatusUpdateWithoutRel_userInput>, StatusUncheckedUpdateWithoutRel_userInput>
  }

  export type BrandCreateNestedOneWithoutRel_courierInput = {
    create?: XOR<BrandCreateWithoutRel_courierInput, BrandUncheckedCreateWithoutRel_courierInput>
    connectOrCreate?: BrandCreateOrConnectWithoutRel_courierInput
    connect?: BrandWhereUniqueInput
  }

  export type StatusCreateNestedOneWithoutRel_courierInput = {
    create?: XOR<StatusCreateWithoutRel_courierInput, StatusUncheckedCreateWithoutRel_courierInput>
    connectOrCreate?: StatusCreateOrConnectWithoutRel_courierInput
    connect?: StatusWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type BrandUpdateOneRequiredWithoutRel_courierNestedInput = {
    create?: XOR<BrandCreateWithoutRel_courierInput, BrandUncheckedCreateWithoutRel_courierInput>
    connectOrCreate?: BrandCreateOrConnectWithoutRel_courierInput
    upsert?: BrandUpsertWithoutRel_courierInput
    connect?: BrandWhereUniqueInput
    update?: XOR<XOR<BrandUpdateToOneWithWhereWithoutRel_courierInput, BrandUpdateWithoutRel_courierInput>, BrandUncheckedUpdateWithoutRel_courierInput>
  }

  export type StatusUpdateOneRequiredWithoutRel_courierNestedInput = {
    create?: XOR<StatusCreateWithoutRel_courierInput, StatusUncheckedCreateWithoutRel_courierInput>
    connectOrCreate?: StatusCreateOrConnectWithoutRel_courierInput
    upsert?: StatusUpsertWithoutRel_courierInput
    connect?: StatusWhereUniqueInput
    update?: XOR<XOR<StatusUpdateToOneWithWhereWithoutRel_courierInput, StatusUpdateWithoutRel_courierInput>, StatusUncheckedUpdateWithoutRel_courierInput>
  }

  export type MenuCreateNestedManyWithoutRel_merchantInput = {
    create?: XOR<MenuCreateWithoutRel_merchantInput, MenuUncheckedCreateWithoutRel_merchantInput> | MenuCreateWithoutRel_merchantInput[] | MenuUncheckedCreateWithoutRel_merchantInput[]
    connectOrCreate?: MenuCreateOrConnectWithoutRel_merchantInput | MenuCreateOrConnectWithoutRel_merchantInput[]
    createMany?: MenuCreateManyRel_merchantInputEnvelope
    connect?: MenuWhereUniqueInput | MenuWhereUniqueInput[]
  }

  export type SubdistrictCreateNestedOneWithoutRel_merchantInput = {
    create?: XOR<SubdistrictCreateWithoutRel_merchantInput, SubdistrictUncheckedCreateWithoutRel_merchantInput>
    connectOrCreate?: SubdistrictCreateOrConnectWithoutRel_merchantInput
    connect?: SubdistrictWhereUniqueInput
  }

  export type CityCreateNestedOneWithoutRel_merchantInput = {
    create?: XOR<CityCreateWithoutRel_merchantInput, CityUncheckedCreateWithoutRel_merchantInput>
    connectOrCreate?: CityCreateOrConnectWithoutRel_merchantInput
    connect?: CityWhereUniqueInput
  }

  export type ProvinceCreateNestedOneWithoutRel_merchantInput = {
    create?: XOR<ProvinceCreateWithoutRel_merchantInput, ProvinceUncheckedCreateWithoutRel_merchantInput>
    connectOrCreate?: ProvinceCreateOrConnectWithoutRel_merchantInput
    connect?: ProvinceWhereUniqueInput
  }

  export type StatusCreateNestedOneWithoutRel_merchantInput = {
    create?: XOR<StatusCreateWithoutRel_merchantInput, StatusUncheckedCreateWithoutRel_merchantInput>
    connectOrCreate?: StatusCreateOrConnectWithoutRel_merchantInput
    connect?: StatusWhereUniqueInput
  }

  export type MenuUncheckedCreateNestedManyWithoutRel_merchantInput = {
    create?: XOR<MenuCreateWithoutRel_merchantInput, MenuUncheckedCreateWithoutRel_merchantInput> | MenuCreateWithoutRel_merchantInput[] | MenuUncheckedCreateWithoutRel_merchantInput[]
    connectOrCreate?: MenuCreateOrConnectWithoutRel_merchantInput | MenuCreateOrConnectWithoutRel_merchantInput[]
    createMany?: MenuCreateManyRel_merchantInputEnvelope
    connect?: MenuWhereUniqueInput | MenuWhereUniqueInput[]
  }

  export type MenuUpdateManyWithoutRel_merchantNestedInput = {
    create?: XOR<MenuCreateWithoutRel_merchantInput, MenuUncheckedCreateWithoutRel_merchantInput> | MenuCreateWithoutRel_merchantInput[] | MenuUncheckedCreateWithoutRel_merchantInput[]
    connectOrCreate?: MenuCreateOrConnectWithoutRel_merchantInput | MenuCreateOrConnectWithoutRel_merchantInput[]
    upsert?: MenuUpsertWithWhereUniqueWithoutRel_merchantInput | MenuUpsertWithWhereUniqueWithoutRel_merchantInput[]
    createMany?: MenuCreateManyRel_merchantInputEnvelope
    set?: MenuWhereUniqueInput | MenuWhereUniqueInput[]
    disconnect?: MenuWhereUniqueInput | MenuWhereUniqueInput[]
    delete?: MenuWhereUniqueInput | MenuWhereUniqueInput[]
    connect?: MenuWhereUniqueInput | MenuWhereUniqueInput[]
    update?: MenuUpdateWithWhereUniqueWithoutRel_merchantInput | MenuUpdateWithWhereUniqueWithoutRel_merchantInput[]
    updateMany?: MenuUpdateManyWithWhereWithoutRel_merchantInput | MenuUpdateManyWithWhereWithoutRel_merchantInput[]
    deleteMany?: MenuScalarWhereInput | MenuScalarWhereInput[]
  }

  export type SubdistrictUpdateOneRequiredWithoutRel_merchantNestedInput = {
    create?: XOR<SubdistrictCreateWithoutRel_merchantInput, SubdistrictUncheckedCreateWithoutRel_merchantInput>
    connectOrCreate?: SubdistrictCreateOrConnectWithoutRel_merchantInput
    upsert?: SubdistrictUpsertWithoutRel_merchantInput
    connect?: SubdistrictWhereUniqueInput
    update?: XOR<XOR<SubdistrictUpdateToOneWithWhereWithoutRel_merchantInput, SubdistrictUpdateWithoutRel_merchantInput>, SubdistrictUncheckedUpdateWithoutRel_merchantInput>
  }

  export type CityUpdateOneRequiredWithoutRel_merchantNestedInput = {
    create?: XOR<CityCreateWithoutRel_merchantInput, CityUncheckedCreateWithoutRel_merchantInput>
    connectOrCreate?: CityCreateOrConnectWithoutRel_merchantInput
    upsert?: CityUpsertWithoutRel_merchantInput
    connect?: CityWhereUniqueInput
    update?: XOR<XOR<CityUpdateToOneWithWhereWithoutRel_merchantInput, CityUpdateWithoutRel_merchantInput>, CityUncheckedUpdateWithoutRel_merchantInput>
  }

  export type ProvinceUpdateOneRequiredWithoutRel_merchantNestedInput = {
    create?: XOR<ProvinceCreateWithoutRel_merchantInput, ProvinceUncheckedCreateWithoutRel_merchantInput>
    connectOrCreate?: ProvinceCreateOrConnectWithoutRel_merchantInput
    upsert?: ProvinceUpsertWithoutRel_merchantInput
    connect?: ProvinceWhereUniqueInput
    update?: XOR<XOR<ProvinceUpdateToOneWithWhereWithoutRel_merchantInput, ProvinceUpdateWithoutRel_merchantInput>, ProvinceUncheckedUpdateWithoutRel_merchantInput>
  }

  export type StatusUpdateOneRequiredWithoutRel_merchantNestedInput = {
    create?: XOR<StatusCreateWithoutRel_merchantInput, StatusUncheckedCreateWithoutRel_merchantInput>
    connectOrCreate?: StatusCreateOrConnectWithoutRel_merchantInput
    upsert?: StatusUpsertWithoutRel_merchantInput
    connect?: StatusWhereUniqueInput
    update?: XOR<XOR<StatusUpdateToOneWithWhereWithoutRel_merchantInput, StatusUpdateWithoutRel_merchantInput>, StatusUncheckedUpdateWithoutRel_merchantInput>
  }

  export type MenuUncheckedUpdateManyWithoutRel_merchantNestedInput = {
    create?: XOR<MenuCreateWithoutRel_merchantInput, MenuUncheckedCreateWithoutRel_merchantInput> | MenuCreateWithoutRel_merchantInput[] | MenuUncheckedCreateWithoutRel_merchantInput[]
    connectOrCreate?: MenuCreateOrConnectWithoutRel_merchantInput | MenuCreateOrConnectWithoutRel_merchantInput[]
    upsert?: MenuUpsertWithWhereUniqueWithoutRel_merchantInput | MenuUpsertWithWhereUniqueWithoutRel_merchantInput[]
    createMany?: MenuCreateManyRel_merchantInputEnvelope
    set?: MenuWhereUniqueInput | MenuWhereUniqueInput[]
    disconnect?: MenuWhereUniqueInput | MenuWhereUniqueInput[]
    delete?: MenuWhereUniqueInput | MenuWhereUniqueInput[]
    connect?: MenuWhereUniqueInput | MenuWhereUniqueInput[]
    update?: MenuUpdateWithWhereUniqueWithoutRel_merchantInput | MenuUpdateWithWhereUniqueWithoutRel_merchantInput[]
    updateMany?: MenuUpdateManyWithWhereWithoutRel_merchantInput | MenuUpdateManyWithWhereWithoutRel_merchantInput[]
    deleteMany?: MenuScalarWhereInput | MenuScalarWhereInput[]
  }

  export type VariantCreateNestedManyWithoutRel_menuInput = {
    create?: XOR<VariantCreateWithoutRel_menuInput, VariantUncheckedCreateWithoutRel_menuInput> | VariantCreateWithoutRel_menuInput[] | VariantUncheckedCreateWithoutRel_menuInput[]
    connectOrCreate?: VariantCreateOrConnectWithoutRel_menuInput | VariantCreateOrConnectWithoutRel_menuInput[]
    createMany?: VariantCreateManyRel_menuInputEnvelope
    connect?: VariantWhereUniqueInput | VariantWhereUniqueInput[]
  }

  export type MerchantCreateNestedOneWithoutRel_menuInput = {
    create?: XOR<MerchantCreateWithoutRel_menuInput, MerchantUncheckedCreateWithoutRel_menuInput>
    connectOrCreate?: MerchantCreateOrConnectWithoutRel_menuInput
    connect?: MerchantWhereUniqueInput
  }

  export type CategoryCreateNestedOneWithoutRel_menuInput = {
    create?: XOR<CategoryCreateWithoutRel_menuInput, CategoryUncheckedCreateWithoutRel_menuInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutRel_menuInput
    connect?: CategoryWhereUniqueInput
  }

  export type VariantUncheckedCreateNestedManyWithoutRel_menuInput = {
    create?: XOR<VariantCreateWithoutRel_menuInput, VariantUncheckedCreateWithoutRel_menuInput> | VariantCreateWithoutRel_menuInput[] | VariantUncheckedCreateWithoutRel_menuInput[]
    connectOrCreate?: VariantCreateOrConnectWithoutRel_menuInput | VariantCreateOrConnectWithoutRel_menuInput[]
    createMany?: VariantCreateManyRel_menuInputEnvelope
    connect?: VariantWhereUniqueInput | VariantWhereUniqueInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type VariantUpdateManyWithoutRel_menuNestedInput = {
    create?: XOR<VariantCreateWithoutRel_menuInput, VariantUncheckedCreateWithoutRel_menuInput> | VariantCreateWithoutRel_menuInput[] | VariantUncheckedCreateWithoutRel_menuInput[]
    connectOrCreate?: VariantCreateOrConnectWithoutRel_menuInput | VariantCreateOrConnectWithoutRel_menuInput[]
    upsert?: VariantUpsertWithWhereUniqueWithoutRel_menuInput | VariantUpsertWithWhereUniqueWithoutRel_menuInput[]
    createMany?: VariantCreateManyRel_menuInputEnvelope
    set?: VariantWhereUniqueInput | VariantWhereUniqueInput[]
    disconnect?: VariantWhereUniqueInput | VariantWhereUniqueInput[]
    delete?: VariantWhereUniqueInput | VariantWhereUniqueInput[]
    connect?: VariantWhereUniqueInput | VariantWhereUniqueInput[]
    update?: VariantUpdateWithWhereUniqueWithoutRel_menuInput | VariantUpdateWithWhereUniqueWithoutRel_menuInput[]
    updateMany?: VariantUpdateManyWithWhereWithoutRel_menuInput | VariantUpdateManyWithWhereWithoutRel_menuInput[]
    deleteMany?: VariantScalarWhereInput | VariantScalarWhereInput[]
  }

  export type MerchantUpdateOneRequiredWithoutRel_menuNestedInput = {
    create?: XOR<MerchantCreateWithoutRel_menuInput, MerchantUncheckedCreateWithoutRel_menuInput>
    connectOrCreate?: MerchantCreateOrConnectWithoutRel_menuInput
    upsert?: MerchantUpsertWithoutRel_menuInput
    connect?: MerchantWhereUniqueInput
    update?: XOR<XOR<MerchantUpdateToOneWithWhereWithoutRel_menuInput, MerchantUpdateWithoutRel_menuInput>, MerchantUncheckedUpdateWithoutRel_menuInput>
  }

  export type CategoryUpdateOneRequiredWithoutRel_menuNestedInput = {
    create?: XOR<CategoryCreateWithoutRel_menuInput, CategoryUncheckedCreateWithoutRel_menuInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutRel_menuInput
    upsert?: CategoryUpsertWithoutRel_menuInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutRel_menuInput, CategoryUpdateWithoutRel_menuInput>, CategoryUncheckedUpdateWithoutRel_menuInput>
  }

  export type VariantUncheckedUpdateManyWithoutRel_menuNestedInput = {
    create?: XOR<VariantCreateWithoutRel_menuInput, VariantUncheckedCreateWithoutRel_menuInput> | VariantCreateWithoutRel_menuInput[] | VariantUncheckedCreateWithoutRel_menuInput[]
    connectOrCreate?: VariantCreateOrConnectWithoutRel_menuInput | VariantCreateOrConnectWithoutRel_menuInput[]
    upsert?: VariantUpsertWithWhereUniqueWithoutRel_menuInput | VariantUpsertWithWhereUniqueWithoutRel_menuInput[]
    createMany?: VariantCreateManyRel_menuInputEnvelope
    set?: VariantWhereUniqueInput | VariantWhereUniqueInput[]
    disconnect?: VariantWhereUniqueInput | VariantWhereUniqueInput[]
    delete?: VariantWhereUniqueInput | VariantWhereUniqueInput[]
    connect?: VariantWhereUniqueInput | VariantWhereUniqueInput[]
    update?: VariantUpdateWithWhereUniqueWithoutRel_menuInput | VariantUpdateWithWhereUniqueWithoutRel_menuInput[]
    updateMany?: VariantUpdateManyWithWhereWithoutRel_menuInput | VariantUpdateManyWithWhereWithoutRel_menuInput[]
    deleteMany?: VariantScalarWhereInput | VariantScalarWhereInput[]
  }

  export type Variant_itemCreateNestedManyWithoutRel_variantInput = {
    create?: XOR<Variant_itemCreateWithoutRel_variantInput, Variant_itemUncheckedCreateWithoutRel_variantInput> | Variant_itemCreateWithoutRel_variantInput[] | Variant_itemUncheckedCreateWithoutRel_variantInput[]
    connectOrCreate?: Variant_itemCreateOrConnectWithoutRel_variantInput | Variant_itemCreateOrConnectWithoutRel_variantInput[]
    createMany?: Variant_itemCreateManyRel_variantInputEnvelope
    connect?: Variant_itemWhereUniqueInput | Variant_itemWhereUniqueInput[]
  }

  export type MenuCreateNestedOneWithoutRel_variantInput = {
    create?: XOR<MenuCreateWithoutRel_variantInput, MenuUncheckedCreateWithoutRel_variantInput>
    connectOrCreate?: MenuCreateOrConnectWithoutRel_variantInput
    connect?: MenuWhereUniqueInput
  }

  export type Variant_itemUncheckedCreateNestedManyWithoutRel_variantInput = {
    create?: XOR<Variant_itemCreateWithoutRel_variantInput, Variant_itemUncheckedCreateWithoutRel_variantInput> | Variant_itemCreateWithoutRel_variantInput[] | Variant_itemUncheckedCreateWithoutRel_variantInput[]
    connectOrCreate?: Variant_itemCreateOrConnectWithoutRel_variantInput | Variant_itemCreateOrConnectWithoutRel_variantInput[]
    createMany?: Variant_itemCreateManyRel_variantInputEnvelope
    connect?: Variant_itemWhereUniqueInput | Variant_itemWhereUniqueInput[]
  }

  export type Variant_itemUpdateManyWithoutRel_variantNestedInput = {
    create?: XOR<Variant_itemCreateWithoutRel_variantInput, Variant_itemUncheckedCreateWithoutRel_variantInput> | Variant_itemCreateWithoutRel_variantInput[] | Variant_itemUncheckedCreateWithoutRel_variantInput[]
    connectOrCreate?: Variant_itemCreateOrConnectWithoutRel_variantInput | Variant_itemCreateOrConnectWithoutRel_variantInput[]
    upsert?: Variant_itemUpsertWithWhereUniqueWithoutRel_variantInput | Variant_itemUpsertWithWhereUniqueWithoutRel_variantInput[]
    createMany?: Variant_itemCreateManyRel_variantInputEnvelope
    set?: Variant_itemWhereUniqueInput | Variant_itemWhereUniqueInput[]
    disconnect?: Variant_itemWhereUniqueInput | Variant_itemWhereUniqueInput[]
    delete?: Variant_itemWhereUniqueInput | Variant_itemWhereUniqueInput[]
    connect?: Variant_itemWhereUniqueInput | Variant_itemWhereUniqueInput[]
    update?: Variant_itemUpdateWithWhereUniqueWithoutRel_variantInput | Variant_itemUpdateWithWhereUniqueWithoutRel_variantInput[]
    updateMany?: Variant_itemUpdateManyWithWhereWithoutRel_variantInput | Variant_itemUpdateManyWithWhereWithoutRel_variantInput[]
    deleteMany?: Variant_itemScalarWhereInput | Variant_itemScalarWhereInput[]
  }

  export type MenuUpdateOneRequiredWithoutRel_variantNestedInput = {
    create?: XOR<MenuCreateWithoutRel_variantInput, MenuUncheckedCreateWithoutRel_variantInput>
    connectOrCreate?: MenuCreateOrConnectWithoutRel_variantInput
    upsert?: MenuUpsertWithoutRel_variantInput
    connect?: MenuWhereUniqueInput
    update?: XOR<XOR<MenuUpdateToOneWithWhereWithoutRel_variantInput, MenuUpdateWithoutRel_variantInput>, MenuUncheckedUpdateWithoutRel_variantInput>
  }

  export type Variant_itemUncheckedUpdateManyWithoutRel_variantNestedInput = {
    create?: XOR<Variant_itemCreateWithoutRel_variantInput, Variant_itemUncheckedCreateWithoutRel_variantInput> | Variant_itemCreateWithoutRel_variantInput[] | Variant_itemUncheckedCreateWithoutRel_variantInput[]
    connectOrCreate?: Variant_itemCreateOrConnectWithoutRel_variantInput | Variant_itemCreateOrConnectWithoutRel_variantInput[]
    upsert?: Variant_itemUpsertWithWhereUniqueWithoutRel_variantInput | Variant_itemUpsertWithWhereUniqueWithoutRel_variantInput[]
    createMany?: Variant_itemCreateManyRel_variantInputEnvelope
    set?: Variant_itemWhereUniqueInput | Variant_itemWhereUniqueInput[]
    disconnect?: Variant_itemWhereUniqueInput | Variant_itemWhereUniqueInput[]
    delete?: Variant_itemWhereUniqueInput | Variant_itemWhereUniqueInput[]
    connect?: Variant_itemWhereUniqueInput | Variant_itemWhereUniqueInput[]
    update?: Variant_itemUpdateWithWhereUniqueWithoutRel_variantInput | Variant_itemUpdateWithWhereUniqueWithoutRel_variantInput[]
    updateMany?: Variant_itemUpdateManyWithWhereWithoutRel_variantInput | Variant_itemUpdateManyWithWhereWithoutRel_variantInput[]
    deleteMany?: Variant_itemScalarWhereInput | Variant_itemScalarWhereInput[]
  }

  export type VariantCreateNestedOneWithoutRel_variant_itemInput = {
    create?: XOR<VariantCreateWithoutRel_variant_itemInput, VariantUncheckedCreateWithoutRel_variant_itemInput>
    connectOrCreate?: VariantCreateOrConnectWithoutRel_variant_itemInput
    connect?: VariantWhereUniqueInput
  }

  export type VariantUpdateOneRequiredWithoutRel_variant_itemNestedInput = {
    create?: XOR<VariantCreateWithoutRel_variant_itemInput, VariantUncheckedCreateWithoutRel_variant_itemInput>
    connectOrCreate?: VariantCreateOrConnectWithoutRel_variant_itemInput
    upsert?: VariantUpsertWithoutRel_variant_itemInput
    connect?: VariantWhereUniqueInput
    update?: XOR<XOR<VariantUpdateToOneWithWhereWithoutRel_variant_itemInput, VariantUpdateWithoutRel_variant_itemInput>, VariantUncheckedUpdateWithoutRel_variant_itemInput>
  }

  export type Order_itemCreateNestedManyWithoutRel_orderInput = {
    create?: XOR<Order_itemCreateWithoutRel_orderInput, Order_itemUncheckedCreateWithoutRel_orderInput> | Order_itemCreateWithoutRel_orderInput[] | Order_itemUncheckedCreateWithoutRel_orderInput[]
    connectOrCreate?: Order_itemCreateOrConnectWithoutRel_orderInput | Order_itemCreateOrConnectWithoutRel_orderInput[]
    createMany?: Order_itemCreateManyRel_orderInputEnvelope
    connect?: Order_itemWhereUniqueInput | Order_itemWhereUniqueInput[]
  }

  export type Order_itemUncheckedCreateNestedManyWithoutRel_orderInput = {
    create?: XOR<Order_itemCreateWithoutRel_orderInput, Order_itemUncheckedCreateWithoutRel_orderInput> | Order_itemCreateWithoutRel_orderInput[] | Order_itemUncheckedCreateWithoutRel_orderInput[]
    connectOrCreate?: Order_itemCreateOrConnectWithoutRel_orderInput | Order_itemCreateOrConnectWithoutRel_orderInput[]
    createMany?: Order_itemCreateManyRel_orderInputEnvelope
    connect?: Order_itemWhereUniqueInput | Order_itemWhereUniqueInput[]
  }

  export type Order_itemUpdateManyWithoutRel_orderNestedInput = {
    create?: XOR<Order_itemCreateWithoutRel_orderInput, Order_itemUncheckedCreateWithoutRel_orderInput> | Order_itemCreateWithoutRel_orderInput[] | Order_itemUncheckedCreateWithoutRel_orderInput[]
    connectOrCreate?: Order_itemCreateOrConnectWithoutRel_orderInput | Order_itemCreateOrConnectWithoutRel_orderInput[]
    upsert?: Order_itemUpsertWithWhereUniqueWithoutRel_orderInput | Order_itemUpsertWithWhereUniqueWithoutRel_orderInput[]
    createMany?: Order_itemCreateManyRel_orderInputEnvelope
    set?: Order_itemWhereUniqueInput | Order_itemWhereUniqueInput[]
    disconnect?: Order_itemWhereUniqueInput | Order_itemWhereUniqueInput[]
    delete?: Order_itemWhereUniqueInput | Order_itemWhereUniqueInput[]
    connect?: Order_itemWhereUniqueInput | Order_itemWhereUniqueInput[]
    update?: Order_itemUpdateWithWhereUniqueWithoutRel_orderInput | Order_itemUpdateWithWhereUniqueWithoutRel_orderInput[]
    updateMany?: Order_itemUpdateManyWithWhereWithoutRel_orderInput | Order_itemUpdateManyWithWhereWithoutRel_orderInput[]
    deleteMany?: Order_itemScalarWhereInput | Order_itemScalarWhereInput[]
  }

  export type Order_itemUncheckedUpdateManyWithoutRel_orderNestedInput = {
    create?: XOR<Order_itemCreateWithoutRel_orderInput, Order_itemUncheckedCreateWithoutRel_orderInput> | Order_itemCreateWithoutRel_orderInput[] | Order_itemUncheckedCreateWithoutRel_orderInput[]
    connectOrCreate?: Order_itemCreateOrConnectWithoutRel_orderInput | Order_itemCreateOrConnectWithoutRel_orderInput[]
    upsert?: Order_itemUpsertWithWhereUniqueWithoutRel_orderInput | Order_itemUpsertWithWhereUniqueWithoutRel_orderInput[]
    createMany?: Order_itemCreateManyRel_orderInputEnvelope
    set?: Order_itemWhereUniqueInput | Order_itemWhereUniqueInput[]
    disconnect?: Order_itemWhereUniqueInput | Order_itemWhereUniqueInput[]
    delete?: Order_itemWhereUniqueInput | Order_itemWhereUniqueInput[]
    connect?: Order_itemWhereUniqueInput | Order_itemWhereUniqueInput[]
    update?: Order_itemUpdateWithWhereUniqueWithoutRel_orderInput | Order_itemUpdateWithWhereUniqueWithoutRel_orderInput[]
    updateMany?: Order_itemUpdateManyWithWhereWithoutRel_orderInput | Order_itemUpdateManyWithWhereWithoutRel_orderInput[]
    deleteMany?: Order_itemScalarWhereInput | Order_itemScalarWhereInput[]
  }

  export type OrderCreateNestedOneWithoutRel_order_itemInput = {
    create?: XOR<OrderCreateWithoutRel_order_itemInput, OrderUncheckedCreateWithoutRel_order_itemInput>
    connectOrCreate?: OrderCreateOrConnectWithoutRel_order_itemInput
    connect?: OrderWhereUniqueInput
  }

  export type OrderUpdateOneRequiredWithoutRel_order_itemNestedInput = {
    create?: XOR<OrderCreateWithoutRel_order_itemInput, OrderUncheckedCreateWithoutRel_order_itemInput>
    connectOrCreate?: OrderCreateOrConnectWithoutRel_order_itemInput
    upsert?: OrderUpsertWithoutRel_order_itemInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutRel_order_itemInput, OrderUpdateWithoutRel_order_itemInput>, OrderUncheckedUpdateWithoutRel_order_itemInput>
  }

  export type Status_orderCreateNestedOneWithoutRel_log_orderInput = {
    create?: XOR<Status_orderCreateWithoutRel_log_orderInput, Status_orderUncheckedCreateWithoutRel_log_orderInput>
    connectOrCreate?: Status_orderCreateOrConnectWithoutRel_log_orderInput
    connect?: Status_orderWhereUniqueInput
  }

  export type Status_orderUpdateOneRequiredWithoutRel_log_orderNestedInput = {
    create?: XOR<Status_orderCreateWithoutRel_log_orderInput, Status_orderUncheckedCreateWithoutRel_log_orderInput>
    connectOrCreate?: Status_orderCreateOrConnectWithoutRel_log_orderInput
    upsert?: Status_orderUpsertWithoutRel_log_orderInput
    connect?: Status_orderWhereUniqueInput
    update?: XOR<XOR<Status_orderUpdateToOneWithWhereWithoutRel_log_orderInput, Status_orderUpdateWithoutRel_log_orderInput>, Status_orderUncheckedUpdateWithoutRel_log_orderInput>
  }

  export type History_order_itemCreateNestedManyWithoutRel_history_orderInput = {
    create?: XOR<History_order_itemCreateWithoutRel_history_orderInput, History_order_itemUncheckedCreateWithoutRel_history_orderInput> | History_order_itemCreateWithoutRel_history_orderInput[] | History_order_itemUncheckedCreateWithoutRel_history_orderInput[]
    connectOrCreate?: History_order_itemCreateOrConnectWithoutRel_history_orderInput | History_order_itemCreateOrConnectWithoutRel_history_orderInput[]
    createMany?: History_order_itemCreateManyRel_history_orderInputEnvelope
    connect?: History_order_itemWhereUniqueInput | History_order_itemWhereUniqueInput[]
  }

  export type History_order_itemUncheckedCreateNestedManyWithoutRel_history_orderInput = {
    create?: XOR<History_order_itemCreateWithoutRel_history_orderInput, History_order_itemUncheckedCreateWithoutRel_history_orderInput> | History_order_itemCreateWithoutRel_history_orderInput[] | History_order_itemUncheckedCreateWithoutRel_history_orderInput[]
    connectOrCreate?: History_order_itemCreateOrConnectWithoutRel_history_orderInput | History_order_itemCreateOrConnectWithoutRel_history_orderInput[]
    createMany?: History_order_itemCreateManyRel_history_orderInputEnvelope
    connect?: History_order_itemWhereUniqueInput | History_order_itemWhereUniqueInput[]
  }

  export type History_order_itemUpdateManyWithoutRel_history_orderNestedInput = {
    create?: XOR<History_order_itemCreateWithoutRel_history_orderInput, History_order_itemUncheckedCreateWithoutRel_history_orderInput> | History_order_itemCreateWithoutRel_history_orderInput[] | History_order_itemUncheckedCreateWithoutRel_history_orderInput[]
    connectOrCreate?: History_order_itemCreateOrConnectWithoutRel_history_orderInput | History_order_itemCreateOrConnectWithoutRel_history_orderInput[]
    upsert?: History_order_itemUpsertWithWhereUniqueWithoutRel_history_orderInput | History_order_itemUpsertWithWhereUniqueWithoutRel_history_orderInput[]
    createMany?: History_order_itemCreateManyRel_history_orderInputEnvelope
    set?: History_order_itemWhereUniqueInput | History_order_itemWhereUniqueInput[]
    disconnect?: History_order_itemWhereUniqueInput | History_order_itemWhereUniqueInput[]
    delete?: History_order_itemWhereUniqueInput | History_order_itemWhereUniqueInput[]
    connect?: History_order_itemWhereUniqueInput | History_order_itemWhereUniqueInput[]
    update?: History_order_itemUpdateWithWhereUniqueWithoutRel_history_orderInput | History_order_itemUpdateWithWhereUniqueWithoutRel_history_orderInput[]
    updateMany?: History_order_itemUpdateManyWithWhereWithoutRel_history_orderInput | History_order_itemUpdateManyWithWhereWithoutRel_history_orderInput[]
    deleteMany?: History_order_itemScalarWhereInput | History_order_itemScalarWhereInput[]
  }

  export type History_order_itemUncheckedUpdateManyWithoutRel_history_orderNestedInput = {
    create?: XOR<History_order_itemCreateWithoutRel_history_orderInput, History_order_itemUncheckedCreateWithoutRel_history_orderInput> | History_order_itemCreateWithoutRel_history_orderInput[] | History_order_itemUncheckedCreateWithoutRel_history_orderInput[]
    connectOrCreate?: History_order_itemCreateOrConnectWithoutRel_history_orderInput | History_order_itemCreateOrConnectWithoutRel_history_orderInput[]
    upsert?: History_order_itemUpsertWithWhereUniqueWithoutRel_history_orderInput | History_order_itemUpsertWithWhereUniqueWithoutRel_history_orderInput[]
    createMany?: History_order_itemCreateManyRel_history_orderInputEnvelope
    set?: History_order_itemWhereUniqueInput | History_order_itemWhereUniqueInput[]
    disconnect?: History_order_itemWhereUniqueInput | History_order_itemWhereUniqueInput[]
    delete?: History_order_itemWhereUniqueInput | History_order_itemWhereUniqueInput[]
    connect?: History_order_itemWhereUniqueInput | History_order_itemWhereUniqueInput[]
    update?: History_order_itemUpdateWithWhereUniqueWithoutRel_history_orderInput | History_order_itemUpdateWithWhereUniqueWithoutRel_history_orderInput[]
    updateMany?: History_order_itemUpdateManyWithWhereWithoutRel_history_orderInput | History_order_itemUpdateManyWithWhereWithoutRel_history_orderInput[]
    deleteMany?: History_order_itemScalarWhereInput | History_order_itemScalarWhereInput[]
  }

  export type History_orderCreateNestedOneWithoutRel_history_order_itemInput = {
    create?: XOR<History_orderCreateWithoutRel_history_order_itemInput, History_orderUncheckedCreateWithoutRel_history_order_itemInput>
    connectOrCreate?: History_orderCreateOrConnectWithoutRel_history_order_itemInput
    connect?: History_orderWhereUniqueInput
  }

  export type History_orderUpdateOneRequiredWithoutRel_history_order_itemNestedInput = {
    create?: XOR<History_orderCreateWithoutRel_history_order_itemInput, History_orderUncheckedCreateWithoutRel_history_order_itemInput>
    connectOrCreate?: History_orderCreateOrConnectWithoutRel_history_order_itemInput
    upsert?: History_orderUpsertWithoutRel_history_order_itemInput
    connect?: History_orderWhereUniqueInput
    update?: XOR<XOR<History_orderUpdateToOneWithWhereWithoutRel_history_order_itemInput, History_orderUpdateWithoutRel_history_order_itemInput>, History_orderUncheckedUpdateWithoutRel_history_order_itemInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type UserCreateWithoutRel_statusInput = {
    id: string
    username: string
    password: string
    name: string
    email: string
    phone?: string | null
    poin: number
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type UserUncheckedCreateWithoutRel_statusInput = {
    id: string
    username: string
    password: string
    name: string
    email: string
    phone?: string | null
    poin: number
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type UserCreateOrConnectWithoutRel_statusInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRel_statusInput, UserUncheckedCreateWithoutRel_statusInput>
  }

  export type UserCreateManyRel_statusInputEnvelope = {
    data: UserCreateManyRel_statusInput | UserCreateManyRel_statusInput[]
    skipDuplicates?: boolean
  }

  export type CourierCreateWithoutRel_statusInput = {
    id: string
    username: string
    password: string
    name: string
    email: string
    phone?: string | null
    number_plate: string
    color: string
    is_active?: boolean
    created_at?: Date | string
    update_at?: Date | string | null
    rel_brand: BrandCreateNestedOneWithoutRel_courierInput
  }

  export type CourierUncheckedCreateWithoutRel_statusInput = {
    id: string
    username: string
    password: string
    name: string
    email: string
    phone?: string | null
    number_plate: string
    id_brand: number
    color: string
    is_active?: boolean
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type CourierCreateOrConnectWithoutRel_statusInput = {
    where: CourierWhereUniqueInput
    create: XOR<CourierCreateWithoutRel_statusInput, CourierUncheckedCreateWithoutRel_statusInput>
  }

  export type CourierCreateManyRel_statusInputEnvelope = {
    data: CourierCreateManyRel_statusInput | CourierCreateManyRel_statusInput[]
    skipDuplicates?: boolean
  }

  export type MerchantCreateWithoutRel_statusInput = {
    id: string
    username: string
    password: string
    name: string
    address: string
    email: string
    phone?: string | null
    is_open?: boolean
    created_at?: Date | string
    update_at?: Date | string | null
    rel_menu?: MenuCreateNestedManyWithoutRel_merchantInput
    rel_subd: SubdistrictCreateNestedOneWithoutRel_merchantInput
    rel_city: CityCreateNestedOneWithoutRel_merchantInput
    rel_prov: ProvinceCreateNestedOneWithoutRel_merchantInput
  }

  export type MerchantUncheckedCreateWithoutRel_statusInput = {
    id: string
    username: string
    password: string
    name: string
    address: string
    id_subd: number
    id_city: number
    id_prov: number
    email: string
    phone?: string | null
    is_open?: boolean
    created_at?: Date | string
    update_at?: Date | string | null
    rel_menu?: MenuUncheckedCreateNestedManyWithoutRel_merchantInput
  }

  export type MerchantCreateOrConnectWithoutRel_statusInput = {
    where: MerchantWhereUniqueInput
    create: XOR<MerchantCreateWithoutRel_statusInput, MerchantUncheckedCreateWithoutRel_statusInput>
  }

  export type MerchantCreateManyRel_statusInputEnvelope = {
    data: MerchantCreateManyRel_statusInput | MerchantCreateManyRel_statusInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutRel_statusInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutRel_statusInput, UserUncheckedUpdateWithoutRel_statusInput>
    create: XOR<UserCreateWithoutRel_statusInput, UserUncheckedCreateWithoutRel_statusInput>
  }

  export type UserUpdateWithWhereUniqueWithoutRel_statusInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutRel_statusInput, UserUncheckedUpdateWithoutRel_statusInput>
  }

  export type UserUpdateManyWithWhereWithoutRel_statusInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutRel_statusInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    phone?: StringNullableFilter<"User"> | string | null
    poin?: IntFilter<"User"> | number
    id_status?: IntFilter<"User"> | number
    created_at?: DateTimeFilter<"User"> | Date | string
    update_at?: DateTimeNullableFilter<"User"> | Date | string | null
  }

  export type CourierUpsertWithWhereUniqueWithoutRel_statusInput = {
    where: CourierWhereUniqueInput
    update: XOR<CourierUpdateWithoutRel_statusInput, CourierUncheckedUpdateWithoutRel_statusInput>
    create: XOR<CourierCreateWithoutRel_statusInput, CourierUncheckedCreateWithoutRel_statusInput>
  }

  export type CourierUpdateWithWhereUniqueWithoutRel_statusInput = {
    where: CourierWhereUniqueInput
    data: XOR<CourierUpdateWithoutRel_statusInput, CourierUncheckedUpdateWithoutRel_statusInput>
  }

  export type CourierUpdateManyWithWhereWithoutRel_statusInput = {
    where: CourierScalarWhereInput
    data: XOR<CourierUpdateManyMutationInput, CourierUncheckedUpdateManyWithoutRel_statusInput>
  }

  export type CourierScalarWhereInput = {
    AND?: CourierScalarWhereInput | CourierScalarWhereInput[]
    OR?: CourierScalarWhereInput[]
    NOT?: CourierScalarWhereInput | CourierScalarWhereInput[]
    id?: StringFilter<"Courier"> | string
    username?: StringFilter<"Courier"> | string
    password?: StringFilter<"Courier"> | string
    name?: StringFilter<"Courier"> | string
    email?: StringFilter<"Courier"> | string
    phone?: StringNullableFilter<"Courier"> | string | null
    number_plate?: StringFilter<"Courier"> | string
    id_brand?: IntFilter<"Courier"> | number
    color?: StringFilter<"Courier"> | string
    is_active?: BoolFilter<"Courier"> | boolean
    id_status?: IntFilter<"Courier"> | number
    created_at?: DateTimeFilter<"Courier"> | Date | string
    update_at?: DateTimeNullableFilter<"Courier"> | Date | string | null
  }

  export type MerchantUpsertWithWhereUniqueWithoutRel_statusInput = {
    where: MerchantWhereUniqueInput
    update: XOR<MerchantUpdateWithoutRel_statusInput, MerchantUncheckedUpdateWithoutRel_statusInput>
    create: XOR<MerchantCreateWithoutRel_statusInput, MerchantUncheckedCreateWithoutRel_statusInput>
  }

  export type MerchantUpdateWithWhereUniqueWithoutRel_statusInput = {
    where: MerchantWhereUniqueInput
    data: XOR<MerchantUpdateWithoutRel_statusInput, MerchantUncheckedUpdateWithoutRel_statusInput>
  }

  export type MerchantUpdateManyWithWhereWithoutRel_statusInput = {
    where: MerchantScalarWhereInput
    data: XOR<MerchantUpdateManyMutationInput, MerchantUncheckedUpdateManyWithoutRel_statusInput>
  }

  export type MerchantScalarWhereInput = {
    AND?: MerchantScalarWhereInput | MerchantScalarWhereInput[]
    OR?: MerchantScalarWhereInput[]
    NOT?: MerchantScalarWhereInput | MerchantScalarWhereInput[]
    id?: StringFilter<"Merchant"> | string
    username?: StringFilter<"Merchant"> | string
    password?: StringFilter<"Merchant"> | string
    name?: StringFilter<"Merchant"> | string
    address?: StringFilter<"Merchant"> | string
    id_subd?: IntFilter<"Merchant"> | number
    id_city?: IntFilter<"Merchant"> | number
    id_prov?: IntFilter<"Merchant"> | number
    email?: StringFilter<"Merchant"> | string
    phone?: StringNullableFilter<"Merchant"> | string | null
    is_open?: BoolFilter<"Merchant"> | boolean
    id_status?: IntFilter<"Merchant"> | number
    created_at?: DateTimeFilter<"Merchant"> | Date | string
    update_at?: DateTimeNullableFilter<"Merchant"> | Date | string | null
  }

  export type Log_orderCreateWithoutRel_statusInput = {
    id_order: string
    detail_status: string
    change_by: string
    id_changer: string
    time?: Date | string
  }

  export type Log_orderUncheckedCreateWithoutRel_statusInput = {
    id?: number
    id_order: string
    detail_status: string
    change_by: string
    id_changer: string
    time?: Date | string
  }

  export type Log_orderCreateOrConnectWithoutRel_statusInput = {
    where: Log_orderWhereUniqueInput
    create: XOR<Log_orderCreateWithoutRel_statusInput, Log_orderUncheckedCreateWithoutRel_statusInput>
  }

  export type Log_orderCreateManyRel_statusInputEnvelope = {
    data: Log_orderCreateManyRel_statusInput | Log_orderCreateManyRel_statusInput[]
    skipDuplicates?: boolean
  }

  export type Log_orderUpsertWithWhereUniqueWithoutRel_statusInput = {
    where: Log_orderWhereUniqueInput
    update: XOR<Log_orderUpdateWithoutRel_statusInput, Log_orderUncheckedUpdateWithoutRel_statusInput>
    create: XOR<Log_orderCreateWithoutRel_statusInput, Log_orderUncheckedCreateWithoutRel_statusInput>
  }

  export type Log_orderUpdateWithWhereUniqueWithoutRel_statusInput = {
    where: Log_orderWhereUniqueInput
    data: XOR<Log_orderUpdateWithoutRel_statusInput, Log_orderUncheckedUpdateWithoutRel_statusInput>
  }

  export type Log_orderUpdateManyWithWhereWithoutRel_statusInput = {
    where: Log_orderScalarWhereInput
    data: XOR<Log_orderUpdateManyMutationInput, Log_orderUncheckedUpdateManyWithoutRel_statusInput>
  }

  export type Log_orderScalarWhereInput = {
    AND?: Log_orderScalarWhereInput | Log_orderScalarWhereInput[]
    OR?: Log_orderScalarWhereInput[]
    NOT?: Log_orderScalarWhereInput | Log_orderScalarWhereInput[]
    id?: IntFilter<"Log_order"> | number
    id_order?: StringFilter<"Log_order"> | string
    id_status?: IntFilter<"Log_order"> | number
    detail_status?: StringFilter<"Log_order"> | string
    change_by?: StringFilter<"Log_order"> | string
    id_changer?: StringFilter<"Log_order"> | string
    time?: DateTimeFilter<"Log_order"> | Date | string
  }

  export type CourierCreateWithoutRel_brandInput = {
    id: string
    username: string
    password: string
    name: string
    email: string
    phone?: string | null
    number_plate: string
    color: string
    is_active?: boolean
    created_at?: Date | string
    update_at?: Date | string | null
    rel_status: StatusCreateNestedOneWithoutRel_courierInput
  }

  export type CourierUncheckedCreateWithoutRel_brandInput = {
    id: string
    username: string
    password: string
    name: string
    email: string
    phone?: string | null
    number_plate: string
    color: string
    is_active?: boolean
    id_status: number
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type CourierCreateOrConnectWithoutRel_brandInput = {
    where: CourierWhereUniqueInput
    create: XOR<CourierCreateWithoutRel_brandInput, CourierUncheckedCreateWithoutRel_brandInput>
  }

  export type CourierCreateManyRel_brandInputEnvelope = {
    data: CourierCreateManyRel_brandInput | CourierCreateManyRel_brandInput[]
    skipDuplicates?: boolean
  }

  export type CourierUpsertWithWhereUniqueWithoutRel_brandInput = {
    where: CourierWhereUniqueInput
    update: XOR<CourierUpdateWithoutRel_brandInput, CourierUncheckedUpdateWithoutRel_brandInput>
    create: XOR<CourierCreateWithoutRel_brandInput, CourierUncheckedCreateWithoutRel_brandInput>
  }

  export type CourierUpdateWithWhereUniqueWithoutRel_brandInput = {
    where: CourierWhereUniqueInput
    data: XOR<CourierUpdateWithoutRel_brandInput, CourierUncheckedUpdateWithoutRel_brandInput>
  }

  export type CourierUpdateManyWithWhereWithoutRel_brandInput = {
    where: CourierScalarWhereInput
    data: XOR<CourierUpdateManyMutationInput, CourierUncheckedUpdateManyWithoutRel_brandInput>
  }

  export type MerchantCreateWithoutRel_subdInput = {
    id: string
    username: string
    password: string
    name: string
    address: string
    email: string
    phone?: string | null
    is_open?: boolean
    created_at?: Date | string
    update_at?: Date | string | null
    rel_menu?: MenuCreateNestedManyWithoutRel_merchantInput
    rel_city: CityCreateNestedOneWithoutRel_merchantInput
    rel_prov: ProvinceCreateNestedOneWithoutRel_merchantInput
    rel_status: StatusCreateNestedOneWithoutRel_merchantInput
  }

  export type MerchantUncheckedCreateWithoutRel_subdInput = {
    id: string
    username: string
    password: string
    name: string
    address: string
    id_city: number
    id_prov: number
    email: string
    phone?: string | null
    is_open?: boolean
    id_status: number
    created_at?: Date | string
    update_at?: Date | string | null
    rel_menu?: MenuUncheckedCreateNestedManyWithoutRel_merchantInput
  }

  export type MerchantCreateOrConnectWithoutRel_subdInput = {
    where: MerchantWhereUniqueInput
    create: XOR<MerchantCreateWithoutRel_subdInput, MerchantUncheckedCreateWithoutRel_subdInput>
  }

  export type MerchantCreateManyRel_subdInputEnvelope = {
    data: MerchantCreateManyRel_subdInput | MerchantCreateManyRel_subdInput[]
    skipDuplicates?: boolean
  }

  export type MerchantUpsertWithWhereUniqueWithoutRel_subdInput = {
    where: MerchantWhereUniqueInput
    update: XOR<MerchantUpdateWithoutRel_subdInput, MerchantUncheckedUpdateWithoutRel_subdInput>
    create: XOR<MerchantCreateWithoutRel_subdInput, MerchantUncheckedCreateWithoutRel_subdInput>
  }

  export type MerchantUpdateWithWhereUniqueWithoutRel_subdInput = {
    where: MerchantWhereUniqueInput
    data: XOR<MerchantUpdateWithoutRel_subdInput, MerchantUncheckedUpdateWithoutRel_subdInput>
  }

  export type MerchantUpdateManyWithWhereWithoutRel_subdInput = {
    where: MerchantScalarWhereInput
    data: XOR<MerchantUpdateManyMutationInput, MerchantUncheckedUpdateManyWithoutRel_subdInput>
  }

  export type MerchantCreateWithoutRel_cityInput = {
    id: string
    username: string
    password: string
    name: string
    address: string
    email: string
    phone?: string | null
    is_open?: boolean
    created_at?: Date | string
    update_at?: Date | string | null
    rel_menu?: MenuCreateNestedManyWithoutRel_merchantInput
    rel_subd: SubdistrictCreateNestedOneWithoutRel_merchantInput
    rel_prov: ProvinceCreateNestedOneWithoutRel_merchantInput
    rel_status: StatusCreateNestedOneWithoutRel_merchantInput
  }

  export type MerchantUncheckedCreateWithoutRel_cityInput = {
    id: string
    username: string
    password: string
    name: string
    address: string
    id_subd: number
    id_prov: number
    email: string
    phone?: string | null
    is_open?: boolean
    id_status: number
    created_at?: Date | string
    update_at?: Date | string | null
    rel_menu?: MenuUncheckedCreateNestedManyWithoutRel_merchantInput
  }

  export type MerchantCreateOrConnectWithoutRel_cityInput = {
    where: MerchantWhereUniqueInput
    create: XOR<MerchantCreateWithoutRel_cityInput, MerchantUncheckedCreateWithoutRel_cityInput>
  }

  export type MerchantCreateManyRel_cityInputEnvelope = {
    data: MerchantCreateManyRel_cityInput | MerchantCreateManyRel_cityInput[]
    skipDuplicates?: boolean
  }

  export type MerchantUpsertWithWhereUniqueWithoutRel_cityInput = {
    where: MerchantWhereUniqueInput
    update: XOR<MerchantUpdateWithoutRel_cityInput, MerchantUncheckedUpdateWithoutRel_cityInput>
    create: XOR<MerchantCreateWithoutRel_cityInput, MerchantUncheckedCreateWithoutRel_cityInput>
  }

  export type MerchantUpdateWithWhereUniqueWithoutRel_cityInput = {
    where: MerchantWhereUniqueInput
    data: XOR<MerchantUpdateWithoutRel_cityInput, MerchantUncheckedUpdateWithoutRel_cityInput>
  }

  export type MerchantUpdateManyWithWhereWithoutRel_cityInput = {
    where: MerchantScalarWhereInput
    data: XOR<MerchantUpdateManyMutationInput, MerchantUncheckedUpdateManyWithoutRel_cityInput>
  }

  export type MerchantCreateWithoutRel_provInput = {
    id: string
    username: string
    password: string
    name: string
    address: string
    email: string
    phone?: string | null
    is_open?: boolean
    created_at?: Date | string
    update_at?: Date | string | null
    rel_menu?: MenuCreateNestedManyWithoutRel_merchantInput
    rel_subd: SubdistrictCreateNestedOneWithoutRel_merchantInput
    rel_city: CityCreateNestedOneWithoutRel_merchantInput
    rel_status: StatusCreateNestedOneWithoutRel_merchantInput
  }

  export type MerchantUncheckedCreateWithoutRel_provInput = {
    id: string
    username: string
    password: string
    name: string
    address: string
    id_subd: number
    id_city: number
    email: string
    phone?: string | null
    is_open?: boolean
    id_status: number
    created_at?: Date | string
    update_at?: Date | string | null
    rel_menu?: MenuUncheckedCreateNestedManyWithoutRel_merchantInput
  }

  export type MerchantCreateOrConnectWithoutRel_provInput = {
    where: MerchantWhereUniqueInput
    create: XOR<MerchantCreateWithoutRel_provInput, MerchantUncheckedCreateWithoutRel_provInput>
  }

  export type MerchantCreateManyRel_provInputEnvelope = {
    data: MerchantCreateManyRel_provInput | MerchantCreateManyRel_provInput[]
    skipDuplicates?: boolean
  }

  export type MerchantUpsertWithWhereUniqueWithoutRel_provInput = {
    where: MerchantWhereUniqueInput
    update: XOR<MerchantUpdateWithoutRel_provInput, MerchantUncheckedUpdateWithoutRel_provInput>
    create: XOR<MerchantCreateWithoutRel_provInput, MerchantUncheckedCreateWithoutRel_provInput>
  }

  export type MerchantUpdateWithWhereUniqueWithoutRel_provInput = {
    where: MerchantWhereUniqueInput
    data: XOR<MerchantUpdateWithoutRel_provInput, MerchantUncheckedUpdateWithoutRel_provInput>
  }

  export type MerchantUpdateManyWithWhereWithoutRel_provInput = {
    where: MerchantScalarWhereInput
    data: XOR<MerchantUpdateManyMutationInput, MerchantUncheckedUpdateManyWithoutRel_provInput>
  }

  export type MenuCreateWithoutRel_categoryInput = {
    id: string
    name: string
    detail?: string | null
    price: Decimal | DecimalJsLike | number | string
    is_ready?: boolean
    created_at?: Date | string
    update_at?: Date | string | null
    rel_variant?: VariantCreateNestedManyWithoutRel_menuInput
    rel_merchant: MerchantCreateNestedOneWithoutRel_menuInput
  }

  export type MenuUncheckedCreateWithoutRel_categoryInput = {
    id: string
    name: string
    detail?: string | null
    id_merchant: string
    price: Decimal | DecimalJsLike | number | string
    is_ready?: boolean
    created_at?: Date | string
    update_at?: Date | string | null
    rel_variant?: VariantUncheckedCreateNestedManyWithoutRel_menuInput
  }

  export type MenuCreateOrConnectWithoutRel_categoryInput = {
    where: MenuWhereUniqueInput
    create: XOR<MenuCreateWithoutRel_categoryInput, MenuUncheckedCreateWithoutRel_categoryInput>
  }

  export type MenuCreateManyRel_categoryInputEnvelope = {
    data: MenuCreateManyRel_categoryInput | MenuCreateManyRel_categoryInput[]
    skipDuplicates?: boolean
  }

  export type MenuUpsertWithWhereUniqueWithoutRel_categoryInput = {
    where: MenuWhereUniqueInput
    update: XOR<MenuUpdateWithoutRel_categoryInput, MenuUncheckedUpdateWithoutRel_categoryInput>
    create: XOR<MenuCreateWithoutRel_categoryInput, MenuUncheckedCreateWithoutRel_categoryInput>
  }

  export type MenuUpdateWithWhereUniqueWithoutRel_categoryInput = {
    where: MenuWhereUniqueInput
    data: XOR<MenuUpdateWithoutRel_categoryInput, MenuUncheckedUpdateWithoutRel_categoryInput>
  }

  export type MenuUpdateManyWithWhereWithoutRel_categoryInput = {
    where: MenuScalarWhereInput
    data: XOR<MenuUpdateManyMutationInput, MenuUncheckedUpdateManyWithoutRel_categoryInput>
  }

  export type MenuScalarWhereInput = {
    AND?: MenuScalarWhereInput | MenuScalarWhereInput[]
    OR?: MenuScalarWhereInput[]
    NOT?: MenuScalarWhereInput | MenuScalarWhereInput[]
    id?: StringFilter<"Menu"> | string
    name?: StringFilter<"Menu"> | string
    detail?: StringNullableFilter<"Menu"> | string | null
    id_merchant?: StringFilter<"Menu"> | string
    id_category?: IntFilter<"Menu"> | number
    price?: DecimalFilter<"Menu"> | Decimal | DecimalJsLike | number | string
    is_ready?: BoolFilter<"Menu"> | boolean
    created_at?: DateTimeFilter<"Menu"> | Date | string
    update_at?: DateTimeNullableFilter<"Menu"> | Date | string | null
  }

  export type StatusCreateWithoutRel_userInput = {
    name: string
    created_at?: Date | string
    update_at?: Date | string | null
    rel_courier?: CourierCreateNestedManyWithoutRel_statusInput
    rel_merchant?: MerchantCreateNestedManyWithoutRel_statusInput
  }

  export type StatusUncheckedCreateWithoutRel_userInput = {
    id?: number
    name: string
    created_at?: Date | string
    update_at?: Date | string | null
    rel_courier?: CourierUncheckedCreateNestedManyWithoutRel_statusInput
    rel_merchant?: MerchantUncheckedCreateNestedManyWithoutRel_statusInput
  }

  export type StatusCreateOrConnectWithoutRel_userInput = {
    where: StatusWhereUniqueInput
    create: XOR<StatusCreateWithoutRel_userInput, StatusUncheckedCreateWithoutRel_userInput>
  }

  export type StatusUpsertWithoutRel_userInput = {
    update: XOR<StatusUpdateWithoutRel_userInput, StatusUncheckedUpdateWithoutRel_userInput>
    create: XOR<StatusCreateWithoutRel_userInput, StatusUncheckedCreateWithoutRel_userInput>
    where?: StatusWhereInput
  }

  export type StatusUpdateToOneWithWhereWithoutRel_userInput = {
    where?: StatusWhereInput
    data: XOR<StatusUpdateWithoutRel_userInput, StatusUncheckedUpdateWithoutRel_userInput>
  }

  export type StatusUpdateWithoutRel_userInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_courier?: CourierUpdateManyWithoutRel_statusNestedInput
    rel_merchant?: MerchantUpdateManyWithoutRel_statusNestedInput
  }

  export type StatusUncheckedUpdateWithoutRel_userInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_courier?: CourierUncheckedUpdateManyWithoutRel_statusNestedInput
    rel_merchant?: MerchantUncheckedUpdateManyWithoutRel_statusNestedInput
  }

  export type BrandCreateWithoutRel_courierInput = {
    name: string
    brand: string
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type BrandUncheckedCreateWithoutRel_courierInput = {
    id?: number
    name: string
    brand: string
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type BrandCreateOrConnectWithoutRel_courierInput = {
    where: BrandWhereUniqueInput
    create: XOR<BrandCreateWithoutRel_courierInput, BrandUncheckedCreateWithoutRel_courierInput>
  }

  export type StatusCreateWithoutRel_courierInput = {
    name: string
    created_at?: Date | string
    update_at?: Date | string | null
    rel_user?: UserCreateNestedManyWithoutRel_statusInput
    rel_merchant?: MerchantCreateNestedManyWithoutRel_statusInput
  }

  export type StatusUncheckedCreateWithoutRel_courierInput = {
    id?: number
    name: string
    created_at?: Date | string
    update_at?: Date | string | null
    rel_user?: UserUncheckedCreateNestedManyWithoutRel_statusInput
    rel_merchant?: MerchantUncheckedCreateNestedManyWithoutRel_statusInput
  }

  export type StatusCreateOrConnectWithoutRel_courierInput = {
    where: StatusWhereUniqueInput
    create: XOR<StatusCreateWithoutRel_courierInput, StatusUncheckedCreateWithoutRel_courierInput>
  }

  export type BrandUpsertWithoutRel_courierInput = {
    update: XOR<BrandUpdateWithoutRel_courierInput, BrandUncheckedUpdateWithoutRel_courierInput>
    create: XOR<BrandCreateWithoutRel_courierInput, BrandUncheckedCreateWithoutRel_courierInput>
    where?: BrandWhereInput
  }

  export type BrandUpdateToOneWithWhereWithoutRel_courierInput = {
    where?: BrandWhereInput
    data: XOR<BrandUpdateWithoutRel_courierInput, BrandUncheckedUpdateWithoutRel_courierInput>
  }

  export type BrandUpdateWithoutRel_courierInput = {
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BrandUncheckedUpdateWithoutRel_courierInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StatusUpsertWithoutRel_courierInput = {
    update: XOR<StatusUpdateWithoutRel_courierInput, StatusUncheckedUpdateWithoutRel_courierInput>
    create: XOR<StatusCreateWithoutRel_courierInput, StatusUncheckedCreateWithoutRel_courierInput>
    where?: StatusWhereInput
  }

  export type StatusUpdateToOneWithWhereWithoutRel_courierInput = {
    where?: StatusWhereInput
    data: XOR<StatusUpdateWithoutRel_courierInput, StatusUncheckedUpdateWithoutRel_courierInput>
  }

  export type StatusUpdateWithoutRel_courierInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_user?: UserUpdateManyWithoutRel_statusNestedInput
    rel_merchant?: MerchantUpdateManyWithoutRel_statusNestedInput
  }

  export type StatusUncheckedUpdateWithoutRel_courierInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_user?: UserUncheckedUpdateManyWithoutRel_statusNestedInput
    rel_merchant?: MerchantUncheckedUpdateManyWithoutRel_statusNestedInput
  }

  export type MenuCreateWithoutRel_merchantInput = {
    id: string
    name: string
    detail?: string | null
    price: Decimal | DecimalJsLike | number | string
    is_ready?: boolean
    created_at?: Date | string
    update_at?: Date | string | null
    rel_variant?: VariantCreateNestedManyWithoutRel_menuInput
    rel_category: CategoryCreateNestedOneWithoutRel_menuInput
  }

  export type MenuUncheckedCreateWithoutRel_merchantInput = {
    id: string
    name: string
    detail?: string | null
    id_category: number
    price: Decimal | DecimalJsLike | number | string
    is_ready?: boolean
    created_at?: Date | string
    update_at?: Date | string | null
    rel_variant?: VariantUncheckedCreateNestedManyWithoutRel_menuInput
  }

  export type MenuCreateOrConnectWithoutRel_merchantInput = {
    where: MenuWhereUniqueInput
    create: XOR<MenuCreateWithoutRel_merchantInput, MenuUncheckedCreateWithoutRel_merchantInput>
  }

  export type MenuCreateManyRel_merchantInputEnvelope = {
    data: MenuCreateManyRel_merchantInput | MenuCreateManyRel_merchantInput[]
    skipDuplicates?: boolean
  }

  export type SubdistrictCreateWithoutRel_merchantInput = {
    name: string
    id_city: number
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type SubdistrictUncheckedCreateWithoutRel_merchantInput = {
    id?: number
    name: string
    id_city: number
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type SubdistrictCreateOrConnectWithoutRel_merchantInput = {
    where: SubdistrictWhereUniqueInput
    create: XOR<SubdistrictCreateWithoutRel_merchantInput, SubdistrictUncheckedCreateWithoutRel_merchantInput>
  }

  export type CityCreateWithoutRel_merchantInput = {
    name: string
    id_prov: number
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type CityUncheckedCreateWithoutRel_merchantInput = {
    id?: number
    name: string
    id_prov: number
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type CityCreateOrConnectWithoutRel_merchantInput = {
    where: CityWhereUniqueInput
    create: XOR<CityCreateWithoutRel_merchantInput, CityUncheckedCreateWithoutRel_merchantInput>
  }

  export type ProvinceCreateWithoutRel_merchantInput = {
    name: string
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type ProvinceUncheckedCreateWithoutRel_merchantInput = {
    id?: number
    name: string
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type ProvinceCreateOrConnectWithoutRel_merchantInput = {
    where: ProvinceWhereUniqueInput
    create: XOR<ProvinceCreateWithoutRel_merchantInput, ProvinceUncheckedCreateWithoutRel_merchantInput>
  }

  export type StatusCreateWithoutRel_merchantInput = {
    name: string
    created_at?: Date | string
    update_at?: Date | string | null
    rel_user?: UserCreateNestedManyWithoutRel_statusInput
    rel_courier?: CourierCreateNestedManyWithoutRel_statusInput
  }

  export type StatusUncheckedCreateWithoutRel_merchantInput = {
    id?: number
    name: string
    created_at?: Date | string
    update_at?: Date | string | null
    rel_user?: UserUncheckedCreateNestedManyWithoutRel_statusInput
    rel_courier?: CourierUncheckedCreateNestedManyWithoutRel_statusInput
  }

  export type StatusCreateOrConnectWithoutRel_merchantInput = {
    where: StatusWhereUniqueInput
    create: XOR<StatusCreateWithoutRel_merchantInput, StatusUncheckedCreateWithoutRel_merchantInput>
  }

  export type MenuUpsertWithWhereUniqueWithoutRel_merchantInput = {
    where: MenuWhereUniqueInput
    update: XOR<MenuUpdateWithoutRel_merchantInput, MenuUncheckedUpdateWithoutRel_merchantInput>
    create: XOR<MenuCreateWithoutRel_merchantInput, MenuUncheckedCreateWithoutRel_merchantInput>
  }

  export type MenuUpdateWithWhereUniqueWithoutRel_merchantInput = {
    where: MenuWhereUniqueInput
    data: XOR<MenuUpdateWithoutRel_merchantInput, MenuUncheckedUpdateWithoutRel_merchantInput>
  }

  export type MenuUpdateManyWithWhereWithoutRel_merchantInput = {
    where: MenuScalarWhereInput
    data: XOR<MenuUpdateManyMutationInput, MenuUncheckedUpdateManyWithoutRel_merchantInput>
  }

  export type SubdistrictUpsertWithoutRel_merchantInput = {
    update: XOR<SubdistrictUpdateWithoutRel_merchantInput, SubdistrictUncheckedUpdateWithoutRel_merchantInput>
    create: XOR<SubdistrictCreateWithoutRel_merchantInput, SubdistrictUncheckedCreateWithoutRel_merchantInput>
    where?: SubdistrictWhereInput
  }

  export type SubdistrictUpdateToOneWithWhereWithoutRel_merchantInput = {
    where?: SubdistrictWhereInput
    data: XOR<SubdistrictUpdateWithoutRel_merchantInput, SubdistrictUncheckedUpdateWithoutRel_merchantInput>
  }

  export type SubdistrictUpdateWithoutRel_merchantInput = {
    name?: StringFieldUpdateOperationsInput | string
    id_city?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SubdistrictUncheckedUpdateWithoutRel_merchantInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    id_city?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CityUpsertWithoutRel_merchantInput = {
    update: XOR<CityUpdateWithoutRel_merchantInput, CityUncheckedUpdateWithoutRel_merchantInput>
    create: XOR<CityCreateWithoutRel_merchantInput, CityUncheckedCreateWithoutRel_merchantInput>
    where?: CityWhereInput
  }

  export type CityUpdateToOneWithWhereWithoutRel_merchantInput = {
    where?: CityWhereInput
    data: XOR<CityUpdateWithoutRel_merchantInput, CityUncheckedUpdateWithoutRel_merchantInput>
  }

  export type CityUpdateWithoutRel_merchantInput = {
    name?: StringFieldUpdateOperationsInput | string
    id_prov?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CityUncheckedUpdateWithoutRel_merchantInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    id_prov?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProvinceUpsertWithoutRel_merchantInput = {
    update: XOR<ProvinceUpdateWithoutRel_merchantInput, ProvinceUncheckedUpdateWithoutRel_merchantInput>
    create: XOR<ProvinceCreateWithoutRel_merchantInput, ProvinceUncheckedCreateWithoutRel_merchantInput>
    where?: ProvinceWhereInput
  }

  export type ProvinceUpdateToOneWithWhereWithoutRel_merchantInput = {
    where?: ProvinceWhereInput
    data: XOR<ProvinceUpdateWithoutRel_merchantInput, ProvinceUncheckedUpdateWithoutRel_merchantInput>
  }

  export type ProvinceUpdateWithoutRel_merchantInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProvinceUncheckedUpdateWithoutRel_merchantInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StatusUpsertWithoutRel_merchantInput = {
    update: XOR<StatusUpdateWithoutRel_merchantInput, StatusUncheckedUpdateWithoutRel_merchantInput>
    create: XOR<StatusCreateWithoutRel_merchantInput, StatusUncheckedCreateWithoutRel_merchantInput>
    where?: StatusWhereInput
  }

  export type StatusUpdateToOneWithWhereWithoutRel_merchantInput = {
    where?: StatusWhereInput
    data: XOR<StatusUpdateWithoutRel_merchantInput, StatusUncheckedUpdateWithoutRel_merchantInput>
  }

  export type StatusUpdateWithoutRel_merchantInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_user?: UserUpdateManyWithoutRel_statusNestedInput
    rel_courier?: CourierUpdateManyWithoutRel_statusNestedInput
  }

  export type StatusUncheckedUpdateWithoutRel_merchantInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_user?: UserUncheckedUpdateManyWithoutRel_statusNestedInput
    rel_courier?: CourierUncheckedUpdateManyWithoutRel_statusNestedInput
  }

  export type VariantCreateWithoutRel_menuInput = {
    id: string
    name: string
    created_at?: Date | string
    update_at?: Date | string | null
    rel_variant_item?: Variant_itemCreateNestedManyWithoutRel_variantInput
  }

  export type VariantUncheckedCreateWithoutRel_menuInput = {
    id: string
    name: string
    created_at?: Date | string
    update_at?: Date | string | null
    rel_variant_item?: Variant_itemUncheckedCreateNestedManyWithoutRel_variantInput
  }

  export type VariantCreateOrConnectWithoutRel_menuInput = {
    where: VariantWhereUniqueInput
    create: XOR<VariantCreateWithoutRel_menuInput, VariantUncheckedCreateWithoutRel_menuInput>
  }

  export type VariantCreateManyRel_menuInputEnvelope = {
    data: VariantCreateManyRel_menuInput | VariantCreateManyRel_menuInput[]
    skipDuplicates?: boolean
  }

  export type MerchantCreateWithoutRel_menuInput = {
    id: string
    username: string
    password: string
    name: string
    address: string
    email: string
    phone?: string | null
    is_open?: boolean
    created_at?: Date | string
    update_at?: Date | string | null
    rel_subd: SubdistrictCreateNestedOneWithoutRel_merchantInput
    rel_city: CityCreateNestedOneWithoutRel_merchantInput
    rel_prov: ProvinceCreateNestedOneWithoutRel_merchantInput
    rel_status: StatusCreateNestedOneWithoutRel_merchantInput
  }

  export type MerchantUncheckedCreateWithoutRel_menuInput = {
    id: string
    username: string
    password: string
    name: string
    address: string
    id_subd: number
    id_city: number
    id_prov: number
    email: string
    phone?: string | null
    is_open?: boolean
    id_status: number
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type MerchantCreateOrConnectWithoutRel_menuInput = {
    where: MerchantWhereUniqueInput
    create: XOR<MerchantCreateWithoutRel_menuInput, MerchantUncheckedCreateWithoutRel_menuInput>
  }

  export type CategoryCreateWithoutRel_menuInput = {
    name: string
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type CategoryUncheckedCreateWithoutRel_menuInput = {
    id?: number
    name: string
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type CategoryCreateOrConnectWithoutRel_menuInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutRel_menuInput, CategoryUncheckedCreateWithoutRel_menuInput>
  }

  export type VariantUpsertWithWhereUniqueWithoutRel_menuInput = {
    where: VariantWhereUniqueInput
    update: XOR<VariantUpdateWithoutRel_menuInput, VariantUncheckedUpdateWithoutRel_menuInput>
    create: XOR<VariantCreateWithoutRel_menuInput, VariantUncheckedCreateWithoutRel_menuInput>
  }

  export type VariantUpdateWithWhereUniqueWithoutRel_menuInput = {
    where: VariantWhereUniqueInput
    data: XOR<VariantUpdateWithoutRel_menuInput, VariantUncheckedUpdateWithoutRel_menuInput>
  }

  export type VariantUpdateManyWithWhereWithoutRel_menuInput = {
    where: VariantScalarWhereInput
    data: XOR<VariantUpdateManyMutationInput, VariantUncheckedUpdateManyWithoutRel_menuInput>
  }

  export type VariantScalarWhereInput = {
    AND?: VariantScalarWhereInput | VariantScalarWhereInput[]
    OR?: VariantScalarWhereInput[]
    NOT?: VariantScalarWhereInput | VariantScalarWhereInput[]
    id?: StringFilter<"Variant"> | string
    name?: StringFilter<"Variant"> | string
    id_menu?: StringFilter<"Variant"> | string
    created_at?: DateTimeFilter<"Variant"> | Date | string
    update_at?: DateTimeNullableFilter<"Variant"> | Date | string | null
  }

  export type MerchantUpsertWithoutRel_menuInput = {
    update: XOR<MerchantUpdateWithoutRel_menuInput, MerchantUncheckedUpdateWithoutRel_menuInput>
    create: XOR<MerchantCreateWithoutRel_menuInput, MerchantUncheckedCreateWithoutRel_menuInput>
    where?: MerchantWhereInput
  }

  export type MerchantUpdateToOneWithWhereWithoutRel_menuInput = {
    where?: MerchantWhereInput
    data: XOR<MerchantUpdateWithoutRel_menuInput, MerchantUncheckedUpdateWithoutRel_menuInput>
  }

  export type MerchantUpdateWithoutRel_menuInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    is_open?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_subd?: SubdistrictUpdateOneRequiredWithoutRel_merchantNestedInput
    rel_city?: CityUpdateOneRequiredWithoutRel_merchantNestedInput
    rel_prov?: ProvinceUpdateOneRequiredWithoutRel_merchantNestedInput
    rel_status?: StatusUpdateOneRequiredWithoutRel_merchantNestedInput
  }

  export type MerchantUncheckedUpdateWithoutRel_menuInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    id_subd?: IntFieldUpdateOperationsInput | number
    id_city?: IntFieldUpdateOperationsInput | number
    id_prov?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    is_open?: BoolFieldUpdateOperationsInput | boolean
    id_status?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CategoryUpsertWithoutRel_menuInput = {
    update: XOR<CategoryUpdateWithoutRel_menuInput, CategoryUncheckedUpdateWithoutRel_menuInput>
    create: XOR<CategoryCreateWithoutRel_menuInput, CategoryUncheckedCreateWithoutRel_menuInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutRel_menuInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutRel_menuInput, CategoryUncheckedUpdateWithoutRel_menuInput>
  }

  export type CategoryUpdateWithoutRel_menuInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CategoryUncheckedUpdateWithoutRel_menuInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type Variant_itemCreateWithoutRel_variantInput = {
    id: string
    name: string
    price: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type Variant_itemUncheckedCreateWithoutRel_variantInput = {
    id: string
    name: string
    price: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type Variant_itemCreateOrConnectWithoutRel_variantInput = {
    where: Variant_itemWhereUniqueInput
    create: XOR<Variant_itemCreateWithoutRel_variantInput, Variant_itemUncheckedCreateWithoutRel_variantInput>
  }

  export type Variant_itemCreateManyRel_variantInputEnvelope = {
    data: Variant_itemCreateManyRel_variantInput | Variant_itemCreateManyRel_variantInput[]
    skipDuplicates?: boolean
  }

  export type MenuCreateWithoutRel_variantInput = {
    id: string
    name: string
    detail?: string | null
    price: Decimal | DecimalJsLike | number | string
    is_ready?: boolean
    created_at?: Date | string
    update_at?: Date | string | null
    rel_merchant: MerchantCreateNestedOneWithoutRel_menuInput
    rel_category: CategoryCreateNestedOneWithoutRel_menuInput
  }

  export type MenuUncheckedCreateWithoutRel_variantInput = {
    id: string
    name: string
    detail?: string | null
    id_merchant: string
    id_category: number
    price: Decimal | DecimalJsLike | number | string
    is_ready?: boolean
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type MenuCreateOrConnectWithoutRel_variantInput = {
    where: MenuWhereUniqueInput
    create: XOR<MenuCreateWithoutRel_variantInput, MenuUncheckedCreateWithoutRel_variantInput>
  }

  export type Variant_itemUpsertWithWhereUniqueWithoutRel_variantInput = {
    where: Variant_itemWhereUniqueInput
    update: XOR<Variant_itemUpdateWithoutRel_variantInput, Variant_itemUncheckedUpdateWithoutRel_variantInput>
    create: XOR<Variant_itemCreateWithoutRel_variantInput, Variant_itemUncheckedCreateWithoutRel_variantInput>
  }

  export type Variant_itemUpdateWithWhereUniqueWithoutRel_variantInput = {
    where: Variant_itemWhereUniqueInput
    data: XOR<Variant_itemUpdateWithoutRel_variantInput, Variant_itemUncheckedUpdateWithoutRel_variantInput>
  }

  export type Variant_itemUpdateManyWithWhereWithoutRel_variantInput = {
    where: Variant_itemScalarWhereInput
    data: XOR<Variant_itemUpdateManyMutationInput, Variant_itemUncheckedUpdateManyWithoutRel_variantInput>
  }

  export type Variant_itemScalarWhereInput = {
    AND?: Variant_itemScalarWhereInput | Variant_itemScalarWhereInput[]
    OR?: Variant_itemScalarWhereInput[]
    NOT?: Variant_itemScalarWhereInput | Variant_itemScalarWhereInput[]
    id?: StringFilter<"Variant_item"> | string
    name?: StringFilter<"Variant_item"> | string
    id_variant?: StringFilter<"Variant_item"> | string
    price?: DecimalFilter<"Variant_item"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFilter<"Variant_item"> | Date | string
    update_at?: DateTimeNullableFilter<"Variant_item"> | Date | string | null
  }

  export type MenuUpsertWithoutRel_variantInput = {
    update: XOR<MenuUpdateWithoutRel_variantInput, MenuUncheckedUpdateWithoutRel_variantInput>
    create: XOR<MenuCreateWithoutRel_variantInput, MenuUncheckedCreateWithoutRel_variantInput>
    where?: MenuWhereInput
  }

  export type MenuUpdateToOneWithWhereWithoutRel_variantInput = {
    where?: MenuWhereInput
    data: XOR<MenuUpdateWithoutRel_variantInput, MenuUncheckedUpdateWithoutRel_variantInput>
  }

  export type MenuUpdateWithoutRel_variantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_ready?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_merchant?: MerchantUpdateOneRequiredWithoutRel_menuNestedInput
    rel_category?: CategoryUpdateOneRequiredWithoutRel_menuNestedInput
  }

  export type MenuUncheckedUpdateWithoutRel_variantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    id_merchant?: StringFieldUpdateOperationsInput | string
    id_category?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_ready?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type VariantCreateWithoutRel_variant_itemInput = {
    id: string
    name: string
    created_at?: Date | string
    update_at?: Date | string | null
    rel_menu: MenuCreateNestedOneWithoutRel_variantInput
  }

  export type VariantUncheckedCreateWithoutRel_variant_itemInput = {
    id: string
    name: string
    id_menu: string
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type VariantCreateOrConnectWithoutRel_variant_itemInput = {
    where: VariantWhereUniqueInput
    create: XOR<VariantCreateWithoutRel_variant_itemInput, VariantUncheckedCreateWithoutRel_variant_itemInput>
  }

  export type VariantUpsertWithoutRel_variant_itemInput = {
    update: XOR<VariantUpdateWithoutRel_variant_itemInput, VariantUncheckedUpdateWithoutRel_variant_itemInput>
    create: XOR<VariantCreateWithoutRel_variant_itemInput, VariantUncheckedCreateWithoutRel_variant_itemInput>
    where?: VariantWhereInput
  }

  export type VariantUpdateToOneWithWhereWithoutRel_variant_itemInput = {
    where?: VariantWhereInput
    data: XOR<VariantUpdateWithoutRel_variant_itemInput, VariantUncheckedUpdateWithoutRel_variant_itemInput>
  }

  export type VariantUpdateWithoutRel_variant_itemInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_menu?: MenuUpdateOneRequiredWithoutRel_variantNestedInput
  }

  export type VariantUncheckedUpdateWithoutRel_variant_itemInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    id_menu?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type Order_itemCreateWithoutRel_orderInput = {
    id: string
    id_menu: string
    name_menu: string
    id_variant: string
    name_variant: string
    qty: number
    note: string
    price: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type Order_itemUncheckedCreateWithoutRel_orderInput = {
    id: string
    id_menu: string
    name_menu: string
    id_variant: string
    name_variant: string
    qty: number
    note: string
    price: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type Order_itemCreateOrConnectWithoutRel_orderInput = {
    where: Order_itemWhereUniqueInput
    create: XOR<Order_itemCreateWithoutRel_orderInput, Order_itemUncheckedCreateWithoutRel_orderInput>
  }

  export type Order_itemCreateManyRel_orderInputEnvelope = {
    data: Order_itemCreateManyRel_orderInput | Order_itemCreateManyRel_orderInput[]
    skipDuplicates?: boolean
  }

  export type Order_itemUpsertWithWhereUniqueWithoutRel_orderInput = {
    where: Order_itemWhereUniqueInput
    update: XOR<Order_itemUpdateWithoutRel_orderInput, Order_itemUncheckedUpdateWithoutRel_orderInput>
    create: XOR<Order_itemCreateWithoutRel_orderInput, Order_itemUncheckedCreateWithoutRel_orderInput>
  }

  export type Order_itemUpdateWithWhereUniqueWithoutRel_orderInput = {
    where: Order_itemWhereUniqueInput
    data: XOR<Order_itemUpdateWithoutRel_orderInput, Order_itemUncheckedUpdateWithoutRel_orderInput>
  }

  export type Order_itemUpdateManyWithWhereWithoutRel_orderInput = {
    where: Order_itemScalarWhereInput
    data: XOR<Order_itemUpdateManyMutationInput, Order_itemUncheckedUpdateManyWithoutRel_orderInput>
  }

  export type Order_itemScalarWhereInput = {
    AND?: Order_itemScalarWhereInput | Order_itemScalarWhereInput[]
    OR?: Order_itemScalarWhereInput[]
    NOT?: Order_itemScalarWhereInput | Order_itemScalarWhereInput[]
    id?: StringFilter<"Order_item"> | string
    id_menu?: StringFilter<"Order_item"> | string
    name_menu?: StringFilter<"Order_item"> | string
    id_variant?: StringFilter<"Order_item"> | string
    name_variant?: StringFilter<"Order_item"> | string
    qty?: IntFilter<"Order_item"> | number
    note?: StringFilter<"Order_item"> | string
    price?: DecimalFilter<"Order_item"> | Decimal | DecimalJsLike | number | string
    id_order?: StringFilter<"Order_item"> | string
    created_at?: DateTimeFilter<"Order_item"> | Date | string
    update_at?: DateTimeNullableFilter<"Order_item"> | Date | string | null
  }

  export type OrderCreateWithoutRel_order_itemInput = {
    id: string
    id_user: string
    name_user: string
    id_merchant: string
    name_merchant: string
    id_courier: string
    name_courier: string
    destination: string
    id_subd: number
    name_subd: string
    id_city: number
    name_city: string
    id_prov: number
    name_prov: string
    shipping_cost: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type OrderUncheckedCreateWithoutRel_order_itemInput = {
    id: string
    id_user: string
    name_user: string
    id_merchant: string
    name_merchant: string
    id_courier: string
    name_courier: string
    destination: string
    id_subd: number
    name_subd: string
    id_city: number
    name_city: string
    id_prov: number
    name_prov: string
    shipping_cost: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type OrderCreateOrConnectWithoutRel_order_itemInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutRel_order_itemInput, OrderUncheckedCreateWithoutRel_order_itemInput>
  }

  export type OrderUpsertWithoutRel_order_itemInput = {
    update: XOR<OrderUpdateWithoutRel_order_itemInput, OrderUncheckedUpdateWithoutRel_order_itemInput>
    create: XOR<OrderCreateWithoutRel_order_itemInput, OrderUncheckedCreateWithoutRel_order_itemInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutRel_order_itemInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutRel_order_itemInput, OrderUncheckedUpdateWithoutRel_order_itemInput>
  }

  export type OrderUpdateWithoutRel_order_itemInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_user?: StringFieldUpdateOperationsInput | string
    name_user?: StringFieldUpdateOperationsInput | string
    id_merchant?: StringFieldUpdateOperationsInput | string
    name_merchant?: StringFieldUpdateOperationsInput | string
    id_courier?: StringFieldUpdateOperationsInput | string
    name_courier?: StringFieldUpdateOperationsInput | string
    destination?: StringFieldUpdateOperationsInput | string
    id_subd?: IntFieldUpdateOperationsInput | number
    name_subd?: StringFieldUpdateOperationsInput | string
    id_city?: IntFieldUpdateOperationsInput | number
    name_city?: StringFieldUpdateOperationsInput | string
    id_prov?: IntFieldUpdateOperationsInput | number
    name_prov?: StringFieldUpdateOperationsInput | string
    shipping_cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrderUncheckedUpdateWithoutRel_order_itemInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_user?: StringFieldUpdateOperationsInput | string
    name_user?: StringFieldUpdateOperationsInput | string
    id_merchant?: StringFieldUpdateOperationsInput | string
    name_merchant?: StringFieldUpdateOperationsInput | string
    id_courier?: StringFieldUpdateOperationsInput | string
    name_courier?: StringFieldUpdateOperationsInput | string
    destination?: StringFieldUpdateOperationsInput | string
    id_subd?: IntFieldUpdateOperationsInput | number
    name_subd?: StringFieldUpdateOperationsInput | string
    id_city?: IntFieldUpdateOperationsInput | number
    name_city?: StringFieldUpdateOperationsInput | string
    id_prov?: IntFieldUpdateOperationsInput | number
    name_prov?: StringFieldUpdateOperationsInput | string
    shipping_cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type Status_orderCreateWithoutRel_log_orderInput = {
    name: string
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type Status_orderUncheckedCreateWithoutRel_log_orderInput = {
    id?: number
    name: string
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type Status_orderCreateOrConnectWithoutRel_log_orderInput = {
    where: Status_orderWhereUniqueInput
    create: XOR<Status_orderCreateWithoutRel_log_orderInput, Status_orderUncheckedCreateWithoutRel_log_orderInput>
  }

  export type Status_orderUpsertWithoutRel_log_orderInput = {
    update: XOR<Status_orderUpdateWithoutRel_log_orderInput, Status_orderUncheckedUpdateWithoutRel_log_orderInput>
    create: XOR<Status_orderCreateWithoutRel_log_orderInput, Status_orderUncheckedCreateWithoutRel_log_orderInput>
    where?: Status_orderWhereInput
  }

  export type Status_orderUpdateToOneWithWhereWithoutRel_log_orderInput = {
    where?: Status_orderWhereInput
    data: XOR<Status_orderUpdateWithoutRel_log_orderInput, Status_orderUncheckedUpdateWithoutRel_log_orderInput>
  }

  export type Status_orderUpdateWithoutRel_log_orderInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type Status_orderUncheckedUpdateWithoutRel_log_orderInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type History_order_itemCreateWithoutRel_history_orderInput = {
    id: string
    id_menu: string
    name_menu: string
    id_variant: string
    name_variant: string
    qty: number
    note: string
    price: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type History_order_itemUncheckedCreateWithoutRel_history_orderInput = {
    id: string
    id_menu: string
    name_menu: string
    id_variant: string
    name_variant: string
    qty: number
    note: string
    price: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type History_order_itemCreateOrConnectWithoutRel_history_orderInput = {
    where: History_order_itemWhereUniqueInput
    create: XOR<History_order_itemCreateWithoutRel_history_orderInput, History_order_itemUncheckedCreateWithoutRel_history_orderInput>
  }

  export type History_order_itemCreateManyRel_history_orderInputEnvelope = {
    data: History_order_itemCreateManyRel_history_orderInput | History_order_itemCreateManyRel_history_orderInput[]
    skipDuplicates?: boolean
  }

  export type History_order_itemUpsertWithWhereUniqueWithoutRel_history_orderInput = {
    where: History_order_itemWhereUniqueInput
    update: XOR<History_order_itemUpdateWithoutRel_history_orderInput, History_order_itemUncheckedUpdateWithoutRel_history_orderInput>
    create: XOR<History_order_itemCreateWithoutRel_history_orderInput, History_order_itemUncheckedCreateWithoutRel_history_orderInput>
  }

  export type History_order_itemUpdateWithWhereUniqueWithoutRel_history_orderInput = {
    where: History_order_itemWhereUniqueInput
    data: XOR<History_order_itemUpdateWithoutRel_history_orderInput, History_order_itemUncheckedUpdateWithoutRel_history_orderInput>
  }

  export type History_order_itemUpdateManyWithWhereWithoutRel_history_orderInput = {
    where: History_order_itemScalarWhereInput
    data: XOR<History_order_itemUpdateManyMutationInput, History_order_itemUncheckedUpdateManyWithoutRel_history_orderInput>
  }

  export type History_order_itemScalarWhereInput = {
    AND?: History_order_itemScalarWhereInput | History_order_itemScalarWhereInput[]
    OR?: History_order_itemScalarWhereInput[]
    NOT?: History_order_itemScalarWhereInput | History_order_itemScalarWhereInput[]
    id?: StringFilter<"History_order_item"> | string
    id_menu?: StringFilter<"History_order_item"> | string
    name_menu?: StringFilter<"History_order_item"> | string
    id_variant?: StringFilter<"History_order_item"> | string
    name_variant?: StringFilter<"History_order_item"> | string
    qty?: IntFilter<"History_order_item"> | number
    note?: StringFilter<"History_order_item"> | string
    price?: DecimalFilter<"History_order_item"> | Decimal | DecimalJsLike | number | string
    id_order?: StringFilter<"History_order_item"> | string
    created_at?: DateTimeFilter<"History_order_item"> | Date | string
    update_at?: DateTimeNullableFilter<"History_order_item"> | Date | string | null
  }

  export type History_orderCreateWithoutRel_history_order_itemInput = {
    id: string
    id_user: string
    name_user: string
    id_merchant: string
    name_merchant: string
    id_courier: string
    name_courier: string
    destination: string
    id_subd: number
    name_subd: string
    id_city: number
    name_city: string
    id_prov: number
    name_prov: string
    shipping_cost: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type History_orderUncheckedCreateWithoutRel_history_order_itemInput = {
    id: string
    id_user: string
    name_user: string
    id_merchant: string
    name_merchant: string
    id_courier: string
    name_courier: string
    destination: string
    id_subd: number
    name_subd: string
    id_city: number
    name_city: string
    id_prov: number
    name_prov: string
    shipping_cost: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type History_orderCreateOrConnectWithoutRel_history_order_itemInput = {
    where: History_orderWhereUniqueInput
    create: XOR<History_orderCreateWithoutRel_history_order_itemInput, History_orderUncheckedCreateWithoutRel_history_order_itemInput>
  }

  export type History_orderUpsertWithoutRel_history_order_itemInput = {
    update: XOR<History_orderUpdateWithoutRel_history_order_itemInput, History_orderUncheckedUpdateWithoutRel_history_order_itemInput>
    create: XOR<History_orderCreateWithoutRel_history_order_itemInput, History_orderUncheckedCreateWithoutRel_history_order_itemInput>
    where?: History_orderWhereInput
  }

  export type History_orderUpdateToOneWithWhereWithoutRel_history_order_itemInput = {
    where?: History_orderWhereInput
    data: XOR<History_orderUpdateWithoutRel_history_order_itemInput, History_orderUncheckedUpdateWithoutRel_history_order_itemInput>
  }

  export type History_orderUpdateWithoutRel_history_order_itemInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_user?: StringFieldUpdateOperationsInput | string
    name_user?: StringFieldUpdateOperationsInput | string
    id_merchant?: StringFieldUpdateOperationsInput | string
    name_merchant?: StringFieldUpdateOperationsInput | string
    id_courier?: StringFieldUpdateOperationsInput | string
    name_courier?: StringFieldUpdateOperationsInput | string
    destination?: StringFieldUpdateOperationsInput | string
    id_subd?: IntFieldUpdateOperationsInput | number
    name_subd?: StringFieldUpdateOperationsInput | string
    id_city?: IntFieldUpdateOperationsInput | number
    name_city?: StringFieldUpdateOperationsInput | string
    id_prov?: IntFieldUpdateOperationsInput | number
    name_prov?: StringFieldUpdateOperationsInput | string
    shipping_cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type History_orderUncheckedUpdateWithoutRel_history_order_itemInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_user?: StringFieldUpdateOperationsInput | string
    name_user?: StringFieldUpdateOperationsInput | string
    id_merchant?: StringFieldUpdateOperationsInput | string
    name_merchant?: StringFieldUpdateOperationsInput | string
    id_courier?: StringFieldUpdateOperationsInput | string
    name_courier?: StringFieldUpdateOperationsInput | string
    destination?: StringFieldUpdateOperationsInput | string
    id_subd?: IntFieldUpdateOperationsInput | number
    name_subd?: StringFieldUpdateOperationsInput | string
    id_city?: IntFieldUpdateOperationsInput | number
    name_city?: StringFieldUpdateOperationsInput | string
    id_prov?: IntFieldUpdateOperationsInput | number
    name_prov?: StringFieldUpdateOperationsInput | string
    shipping_cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateManyRel_statusInput = {
    id: string
    username: string
    password: string
    name: string
    email: string
    phone?: string | null
    poin: number
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type CourierCreateManyRel_statusInput = {
    id: string
    username: string
    password: string
    name: string
    email: string
    phone?: string | null
    number_plate: string
    id_brand: number
    color: string
    is_active?: boolean
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type MerchantCreateManyRel_statusInput = {
    id: string
    username: string
    password: string
    name: string
    address: string
    id_subd: number
    id_city: number
    id_prov: number
    email: string
    phone?: string | null
    is_open?: boolean
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type UserUpdateWithoutRel_statusInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    poin?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateWithoutRel_statusInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    poin?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyWithoutRel_statusInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    poin?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CourierUpdateWithoutRel_statusInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    number_plate?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_brand?: BrandUpdateOneRequiredWithoutRel_courierNestedInput
  }

  export type CourierUncheckedUpdateWithoutRel_statusInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    number_plate?: StringFieldUpdateOperationsInput | string
    id_brand?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CourierUncheckedUpdateManyWithoutRel_statusInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    number_plate?: StringFieldUpdateOperationsInput | string
    id_brand?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MerchantUpdateWithoutRel_statusInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    is_open?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_menu?: MenuUpdateManyWithoutRel_merchantNestedInput
    rel_subd?: SubdistrictUpdateOneRequiredWithoutRel_merchantNestedInput
    rel_city?: CityUpdateOneRequiredWithoutRel_merchantNestedInput
    rel_prov?: ProvinceUpdateOneRequiredWithoutRel_merchantNestedInput
  }

  export type MerchantUncheckedUpdateWithoutRel_statusInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    id_subd?: IntFieldUpdateOperationsInput | number
    id_city?: IntFieldUpdateOperationsInput | number
    id_prov?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    is_open?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_menu?: MenuUncheckedUpdateManyWithoutRel_merchantNestedInput
  }

  export type MerchantUncheckedUpdateManyWithoutRel_statusInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    id_subd?: IntFieldUpdateOperationsInput | number
    id_city?: IntFieldUpdateOperationsInput | number
    id_prov?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    is_open?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type Log_orderCreateManyRel_statusInput = {
    id?: number
    id_order: string
    detail_status: string
    change_by: string
    id_changer: string
    time?: Date | string
  }

  export type Log_orderUpdateWithoutRel_statusInput = {
    id_order?: StringFieldUpdateOperationsInput | string
    detail_status?: StringFieldUpdateOperationsInput | string
    change_by?: StringFieldUpdateOperationsInput | string
    id_changer?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Log_orderUncheckedUpdateWithoutRel_statusInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_order?: StringFieldUpdateOperationsInput | string
    detail_status?: StringFieldUpdateOperationsInput | string
    change_by?: StringFieldUpdateOperationsInput | string
    id_changer?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Log_orderUncheckedUpdateManyWithoutRel_statusInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_order?: StringFieldUpdateOperationsInput | string
    detail_status?: StringFieldUpdateOperationsInput | string
    change_by?: StringFieldUpdateOperationsInput | string
    id_changer?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourierCreateManyRel_brandInput = {
    id: string
    username: string
    password: string
    name: string
    email: string
    phone?: string | null
    number_plate: string
    color: string
    is_active?: boolean
    id_status: number
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type CourierUpdateWithoutRel_brandInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    number_plate?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_status?: StatusUpdateOneRequiredWithoutRel_courierNestedInput
  }

  export type CourierUncheckedUpdateWithoutRel_brandInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    number_plate?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    id_status?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CourierUncheckedUpdateManyWithoutRel_brandInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    number_plate?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    id_status?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MerchantCreateManyRel_subdInput = {
    id: string
    username: string
    password: string
    name: string
    address: string
    id_city: number
    id_prov: number
    email: string
    phone?: string | null
    is_open?: boolean
    id_status: number
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type MerchantUpdateWithoutRel_subdInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    is_open?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_menu?: MenuUpdateManyWithoutRel_merchantNestedInput
    rel_city?: CityUpdateOneRequiredWithoutRel_merchantNestedInput
    rel_prov?: ProvinceUpdateOneRequiredWithoutRel_merchantNestedInput
    rel_status?: StatusUpdateOneRequiredWithoutRel_merchantNestedInput
  }

  export type MerchantUncheckedUpdateWithoutRel_subdInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    id_city?: IntFieldUpdateOperationsInput | number
    id_prov?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    is_open?: BoolFieldUpdateOperationsInput | boolean
    id_status?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_menu?: MenuUncheckedUpdateManyWithoutRel_merchantNestedInput
  }

  export type MerchantUncheckedUpdateManyWithoutRel_subdInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    id_city?: IntFieldUpdateOperationsInput | number
    id_prov?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    is_open?: BoolFieldUpdateOperationsInput | boolean
    id_status?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MerchantCreateManyRel_cityInput = {
    id: string
    username: string
    password: string
    name: string
    address: string
    id_subd: number
    id_prov: number
    email: string
    phone?: string | null
    is_open?: boolean
    id_status: number
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type MerchantUpdateWithoutRel_cityInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    is_open?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_menu?: MenuUpdateManyWithoutRel_merchantNestedInput
    rel_subd?: SubdistrictUpdateOneRequiredWithoutRel_merchantNestedInput
    rel_prov?: ProvinceUpdateOneRequiredWithoutRel_merchantNestedInput
    rel_status?: StatusUpdateOneRequiredWithoutRel_merchantNestedInput
  }

  export type MerchantUncheckedUpdateWithoutRel_cityInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    id_subd?: IntFieldUpdateOperationsInput | number
    id_prov?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    is_open?: BoolFieldUpdateOperationsInput | boolean
    id_status?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_menu?: MenuUncheckedUpdateManyWithoutRel_merchantNestedInput
  }

  export type MerchantUncheckedUpdateManyWithoutRel_cityInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    id_subd?: IntFieldUpdateOperationsInput | number
    id_prov?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    is_open?: BoolFieldUpdateOperationsInput | boolean
    id_status?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MerchantCreateManyRel_provInput = {
    id: string
    username: string
    password: string
    name: string
    address: string
    id_subd: number
    id_city: number
    email: string
    phone?: string | null
    is_open?: boolean
    id_status: number
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type MerchantUpdateWithoutRel_provInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    is_open?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_menu?: MenuUpdateManyWithoutRel_merchantNestedInput
    rel_subd?: SubdistrictUpdateOneRequiredWithoutRel_merchantNestedInput
    rel_city?: CityUpdateOneRequiredWithoutRel_merchantNestedInput
    rel_status?: StatusUpdateOneRequiredWithoutRel_merchantNestedInput
  }

  export type MerchantUncheckedUpdateWithoutRel_provInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    id_subd?: IntFieldUpdateOperationsInput | number
    id_city?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    is_open?: BoolFieldUpdateOperationsInput | boolean
    id_status?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_menu?: MenuUncheckedUpdateManyWithoutRel_merchantNestedInput
  }

  export type MerchantUncheckedUpdateManyWithoutRel_provInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    id_subd?: IntFieldUpdateOperationsInput | number
    id_city?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    is_open?: BoolFieldUpdateOperationsInput | boolean
    id_status?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MenuCreateManyRel_categoryInput = {
    id: string
    name: string
    detail?: string | null
    id_merchant: string
    price: Decimal | DecimalJsLike | number | string
    is_ready?: boolean
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type MenuUpdateWithoutRel_categoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_ready?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_variant?: VariantUpdateManyWithoutRel_menuNestedInput
    rel_merchant?: MerchantUpdateOneRequiredWithoutRel_menuNestedInput
  }

  export type MenuUncheckedUpdateWithoutRel_categoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    id_merchant?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_ready?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_variant?: VariantUncheckedUpdateManyWithoutRel_menuNestedInput
  }

  export type MenuUncheckedUpdateManyWithoutRel_categoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    id_merchant?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_ready?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MenuCreateManyRel_merchantInput = {
    id: string
    name: string
    detail?: string | null
    id_category: number
    price: Decimal | DecimalJsLike | number | string
    is_ready?: boolean
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type MenuUpdateWithoutRel_merchantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_ready?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_variant?: VariantUpdateManyWithoutRel_menuNestedInput
    rel_category?: CategoryUpdateOneRequiredWithoutRel_menuNestedInput
  }

  export type MenuUncheckedUpdateWithoutRel_merchantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    id_category?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_ready?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_variant?: VariantUncheckedUpdateManyWithoutRel_menuNestedInput
  }

  export type MenuUncheckedUpdateManyWithoutRel_merchantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    id_category?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_ready?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type VariantCreateManyRel_menuInput = {
    id: string
    name: string
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type VariantUpdateWithoutRel_menuInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_variant_item?: Variant_itemUpdateManyWithoutRel_variantNestedInput
  }

  export type VariantUncheckedUpdateWithoutRel_menuInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rel_variant_item?: Variant_itemUncheckedUpdateManyWithoutRel_variantNestedInput
  }

  export type VariantUncheckedUpdateManyWithoutRel_menuInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type Variant_itemCreateManyRel_variantInput = {
    id: string
    name: string
    price: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type Variant_itemUpdateWithoutRel_variantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type Variant_itemUncheckedUpdateWithoutRel_variantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type Variant_itemUncheckedUpdateManyWithoutRel_variantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type Order_itemCreateManyRel_orderInput = {
    id: string
    id_menu: string
    name_menu: string
    id_variant: string
    name_variant: string
    qty: number
    note: string
    price: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type Order_itemUpdateWithoutRel_orderInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_menu?: StringFieldUpdateOperationsInput | string
    name_menu?: StringFieldUpdateOperationsInput | string
    id_variant?: StringFieldUpdateOperationsInput | string
    name_variant?: StringFieldUpdateOperationsInput | string
    qty?: IntFieldUpdateOperationsInput | number
    note?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type Order_itemUncheckedUpdateWithoutRel_orderInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_menu?: StringFieldUpdateOperationsInput | string
    name_menu?: StringFieldUpdateOperationsInput | string
    id_variant?: StringFieldUpdateOperationsInput | string
    name_variant?: StringFieldUpdateOperationsInput | string
    qty?: IntFieldUpdateOperationsInput | number
    note?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type Order_itemUncheckedUpdateManyWithoutRel_orderInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_menu?: StringFieldUpdateOperationsInput | string
    name_menu?: StringFieldUpdateOperationsInput | string
    id_variant?: StringFieldUpdateOperationsInput | string
    name_variant?: StringFieldUpdateOperationsInput | string
    qty?: IntFieldUpdateOperationsInput | number
    note?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type History_order_itemCreateManyRel_history_orderInput = {
    id: string
    id_menu: string
    name_menu: string
    id_variant: string
    name_variant: string
    qty: number
    note: string
    price: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    update_at?: Date | string | null
  }

  export type History_order_itemUpdateWithoutRel_history_orderInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_menu?: StringFieldUpdateOperationsInput | string
    name_menu?: StringFieldUpdateOperationsInput | string
    id_variant?: StringFieldUpdateOperationsInput | string
    name_variant?: StringFieldUpdateOperationsInput | string
    qty?: IntFieldUpdateOperationsInput | number
    note?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type History_order_itemUncheckedUpdateWithoutRel_history_orderInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_menu?: StringFieldUpdateOperationsInput | string
    name_menu?: StringFieldUpdateOperationsInput | string
    id_variant?: StringFieldUpdateOperationsInput | string
    name_variant?: StringFieldUpdateOperationsInput | string
    qty?: IntFieldUpdateOperationsInput | number
    note?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type History_order_itemUncheckedUpdateManyWithoutRel_history_orderInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_menu?: StringFieldUpdateOperationsInput | string
    name_menu?: StringFieldUpdateOperationsInput | string
    id_variant?: StringFieldUpdateOperationsInput | string
    name_variant?: StringFieldUpdateOperationsInput | string
    qty?: IntFieldUpdateOperationsInput | number
    note?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}